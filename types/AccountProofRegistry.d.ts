/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountProofRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addAccountProof(bytes32)": FunctionFragment;
    "removeAccountProof(bytes32)": FunctionFragment;
    "verifyAccountProof(address,bytes32)": FunctionFragment;
    "verifyAccountProofAtBlock(address,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAccountProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAccountProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountProof",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountProofAtBlock",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAccountProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAccountProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountProofAtBlock",
    data: BytesLike
  ): Result;

  events: {
    "AccountProofAdded(address,bytes32)": EventFragment;
    "AccountProofRemoved(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountProofAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountProofRemoved"): EventFragment;
}

export class AccountProofRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountProofRegistryInterface;

  functions: {
    addAccountProof(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAccountProof(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyAccountProof(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyAccountProof(address,bytes32)"(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyAccountProofAtBlock(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyAccountProofAtBlock(address,bytes32,uint256)"(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addAccountProof(
    hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAccountProof(bytes32)"(
    hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAccountProof(
    hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAccountProof(bytes32)"(
    hash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyAccountProof(
    account: string,
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyAccountProof(address,bytes32)"(
    account: string,
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyAccountProofAtBlock(
    account: string,
    hash: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyAccountProofAtBlock(address,bytes32,uint256)"(
    account: string,
    hash: BytesLike,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addAccountProof(hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    "addAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAccountProof(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAccountProof(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyAccountProof(address,bytes32)"(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyAccountProofAtBlock(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyAccountProofAtBlock(address,bytes32,uint256)"(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AccountProofAdded(account: null, hash: null): EventFilter;

    AccountProofRemoved(account: null, hash: null): EventFilter;
  };

  estimateGas: {
    addAccountProof(hash: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "addAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAccountProof(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyAccountProof(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAccountProof(address,bytes32)"(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAccountProofAtBlock(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAccountProofAtBlock(address,bytes32,uint256)"(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccountProof(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAccountProof(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAccountProof(bytes32)"(
      hash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyAccountProof(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAccountProof(address,bytes32)"(
      account: string,
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAccountProofAtBlock(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAccountProofAtBlock(address,bytes32,uint256)"(
      account: string,
      hash: BytesLike,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
