/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Contract,
  ContractFactory,
  PayableOverrides,
} from "@ethersproject/contracts";

import type { Account } from "../Account";

export class Account__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: PayableOverrides): Promise<Account> {
    return super.deploy(overrides || {}) as Promise<Account>;
  }
  getDeployTransaction(overrides?: PayableOverrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Account {
    return super.attach(address) as Account;
  }
  connect(signer: Signer): Account__factory {
    return super.connect(signer) as Account__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Account {
    return new Contract(address, _abi, signerOrProvider) as Account;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeTransaction",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600080546001600160a01b03191633179055610291806100256000396000f3fe60806040526004361061002d5760003560e01c80633f579f4214610039578063f77c47911461014d57610034565b3661003457005b600080fd5b34801561004557600080fd5b506100d86004803603606081101561005c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561009957600080fd5b8201836020820111156100ab57600080fd5b803590602001918460018302840111640100000000831117156100cd57600080fd5b50909250905061018b565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101125781810151838201526020016100fa565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015957600080fd5b5061016261023f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60005460609073ffffffffffffffffffffffffffffffffffffffff1633146101b257600080fd5b606060008673ffffffffffffffffffffffffffffffffffffffff16868686604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114610221576040519150601f19603f3d011682016040523d82523d6000602084013e610226565b606091505b50925090508061023557600080fd5b5095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff168156fea2646970667358221220387b210b7074c6be7f3199d3be7aac69d43cb8f8667ac52866d1a9f1323c390e64736f6c634300060c0033";
