/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountOwnerRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addAccountOwner(address)": FunctionFragment;
    "removeAccountOwner(address)": FunctionFragment;
    "verifyAccountOwner(address,address)": FunctionFragment;
    "verifyAccountOwnerAtBlock(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAccountOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAccountOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAccountOwnerAtBlock",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAccountOwnerAtBlock",
    data: BytesLike
  ): Result;

  events: {
    "AccountOwnerAdded(address,address)": EventFragment;
    "AccountOwnerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountOwnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountOwnerRemoved"): EventFragment;
}

export class AccountOwnerRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountOwnerRegistryInterface;

  functions: {
    addAccountOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeAccountOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifyAccountOwner(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyAccountOwner(address,address)"(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyAccountOwnerAtBlock(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyAccountOwnerAtBlock(address,address,uint256)"(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addAccountOwner(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAccountOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeAccountOwner(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAccountOwner(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifyAccountOwner(
    account: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyAccountOwner(address,address)"(
    account: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyAccountOwnerAtBlock(
    account: string,
    owner: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyAccountOwnerAtBlock(address,address,uint256)"(
    account: string,
    owner: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addAccountOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    "addAccountOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAccountOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    "removeAccountOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyAccountOwner(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyAccountOwner(address,address)"(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyAccountOwnerAtBlock(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyAccountOwnerAtBlock(address,address,uint256)"(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AccountOwnerAdded(account: null, owner: null): EventFilter;

    AccountOwnerRemoved(account: null, owner: null): EventFilter;
  };

  estimateGas: {
    addAccountOwner(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "addAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeAccountOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    verifyAccountOwner(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAccountOwner(address,address)"(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAccountOwnerAtBlock(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAccountOwnerAtBlock(address,address,uint256)"(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAccountOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeAccountOwner(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAccountOwner(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifyAccountOwner(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAccountOwner(address,address)"(
      account: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAccountOwnerAtBlock(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAccountOwnerAtBlock(address,address,uint256)"(
      account: string,
      owner: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
