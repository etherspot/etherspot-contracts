{
  "address": "0x143ddaB8CE178DBD2F8D0062AC2bEfcA64572C41",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "NodeVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "label",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ENSController.SubNodeRegistration",
          "name": "subNodeRegistration",
          "type": "tuple"
        }
      ],
      "name": "hashSubNodeRegistration",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "guardians_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nodeOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "registerSubNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "releaseNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "addr_",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr_",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "submitNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "syncAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGuardianSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "verifyNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd05a04e524954ae6b0186107192b293e89af13d8501f948b899a4f8e2f8c732b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x53fE9288897e254698175740aa359E19E26c10af",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "4132749",
    "logsBloom": "0x
    "blockHash": "0x0e7a046c1f14078b0f81dbb72773e721131fac52912bfb763fa4e3ffa07bc699",
    "transactionHash": "0xd05a04e524954ae6b0186107192b293e89af13d8501f948b899a4f8e2f8c732b",
    "logs": [],
    "blockNumber": 9814523,
    "cumulativeGasUsed": "4547711",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "553eed465bd8155b17258758c560dc9d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"NodeVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"internalType\":\"struct ENSController.SubNodeRegistration\",\"name\":\"subNodeRegistration\",\"type\":\"tuple\"}],\"name\":\"hashSubNodeRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardians_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nodeOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"registerSubNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"releaseNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"addr_\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"submitNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"syncAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGuardianSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"verifyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"details\":\"The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.\",\"events\":{\"NodeReleased(bytes32,address)\":{\"details\":\"Emitted when new node is released\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeSubmitted(bytes32,address)\":{\"details\":\"Emitted when new node is submitted\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeVerified(bytes32)\":{\"details\":\"Emitted when the existing owner is verified\",\"params\":{\"node\":\"node name hash\"}},\"RegistryChanged(address)\":{\"details\":\"Emitted when ENS registry address is changed\",\"params\":{\"registry\":\"registry address\"}}},\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"constructor\":{\"details\":\"Public constructor\"},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"params\":{\"subNodeRegistration\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"params\":{\"gateway_\":\"gateway address\",\"registry_\":\"ENS registry address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"},\"returns\":{\"_0\":\"true when guardian exists\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"registerSubNode(bytes32,bytes32,bytes)\":{\"params\":{\"guardianSignature\":\"guardian signature\",\"label\":\"label hash\",\"node\":\"node name hash\"}},\"releaseNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"removeGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"setRegistry(address)\":{\"params\":{\"registry_\":\"registry address\"}},\"submitNode(bytes32)\":{\"details\":\"Should be called from the current ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"syncAddr(bytes32)\":{\"params\":{\"node\":\"node name hash\"}},\"verifyGuardianSignature(bytes32,bytes)\":{\"params\":{\"messageHash\":\"message hash\",\"signature\":\"signature\"},\"returns\":{\"_0\":\"true on correct guardian signature\"}},\"verifyNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}}},\"title\":\"ENS controller\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Adds a new guardian\"},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"notice\":\"Hashes `SubNodeRegistration` typed data\"},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initializes `ENSController` contract\"},\"isGuardian(address)\":{\"notice\":\"Check if guardian exists\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"registerSubNode(bytes32,bytes32,bytes)\":{\"notice\":\"Registers sub node\"},\"releaseNode(bytes32)\":{\"notice\":\"Releases node\"},\"removeGuardian(address)\":{\"notice\":\"Removes the existing guardian\"},\"setRegistry(address)\":{\"notice\":\"Sets registry\"},\"submitNode(bytes32)\":{\"notice\":\"Submits node\"},\"syncAddr(bytes32)\":{\"notice\":\"Sync address\"},\"verifyGuardianSignature(bytes32,bytes)\":{\"notice\":\"Verifies guardian signature\"},\"verifyNode(bytes32)\":{\"notice\":\"Verifies node\"}},\"notice\":\"ENS subnode registrar\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ens/ENSController.sol\":\"ENSController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n *\\n * @dev Contract module which provides a guardian-type control mechanism.\\n * It allows key accounts to have guardians and restricts specific methods to be accessible by guardians only.\\n *\\n * Each guardian account can remove other guardians\\n *\\n * Use `_initializeGuarded` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when a new guardian is added\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianAdded(\\n    address sender,\\n    address guardian\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing guardian is removed\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianRemoved(\\n    address sender,\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not a guardian account\\n   */\\n  modifier onlyGuardian() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      guardians[tx.origin],\\n      \\\"Guarded: tx.origin is not the guardian\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new guardian\\n   * @param guardian guardian address\\n   */\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  /**\\n   * @notice Removes the existing guardian\\n   * @param guardian guardian address\\n   */\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin != guardian,\\n      \\\"Guarded: cannot remove self\\\"\\n    );\\n\\n    require(\\n      guardians[guardian],\\n      \\\"Guarded: guardian doesn't exist\\\"\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Check if guardian exists\\n   * @param guardian guardian address\\n   * @return true when guardian exists\\n   */\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  /**\\n   * @notice Verifies guardian signature\\n   * @param messageHash message hash\\n   * @param signature signature\\n   * @return true on correct guardian signature\\n   */\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `Guarded` contract\\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\\n   * @param guardians_ array of guardians addresses\\n   */\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _addGuardian(tx.origin);\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0),\\n      \\\"Guarded: cannot add 0x0 guardian\\\"\\n    );\\n\\n    require(\\n      !guardians[guardian],\\n      \\\"Guarded: guardian already exists\\\"\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x8f2e314e77e258f9ff75a55f031472ece62af57c60dbd718463d961282f7bd65\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/utils/Strings.sol#L12\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function toEthereumSignedMessageHash(\\n    bytes memory message\\n  )\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n      _uintToString(message.length),\\n      abi.encodePacked(message)\\n    ));\\n  }\\n\\n  function _uintToString(\\n    uint num\\n  )\\n    private\\n    pure\\n    returns (string memory)\\n  {\\n    if (num == 0) {\\n      return \\\"0\\\";\\n    } else if (num == 32) {\\n      return \\\"32\\\";\\n    }\\n\\n    uint i = num;\\n    uint j = num;\\n\\n    uint len;\\n\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n\\n    bytes memory result = new bytes(len);\\n\\n    uint k = len - 1;\\n\\n    while (i != 0) {\\n      result[k--] = byte(uint8(48 + i % 10));\\n      i /= 10;\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\",\"keccak256\":\"0x142d97534c2f5a8d69c4a1e1d1e83fc268beb36dc7ce65335aebfc4f81c71531\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/ens/ENSController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\nimport \\\"./resolvers/ENSAddressResolver.sol\\\";\\nimport \\\"./resolvers/ENSNameResolver.sol\\\";\\nimport \\\"./resolvers/ENSPubKeyResolver.sol\\\";\\nimport \\\"./resolvers/ENSTextResolver.sol\\\";\\nimport \\\"./ENSRegistry.sol\\\";\\n\\n\\n/**\\n * @title ENS controller\\n *\\n * @notice ENS subnode registrar\\n *\\n * @dev The process of adding root node consists of 3 steps:\\n * 1. `submitNode` - should be called from ENS node owner,\\n * 2. Change ENS node owner in ENS registry to ENS controller,\\n * 3. `verifyNode` - should be called from previous ENS node owner,\\n *\\n * To register sub node, `msg.sender` need to send valid signature from one of guardian key.\\n * Once registration is complete `msg.sender` becoming both node owner and `addr` record value.\\n *\\n * After registration sub node cannot be replaced.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient, ENSAddressResolver, ENSNameResolver, ENSPubKeyResolver, ENSTextResolver {\\n  struct SubNodeRegistration {\\n    address account;\\n    bytes32 node;\\n    bytes32 label;\\n  }\\n\\n  bytes4 private constant INTERFACE_META_ID = bytes4(keccak256(abi.encodePacked(\\\"supportsInterface(bytes4)\\\")));\\n\\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\\n    \\\"SubNodeRegistration(address account,bytes32 node,bytes32 label)\\\"\\n  );\\n\\n  ENSRegistry public registry;\\n\\n  mapping(bytes32 => address) public nodeOwners;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when new node is submitted\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeSubmitted(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is verified\\n   * @param node node name hash\\n   */\\n  event NodeVerified(\\n    bytes32 node\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is released\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeReleased(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when ENS registry address is changed\\n   * @param registry registry address\\n   */\\n  event RegistryChanged(\\n    address registry\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ENSController` contract\\n   * @param registry_ ENS registry address\\n   * @param gateway_ gateway address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ENSRegistry registry_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets registry\\n   * @param registry_ registry address\\n   */\\n  function setRegistry(\\n    ENSRegistry registry_\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    require(\\n      registry_ != registry,\\n      \\\"ENSController: registry already set\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    emit RegistryChanged(\\n      address(registry)\\n    );\\n  }\\n\\n  /**\\n   * @notice Submits node\\n   * @dev Should be called from the current ENS node owner\\n   * @param node node name hash\\n   */\\n  function submitNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      _addr(node) == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodeOwners[node] == address(0),\\n      \\\"ENSController: node already submitted\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == owner,\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodeOwners[node] = owner;\\n\\n    emit NodeSubmitted(node, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function verifyNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      _addr(node) == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodeOwners[node] == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == address(this),\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    _setAddr(node, address(this));\\n\\n    registry.setResolver(node, address(this));\\n\\n    emit NodeVerified(node);\\n  }\\n\\n  /**\\n   * @notice Releases node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function releaseNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      _addr(node) == address(this),\\n      \\\"ENSController: node doesn't exist\\\"\\n    );\\n\\n    require(\\n      nodeOwners[node] == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    registry.setOwner(node, owner);\\n\\n    delete nodeOwners[node];\\n\\n    emit NodeReleased(node, owner);\\n  }\\n\\n  /**\\n   * @notice Sync address\\n   * @param node node name hash\\n   */\\n  function syncAddr(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    require(\\n      account == registry.owner(node),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    require(\\n      registry.resolver(node) == address(this),\\n      \\\"ENSController: invalid node resolver\\\"\\n    );\\n\\n    require(\\n      _addr(node) == address(0),\\n      \\\"ENSController: node already in sync\\\"\\n    );\\n\\n    _setAddr(node, account);\\n  }\\n\\n  /**\\n   * @notice Registers sub node\\n   * @param node node name hash\\n   * @param label label hash\\n   * @param guardianSignature guardian signature\\n   */\\n  function registerSubNode(\\n    bytes32 node,\\n    bytes32 label,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"ENSController: invalid guardian signature\\\"\\n    );\\n\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _addr(node) == address(this),\\n      \\\"ENSController: invalid node\\\"\\n    );\\n\\n    require(\\n      _addr(subNode) == address(0),\\n      \\\"ENSController: label already taken\\\"\\n    );\\n\\n    registry.setSubnodeRecord(node, label, address(this), address(this), 0);\\n    registry.setOwner(subNode, account);\\n\\n    _setAddr(subNode, account);\\n  }\\n\\n  // external functions (pure)\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  )\\n    external\\n    pure\\n    returns(bool)\\n  {\\n    return interfaceID == INTERFACE_META_ID ||\\n    interfaceID == INTERFACE_ADDR_ID ||\\n    interfaceID == INTERFACE_ADDRESS_ID ||\\n    interfaceID == INTERFACE_NAME_ID ||\\n    interfaceID == INTERFACE_PUB_KEY_ID ||\\n    interfaceID == INTERFACE_TEXT_ID;\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `SubNodeRegistration` typed data\\n   * @param subNodeRegistration struct\\n   * @return hash\\n   */\\n  function hashSubNodeRegistration(\\n    SubNodeRegistration memory subNodeRegistration\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        subNodeRegistration.account,\\n        subNodeRegistration.node,\\n        subNodeRegistration.label\\n      )\\n    );\\n  }\\n\\n  // internal functions (views)\\n\\n  function _isNodeOwner(\\n    bytes32 node\\n  )\\n    internal\\n    override\\n    view\\n    returns (bool)\\n  {\\n    return registry.owner(node) == _getContextAccount();\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    bytes32 node,\\n    bytes32 label\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      SUB_NODE_REGISTRATION_TYPE_HASH,\\n      account,\\n      node,\\n      label\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x9a33394246b22313ff1b41b87c46ccf1679ec9695202bb445841fe657acca168\",\"license\":\"MIT\"},\"src/ens/ENSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ENS registry\\n *\\n * @dev Base on https://github.com/ensdomains/ens/blob/ff0f41747c05f1598973b0fe7ad0d9e09565dfcd/contracts/ENSRegistry.sol\\n */\\ncontract ENSRegistry {\\n  struct Record {\\n    address owner;\\n    address resolver;\\n    uint64 ttl;\\n  }\\n\\n  mapping (bytes32 => Record) private records;\\n  mapping (address => mapping(address => bool)) private operators;\\n\\n  // events\\n\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  // modifiers\\n\\n  modifier authorised(\\n    bytes32 node\\n  )\\n  {\\n    address owner = records[node].owner;\\n\\n    require(\\n      owner == msg.sender || operators[owner][msg.sender],\\n      \\\"ENSRegistry: reverted by authorised modifier\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor()\\n    public\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    records[0x0].owner = tx.origin;\\n  }\\n\\n  // external functions\\n\\n  function setRecord(\\n    bytes32 node,\\n    address owner_,\\n    address resolver_,\\n    uint64 ttl_\\n  )\\n    external\\n  {\\n    setOwner(node, owner_);\\n\\n    _setResolverAndTTL(node, resolver_, ttl_);\\n  }\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl_\\n  )\\n    external\\n    authorised(node)\\n  {\\n    records[node].ttl = ttl_;\\n\\n    emit NewTTL(node, ttl_);\\n  }\\n\\n  function setSubnodeRecord(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner_,\\n    address resolver_,\\n    uint64 ttl_\\n  )\\n    external\\n  {\\n    bytes32 subNode = setSubnodeOwner(node, label, owner_);\\n\\n    _setResolverAndTTL(subNode, resolver_, ttl_);\\n  }\\n\\n  function setApprovalForAll(\\n    address operator,\\n    bool approved\\n  )\\n    external\\n  {\\n    operators[msg.sender][operator] = approved;\\n\\n    emit ApprovalForAll(\\n      msg.sender,\\n      operator,\\n      approved\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    address addr = records[node].owner;\\n\\n    if (addr == address(this)) {\\n      return address(0x0);\\n    }\\n\\n    return addr;\\n  }\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].resolver;\\n  }\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (uint64)\\n  {\\n    return records[node].ttl;\\n  }\\n\\n  function recordExists(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return records[node].owner != address(0x0);\\n  }\\n\\n  function isApprovedForAll(\\n    address owner_,\\n    address operator\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return operators[owner_][operator];\\n  }\\n\\n  // public functions\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner_\\n  )\\n    public\\n    authorised(node)\\n  {\\n    records[node].owner = owner_;\\n\\n    emit Transfer(node, owner_);\\n  }\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver_\\n  )\\n    public\\n    authorised(node)\\n  {\\n    records[node].resolver = resolver_;\\n\\n    emit NewResolver(node, resolver_);\\n  }\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner_\\n  )\\n    public\\n    authorised(node)\\n    returns(bytes32)\\n  {\\n    bytes32 subNode = keccak256(abi.encodePacked(node, label));\\n\\n    records[subNode].owner = owner_;\\n\\n    emit NewOwner(node, label, owner_);\\n\\n    return subNode;\\n  }\\n\\n  // private functions\\n\\n  function _setResolverAndTTL(\\n    bytes32 node,\\n    address resolver_,\\n    uint64 ttl_\\n  )\\n    private\\n  {\\n    if (resolver_ != records[node].resolver) {\\n      records[node].resolver = resolver_;\\n\\n      emit NewResolver(node, resolver_);\\n    }\\n\\n    if (ttl_ != records[node].ttl) {\\n      records[node].ttl = ttl_;\\n\\n      emit NewTTL(node, ttl_);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe00dbdea09d17d41c2c14266e6e1b6b95938c0d374b266bb44a91cfcf0495612\",\"license\":\"MIT\"},\"src/ens/resolvers/ENSAbstractResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ENS abstract resolver\\n *\\n * @dev Base on https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/ResolverBase.sol\\n */\\nabstract contract ENSAbstractResolver {\\n  // modifiers\\n\\n  modifier onlyNodeOwner(bytes32 node)\\n  {\\n    require(\\n      _isNodeOwner(node),\\n      \\\"ENSAbstractResolver: reverted by onlyNodeOwner modifier\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  // internal functions (views)\\n\\n  function _isNodeOwner(\\n    bytes32 node\\n  )\\n    internal\\n    virtual\\n    view\\n    returns (bool);\\n}\\n\",\"keccak256\":\"0xc67d8bdd4904684e5d3388f7ca7d18c7d407058d6b548d8c591404c758a1ac60\",\"license\":\"MIT\"},\"src/ens/resolvers/ENSAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ENSAbstractResolver.sol\\\";\\n\\n\\n/**\\n * @title ENS abstract address resolver\\n *\\n * @dev Base on https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/profiles/AddrResolver.sol\\n */\\nabstract contract ENSAddressResolver is ENSAbstractResolver {\\n  bytes4 internal constant INTERFACE_ADDR_ID = bytes4(keccak256(abi.encodePacked(\\\"addr(bytes32)\\\")));\\n  bytes4 internal constant INTERFACE_ADDRESS_ID = bytes4(keccak256(abi.encodePacked(\\\"addr(bytes32,uint)\\\")));\\n\\n  uint internal constant COIN_TYPE_ETH = 60;\\n\\n  mapping(bytes32 => mapping(uint => bytes)) internal resolverAddresses;\\n\\n  // events\\n\\n  event AddrChanged(\\n    bytes32 indexed node,\\n    address addr\\n  );\\n\\n  event AddressChanged(\\n    bytes32 indexed node,\\n    uint coinType,\\n    bytes newAddress\\n  );\\n\\n  // external functions\\n\\n  function setAddr(\\n    bytes32 node,\\n    address addr_\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    _setAddr(node, addr_);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    uint coinType,\\n    bytes memory addr_\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    _setAddr(node, coinType, addr_);\\n  }\\n\\n  // external functions (views)\\n\\n  function addr(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return _addr(node);\\n  }\\n\\n  function addr(\\n    bytes32 node,\\n    uint coinType\\n  )\\n    external\\n    view\\n    returns (bytes memory)\\n  {\\n    return resolverAddresses[node][coinType];\\n  }\\n\\n  // internal functions\\n\\n  function _setAddr(\\n    bytes32 node,\\n    address addr_\\n  )\\n    internal\\n  {\\n    _setAddr(node, COIN_TYPE_ETH, _addressToBytes(addr_));\\n  }\\n\\n  function _setAddr(\\n    bytes32 node,\\n    uint coinType,\\n    bytes memory addr_\\n  )\\n    internal\\n  {\\n    emit AddressChanged(node, coinType, addr_);\\n\\n    if(coinType == COIN_TYPE_ETH) {\\n      emit AddrChanged(node, _bytesToAddress(addr_));\\n    }\\n\\n    resolverAddresses[node][coinType] = addr_;\\n  }\\n\\n  // internal functions (views)\\n\\n  function _addr(\\n    bytes32 node\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address result;\\n\\n    bytes memory addr_ = resolverAddresses[node][COIN_TYPE_ETH];\\n\\n    if (addr_.length > 0) {\\n      result = _bytesToAddress(addr_);\\n    }\\n\\n    return result;\\n  }\\n\\n  // private function (pure)\\n\\n  function _bytesToAddress(\\n    bytes memory data\\n  )\\n    private\\n    pure\\n    returns(address payable)\\n  {\\n    address payable result;\\n\\n    require(data.length == 20);\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 32)), exp(256, 12))\\n    }\\n\\n    return result;\\n  }\\n\\n  function _addressToBytes(\\n    address addr_\\n  )\\n    private\\n    pure\\n    returns(bytes memory)\\n  {\\n    bytes memory result = new bytes(20);\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      mstore(add(result, 32), mul(addr_, exp(256, 12)))\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xd2f0c5ed5f5058755512c0916496da6bcf4cf18a0026ee8d20b4306656ce5142\",\"license\":\"MIT\"},\"src/ens/resolvers/ENSNameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ENSAbstractResolver.sol\\\";\\n\\n\\n/**\\n * @title ENS abstract name resolver\\n *\\n * @dev Base on https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/profiles/NameResolver.sol\\n */\\nabstract contract ENSNameResolver is ENSAbstractResolver {\\n  bytes4 internal constant INTERFACE_NAME_ID = bytes4(keccak256(abi.encodePacked(\\\"name(bytes32)\\\")));\\n\\n  mapping(bytes32 => string) internal resolverNames;\\n\\n  // events\\n\\n  event NameChanged(\\n    bytes32 indexed node,\\n    string name\\n  );\\n\\n  // external functions\\n\\n  function setName(\\n    bytes32 node,\\n    string calldata name\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    resolverNames[node] = name;\\n\\n    emit NameChanged(node, name);\\n  }\\n\\n  // external functions (views)\\n\\n  function name(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return resolverNames[node];\\n  }\\n}\\n\",\"keccak256\":\"0x1d2d4b21f59225fbefe0e5aaff87aff8f11afe5281745934d595e15770557ead\",\"license\":\"MIT\"},\"src/ens/resolvers/ENSPubKeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ENSAbstractResolver.sol\\\";\\n\\n\\n/**\\n * @title ENS abstract pub key resolver\\n *\\n * @dev Base on https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/profiles/PubkeyResolver.sol\\n */\\nabstract contract ENSPubKeyResolver is ENSAbstractResolver {\\n  bytes4 internal constant INTERFACE_PUB_KEY_ID = bytes4(keccak256(abi.encodePacked(\\\"pubkey(bytes32)\\\")));\\n\\n  struct PubKey {\\n    bytes32 x;\\n    bytes32 y;\\n  }\\n\\n  mapping(bytes32 => PubKey) internal resolverPubKeys;\\n\\n  // events\\n\\n  event PubkeyChanged(\\n    bytes32 indexed node,\\n    bytes32 x,\\n    bytes32 y\\n  );\\n\\n  // external functions (views)\\n\\n  function setPubkey(\\n    bytes32 node,\\n    bytes32 x,\\n    bytes32 y\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    resolverPubKeys[node] = PubKey(x, y);\\n\\n    emit PubkeyChanged(node, x, y);\\n  }\\n\\n  // external functions (views)\\n\\n  function pubkey(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (bytes32 x, bytes32 y)\\n  {\\n    return (resolverPubKeys[node].x, resolverPubKeys[node].y);\\n  }\\n}\\n\",\"keccak256\":\"0x763a3403ded734b7fa9141c270a0aaaf4a3f1322ff4b197e51ed70adfbaf1fa1\",\"license\":\"MIT\"},\"src/ens/resolvers/ENSTextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./ENSAbstractResolver.sol\\\";\\n\\n\\n/**\\n * @title ENS abstract text resolver\\n *\\n * @dev Base on https://github.com/ensdomains/resolvers/blob/f7d62ab04bfe1692a4344f6f1d31ff81315a98c3/contracts/profiles/TextResolver.sol\\n */\\nabstract contract ENSTextResolver is ENSAbstractResolver {\\n  bytes4 internal constant INTERFACE_TEXT_ID = bytes4(keccak256(abi.encodePacked(\\\"text(bytes32,string)\\\")));\\n\\n  mapping(bytes32 => mapping(string => string)) internal resolverTexts;\\n\\n  // events\\n\\n  event TextChanged(\\n    bytes32 indexed node,\\n    string indexed indexedKey,\\n    string key\\n  );\\n\\n  // external functions (views)\\n\\n  function setText(\\n    bytes32 node,\\n    string calldata key,\\n    string calldata value\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    resolverTexts[node][key] = value;\\n\\n    emit TextChanged(node, key, key);\\n  }\\n\\n  // external functions (views)\\n\\n  function text(\\n    bytes32 node,\\n    string calldata key\\n  )\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    return resolverTexts[node][key];\\n  }\\n}\\n\",\"keccak256\":\"0x6d13447ff9aa753320b3a93ba0b8a2cbb43385711d51e00809cfb9201136cff7\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5032600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614991806100616000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80636df0cf42116100f9578063a91ee0dc11610097578063c8cc2aee11610071578063c8cc2aee14610512578063d0f710d61461052e578063d5fa2b001461055e578063f1cb7e061461057a576101c4565b8063a91ee0dc146104a7578063bd106a02146104c3578063c8690233146104e1576101c4565b80637b103999116100d35780637b103999146104355780637d0e0e7e146104535780638b95dd711461046f578063a526d83b1461048b576101c4565b80636df0cf42146103cd57806371404156146103fd5780637737221314610419576101c4565b8063392e53cd1161016657806355800f871161014057806355800f87146103355780635773fd1d1461035157806359d1d43c1461036d578063691f34311461039d576101c4565b8063392e53cd146102cb5780633b3b57de146102e957806346386f7314610319576101c4565b8063116191b6116101a2578063116191b6146102455780631b3cd1421461026357806329ae6a7e1461029357806329cd62ea146102af576101c4565b806301ffc9a7146101c95780630c68ba21146101f957806310f13a8c14610229575b600080fd5b6101e360048036038101906101de919061342e565b6105aa565b6040516101f0919061418f565b60405180910390f35b610213600480360381019061020e91906130e0565b610834565b604051610220919061418f565b60405180910390f35b610243600480360381019061023e9190613302565b610889565b005b61024d61096d565b60405161025a9190614130565b60405180910390f35b61027d60048036038101906102789190613132565b610993565b60405161028a9190614130565b60405180910390f35b6102ad60048036038101906102a89190613132565b6109c6565b005b6102c960048036038101906102c49190613197565b610beb565b005b6102d3610cb3565b6040516102e0919061418f565b60405180910390f35b61030360048036038101906102fe9190613132565b610d0b565b6040516103109190614130565b60405180910390f35b610333600480360381019061032e91906131e6565b610d1d565b005b61034f600480360381019061034a9190613132565b61101f565b005b61036b60048036038101906103669190613480565b6112e0565b005b610387600480360381019061038291906132aa565b611501565b60405161039491906143b6565b60405180910390f35b6103b760048036038101906103b29190613132565b6115d6565b6040516103c491906143b6565b60405180910390f35b6103e760048036038101906103e29190613527565b61168b565b6040516103f491906141aa565b60405180910390f35b610417600480360381019061041291906130e0565b6116b3565b005b610433600480360381019061042e91906132aa565b6118cb565b005b61043d611977565b60405161044a9190614377565b60405180910390f35b61046d60048036038101906104689190613132565b61199d565b005b610489600480360381019061048491906133c7565b611c69565b005b6104a560048036038101906104a091906130e0565b611cc3565b005b6104c160048036038101906104bc9190613457565b611d5a565b005b6104cb611f83565b6040516104d891906141aa565b60405180910390f35b6104fb60048036038101906104f69190613132565b611f89565b604051610509929190614233565b60405180910390f35b61052c60048036038101906105279190613132565b611fc3565b005b61054860048036038101906105439190613252565b6122d3565b604051610555919061418f565b60405180910390f35b6105786004803603810190610573919061315b565b61232c565b005b610594600480360381019061058f919061338b565b612384565b6040516105a19190614355565b60405180910390f35b60006040516020016105bb906140b2565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067d5750604051602001610626906140c7565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106e957506040516020016106929061411b565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061075557506040516020016106fe906140f1565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107c1575060405160200161076a90614106565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061082d57506040516020016107d6906140dc565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b846108938161244b565b6108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990614658565b60405180910390fd5b82826007600089815260200190815260200160002087876040516108f7929190614060565b90815260200160405180910390209190610912929190612db3565b508484604051610923929190614060565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550878760405161095d929190614392565b60405180910390a3505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006109d0612534565b90503073ffffffffffffffffffffffffffffffffffffffff166109f283612545565b73ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f906144b8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae0906143f8565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b8152600401610b469291906141c5565b600060405180830381600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b505050506009600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d38282604051610bdf9291906141c5565b60405180910390a15050565b82610bf58161244b565b610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90614658565b60405180910390fd5b604051806040016040528084815260200183815250600660008681526020019081526020016000206000820151816000015560208201518160010155905050837f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e468484604051610ca5929190614233565b60405180910390a250505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000610d1682612545565b9050919050565b6000610d27612534565b90506000610d3e610d3983888861262a565b612682565b9050610d8e8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ed565b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490614418565b60405180910390fd5b60008686604051602001610de2929190614034565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff16610e1a88612545565b73ffffffffffffffffffffffffffffffffffffffff1614610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6790614498565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610e9182612545565b73ffffffffffffffffffffffffffffffffffffffff1614610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90614438565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ef2c7f08888303060006040518663ffffffff1660e01b8152600401610f4b95949392919061425c565b600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610fda9291906141c5565b600060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b50505050611016818461275a565b50505050505050565b6000611029612534565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b815260040161108691906141aa565b60206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190613109565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a906144f8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b81526004016111b591906141aa565b60206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190613109565b73ffffffffffffffffffffffffffffffffffffffff161461125b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611252906143d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1661127c83612545565b73ffffffffffffffffffffffffffffffffffffffff16146112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c990614598565b60405180910390fd5b6112dc828261275a565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790614478565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990614538565b60405180910390fd5b86600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506114ad868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612772565b6114b6846127ca565b6114c183838361280e565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516114f0919061414b565b60405180910390a150505050505050565b6060600760008581526020019081526020016000208383604051611526929190614060565b90815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c85780601f1061159d576101008083540402835291602001916115c8565b820191906000526020600020905b8154815290600101906020018083116115ab57829003601f168201915b505050505090509392505050565b6060600560008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561167f5780601f106116545761010080835404028352916020019161167f565b820191906000526020600020905b81548152906001019060200180831161166257829003601f168201915b50505050509050919050565b60006116ac6116a783600001518460200151856040015161262a565b612682565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661173e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173590614518565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490614618565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182f906145b8565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b32826040516118c0929190614166565b60405180910390a150565b826118d58161244b565b611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b90614658565b60405180910390fd5b8282600560008781526020019081526020016000209190611936929190612db3565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051611969929190614392565b60405180910390a250505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006119a7612534565b9050600073ffffffffffffffffffffffffffffffffffffffff166119ca83612545565b73ffffffffffffffffffffffffffffffffffffffff1614611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790614578565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab990614558565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401611b3491906141aa565b60206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190613109565b73ffffffffffffffffffffffffffffffffffffffff1614611bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd1906145d8565b60405180910390fd5b806009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae368282604051611c5d9291906141c5565b60405180910390a15050565b82611c738161244b565b611cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca990614658565b60405180910390fd5b611cbd848484612870565b50505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590614518565b60405180910390fd5b611d5781612932565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddc90614518565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4c90614538565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edd90614678565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611f789190614130565b60405180910390a150565b60025481565b6000806006600084815260200190815260200160002060000154600660008581526020019081526020016000206001015491509150915091565b6000611fcd612534565b9050600073ffffffffffffffffffffffffffffffffffffffff16611ff083612545565b73ffffffffffffffffffffffffffffffffffffffff1614612046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203d90614578565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120de906143f8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b815260040161215991906141aa565b60206040518083038186803b15801561217157600080fd5b505afa158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190613109565b73ffffffffffffffffffffffffffffffffffffffff16146121ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f6906145d8565b60405180910390fd5b612209823061275a565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b81526004016122669291906141c5565b600060405180830381600087803b15801561228057600080fd5b505af1158015612294573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f200826040516122c791906141aa565b60405180910390a15050565b60006123238484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ed565b90509392505050565b816123368161244b565b612375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236c90614658565b60405180910390fd5b61237f838361275a565b505050565b60606004600084815260200190815260200160002060008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561243e5780601f106124135761010080835404028352916020019161243e565b820191906000526020600020905b81548152906001019060200180831161242157829003601f168201915b5050505050905092915050565b6000612455612534565b73ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016124c691906141aa565b60206040518083038186803b1580156124de57600080fd5b505afa1580156124f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125169190613109565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b60006125406028612ac1565b905090565b6000806060600460008581526020019081526020016000206000603c81526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126035780601f106125d857610100808354040283529160200191612603565b820191906000526020600020905b8154815290600101906020018083116125e657829003601f168201915b505050505090506000815111156126205761261d81612b56565b91505b8192505050919050565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed84848460405160200161266394939291906141ee565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f1901000000000000000000000000000000000000000000000000000000000000815250600254836040516020016126d093929190614079565b604051602081830303815290604052805190602001209050919050565b6000806127038385612b7e90919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b61276e82603c61276984612c39565b612870565b5050565b60008151141561278a5761278532612932565b6127c7565b60008151905060005b818110156127c4576127b78382815181106127aa57fe5b6020026020010151612932565b8080600101915050612793565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472848483308660405160200161284e969594939291906142af565b6040516020818303038152906040528051906020012060028190555050505050565b827f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af75283836040516128a2929190614698565b60405180910390a2603c8214156128f457827f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd26128de83612b56565b6040516128eb919061414b565b60405180910390a25b80600460008581526020019081526020016000206000848152602001908152602001600020908051906020019061292c929190612e33565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299990614458565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a25906145f8565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051612ab6929190614166565b60405180910390a150565b60008060009050612ad0612ca0565b15612b49576000836000369050039050612b4160003683906014850192612af993929190614764565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612d4d565b915050612b4d565b3390505b80915050919050565b6000806014835114612b6757600080fd5b600c6101000a602084015104905080915050919050565b60008060009050604183511415612c2f5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015612bbf57601b810190505b601b8160ff161480612bd45750601c8160ff16145b15612c2b5760018782858560405160008152602001604052604051612bfc9493929190614310565b6020604051602081039080840390855afa158015612c1e573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b606080601467ffffffffffffffff81118015612c5457600080fd5b506040519080825280601f01601f191660200182016040528015612c875781602001600182028036833780820191505090505b509050600c6101000a8302602082015280915050919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612d4657602c60003690501015612d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d38906144d8565b60405180910390fd5b600190505b8091505090565b6000806014835114612d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8b90614638565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612df457803560ff1916838001178555612e22565b82800160010185558215612e22579182015b82811115612e21578235825591602001919060010190612e06565b5b509050612e2f9190612eb3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e7457805160ff1916838001178555612ea2565b82800160010185558215612ea2579182015b82811115612ea1578251825591602001919060010190612e86565b5b509050612eaf9190612eb3565b5090565b5b80821115612ecc576000816000905550600101612eb4565b5090565b600081359050612edf81614911565b92915050565b600081519050612ef481614911565b92915050565b60008083601f840112612f0c57600080fd5b8235905067ffffffffffffffff811115612f2557600080fd5b602083019150836020820283011115612f3d57600080fd5b9250929050565b600081359050612f5381614928565b92915050565b600081359050612f688161493f565b92915050565b60008083601f840112612f8057600080fd5b8235905067ffffffffffffffff811115612f9957600080fd5b602083019150836001820283011115612fb157600080fd5b9250929050565b600082601f830112612fc957600080fd5b8135612fdc612fd7826146f5565b6146c8565b91508082526020830160208301858383011115612ff857600080fd5b6130038382846148b4565b50505092915050565b60008135905061301b81614956565b92915050565b60008083601f84011261303357600080fd5b8235905067ffffffffffffffff81111561304c57600080fd5b60208301915083600182028301111561306457600080fd5b9250929050565b60006060828403121561307d57600080fd5b61308760606146c8565b9050600061309784828501612ed0565b60008301525060206130ab84828501612f44565b60208301525060406130bf84828501612f44565b60408301525092915050565b6000813590506130da8161496d565b92915050565b6000602082840312156130f257600080fd5b600061310084828501612ed0565b91505092915050565b60006020828403121561311b57600080fd5b600061312984828501612ee5565b91505092915050565b60006020828403121561314457600080fd5b600061315284828501612f44565b91505092915050565b6000806040838503121561316e57600080fd5b600061317c85828601612f44565b925050602061318d85828601612ed0565b9150509250929050565b6000806000606084860312156131ac57600080fd5b60006131ba86828701612f44565b93505060206131cb86828701612f44565b92505060406131dc86828701612f44565b9150509250925092565b600080600080606085870312156131fc57600080fd5b600061320a87828801612f44565b945050602061321b87828801612f44565b935050604085013567ffffffffffffffff81111561323857600080fd5b61324487828801612f6e565b925092505092959194509250565b60008060006040848603121561326757600080fd5b600061327586828701612f44565b935050602084013567ffffffffffffffff81111561329257600080fd5b61329e86828701612f6e565b92509250509250925092565b6000806000604084860312156132bf57600080fd5b60006132cd86828701612f44565b935050602084013567ffffffffffffffff8111156132ea57600080fd5b6132f686828701613021565b92509250509250925092565b60008060008060006060868803121561331a57600080fd5b600061332888828901612f44565b955050602086013567ffffffffffffffff81111561334557600080fd5b61335188828901613021565b9450945050604086013567ffffffffffffffff81111561337057600080fd5b61337c88828901613021565b92509250509295509295909350565b6000806040838503121561339e57600080fd5b60006133ac85828601612f44565b92505060206133bd858286016130cb565b9150509250929050565b6000806000606084860312156133dc57600080fd5b60006133ea86828701612f44565b93505060206133fb868287016130cb565b925050604084013567ffffffffffffffff81111561341857600080fd5b61342486828701612fb8565b9150509250925092565b60006020828403121561344057600080fd5b600061344e84828501612f59565b91505092915050565b60006020828403121561346957600080fd5b60006134778482850161300c565b91505092915050565b600080600080600080600060c0888a03121561349b57600080fd5b60006134a98a828b0161300c565b975050602088013567ffffffffffffffff8111156134c657600080fd5b6134d28a828b01612efa565b965096505060406134e58a828b01612ed0565b94505060606134f68a828b01612f44565b93505060806135078a828b01612f44565b92505060a06135188a828b01612f44565b91505092959891949750929550565b60006060828403121561353957600080fd5b60006135478482850161306b565b91505092915050565b61355981614848565b82525050565b61356881614797565b82525050565b613577816147a9565b82525050565b613586816147b5565b82525050565b61359d613598826147b5565b6148f6565b82525050565b60006135ae82614721565b6135b88185614737565b93506135c88185602086016148c3565b6135d181614900565b840191505092915050565b6135e58161485a565b82525050565b6135f48161487e565b82525050565b60006136068385614748565b93506136138385846148b4565b61361c83614900565b840190509392505050565b60006136338385614759565b93506136408385846148b4565b82840190509392505050565b60006136578261472c565b6136618185614748565b93506136718185602086016148c3565b61367a81614900565b840191505092915050565b60006136908261472c565b61369a8185614759565b93506136aa8185602086016148c3565b80840191505092915050565b60006136c3601983614759565b91507f737570706f727473496e746572666163652862797465733429000000000000006000830152601982019050919050565b6000613703602483614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465207265736f60008301527f6c766572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613769602183614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006137cf602983614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000613835602283614748565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061389b602083614748565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b60006138db602f83614748565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000613941600d83614759565b91507f61646472286279746573333229000000000000000000000000000000000000006000830152600d82019050919050565b6000613981601b83614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b60006139c1602183614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a27602283614748565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a8d601483614759565b91507f7465787428627974657333322c737472696e67290000000000000000000000006000830152601482019050919050565b6000613acd600d83614759565b91507f6e616d65286279746573333229000000000000000000000000000000000000006000830152600d82019050919050565b6000613b0d602b83614748565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b6000613b73602683614748565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bd9602683614748565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c3f602583614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ca5600f83614759565b91507f7075626b657928627974657333322900000000000000000000000000000000006000830152600f82019050919050565b6000613ce5602283614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d4b602383614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c726561647920696e207360008301527f796e6300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613db1601f83614748565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613df1602583614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e57602083614748565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000613e97601b83614748565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000613ed7601d83614748565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000613f17603783614748565b91507f454e5341627374726163745265736f6c7665723a20726576657274656420627960008301527f206f6e6c794e6f64654f776e6572206d6f6469666965720000000000000000006020830152604082019050919050565b6000613f7d601283614759565b91507f6164647228627974657333322c75696e742900000000000000000000000000006000830152601282019050919050565b6000613fbd602383614748565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61401f8161481d565b82525050565b61402e8161483b565b82525050565b6000614040828561358c565b602082019150614050828461358c565b6020820191508190509392505050565b600061406d828486613627565b91508190509392505050565b60006140858286613685565b9150614091828561358c565b6020820191506140a1828461358c565b602082019150819050949350505050565b60006140bd826136b6565b9150819050919050565b60006140d282613934565b9150819050919050565b60006140e782613a80565b9150819050919050565b60006140fc82613ac0565b9150819050919050565b600061411182613c98565b9150819050919050565b600061412682613f70565b9150819050919050565b6000602082019050614145600083018461355f565b92915050565b60006020820190506141606000830184613550565b92915050565b600060408201905061417b6000830185613550565b614188602083018461355f565b9392505050565b60006020820190506141a4600083018461356e565b92915050565b60006020820190506141bf600083018461357d565b92915050565b60006040820190506141da600083018561357d565b6141e7602083018461355f565b9392505050565b6000608082019050614203600083018761357d565b614210602083018661355f565b61421d604083018561357d565b61422a606083018461357d565b95945050505050565b6000604082019050614248600083018561357d565b614255602083018461357d565b9392505050565b600060a082019050614271600083018861357d565b61427e602083018761357d565b61428b604083018661355f565b614298606083018561355f565b6142a560808301846135eb565b9695505050505050565b600060c0820190506142c4600083018961357d565b6142d1602083018861357d565b6142de604083018761357d565b6142eb6060830186614016565b6142f8608083018561355f565b61430560a083018461357d565b979650505050505050565b6000608082019050614325600083018761357d565b6143326020830186614025565b61433f604083018561357d565b61434c606083018461357d565b95945050505050565b6000602082019050818103600083015261436f81846135a3565b905092915050565b600060208201905061438c60008301846135dc565b92915050565b600060208201905081810360008301526143ad8184866135fa565b90509392505050565b600060208201905081810360008301526143d0818461364c565b905092915050565b600060208201905081810360008301526143f1816136f6565b9050919050565b600060208201905081810360008301526144118161375c565b9050919050565b60006020820190508181036000830152614431816137c2565b9050919050565b6000602082019050818103600083015261445181613828565b9050919050565b600060208201905081810360008301526144718161388e565b9050919050565b60006020820190508181036000830152614491816138ce565b9050919050565b600060208201905081810360008301526144b181613974565b9050919050565b600060208201905081810360008301526144d1816139b4565b9050919050565b600060208201905081810360008301526144f181613a1a565b9050919050565b6000602082019050818103600083015261451181613b00565b9050919050565b6000602082019050818103600083015261453181613b66565b9050919050565b6000602082019050818103600083015261455181613bcc565b9050919050565b6000602082019050818103600083015261457181613c32565b9050919050565b6000602082019050818103600083015261459181613cd8565b9050919050565b600060208201905081810360008301526145b181613d3e565b9050919050565b600060208201905081810360008301526145d181613da4565b9050919050565b600060208201905081810360008301526145f181613de4565b9050919050565b6000602082019050818103600083015261461181613e4a565b9050919050565b6000602082019050818103600083015261463181613e8a565b9050919050565b6000602082019050818103600083015261465181613eca565b9050919050565b6000602082019050818103600083015261467181613f0a565b9050919050565b6000602082019050818103600083015261469181613fb0565b9050919050565b60006040820190506146ad6000830185614016565b81810360208301526146bf81846135a3565b90509392505050565b6000604051905081810181811067ffffffffffffffff821117156146eb57600080fd5b8060405250919050565b600067ffffffffffffffff82111561470c57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561477457600080fd5b8386111561478157600080fd5b6001850283019150848603905094509492505050565b60006147a2826147fd565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006147f682614797565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061485382614890565b9050919050565b60006148658261486c565b9050919050565b6000614877826147fd565b9050919050565b600061488982614827565b9050919050565b600061489b826148a2565b9050919050565b60006148ad826147fd565b9050919050565b82818337600083830152505050565b60005b838110156148e15780820151818401526020810190506148c6565b838111156148f0576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61491a81614797565b811461492557600080fd5b50565b614931816147b5565b811461493c57600080fd5b50565b614948816147bf565b811461495357600080fd5b50565b61495f816147eb565b811461496a57600080fd5b50565b6149768161481d565b811461498157600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80636df0cf42116100f9578063a91ee0dc11610097578063c8cc2aee11610071578063c8cc2aee14610512578063d0f710d61461052e578063d5fa2b001461055e578063f1cb7e061461057a576101c4565b8063a91ee0dc146104a7578063bd106a02146104c3578063c8690233146104e1576101c4565b80637b103999116100d35780637b103999146104355780637d0e0e7e146104535780638b95dd711461046f578063a526d83b1461048b576101c4565b80636df0cf42146103cd57806371404156146103fd5780637737221314610419576101c4565b8063392e53cd1161016657806355800f871161014057806355800f87146103355780635773fd1d1461035157806359d1d43c1461036d578063691f34311461039d576101c4565b8063392e53cd146102cb5780633b3b57de146102e957806346386f7314610319576101c4565b8063116191b6116101a2578063116191b6146102455780631b3cd1421461026357806329ae6a7e1461029357806329cd62ea146102af576101c4565b806301ffc9a7146101c95780630c68ba21146101f957806310f13a8c14610229575b600080fd5b6101e360048036038101906101de919061342e565b6105aa565b6040516101f0919061418f565b60405180910390f35b610213600480360381019061020e91906130e0565b610834565b604051610220919061418f565b60405180910390f35b610243600480360381019061023e9190613302565b610889565b005b61024d61096d565b60405161025a9190614130565b60405180910390f35b61027d60048036038101906102789190613132565b610993565b60405161028a9190614130565b60405180910390f35b6102ad60048036038101906102a89190613132565b6109c6565b005b6102c960048036038101906102c49190613197565b610beb565b005b6102d3610cb3565b6040516102e0919061418f565b60405180910390f35b61030360048036038101906102fe9190613132565b610d0b565b6040516103109190614130565b60405180910390f35b610333600480360381019061032e91906131e6565b610d1d565b005b61034f600480360381019061034a9190613132565b61101f565b005b61036b60048036038101906103669190613480565b6112e0565b005b610387600480360381019061038291906132aa565b611501565b60405161039491906143b6565b60405180910390f35b6103b760048036038101906103b29190613132565b6115d6565b6040516103c491906143b6565b60405180910390f35b6103e760048036038101906103e29190613527565b61168b565b6040516103f491906141aa565b60405180910390f35b610417600480360381019061041291906130e0565b6116b3565b005b610433600480360381019061042e91906132aa565b6118cb565b005b61043d611977565b60405161044a9190614377565b60405180910390f35b61046d60048036038101906104689190613132565b61199d565b005b610489600480360381019061048491906133c7565b611c69565b005b6104a560048036038101906104a091906130e0565b611cc3565b005b6104c160048036038101906104bc9190613457565b611d5a565b005b6104cb611f83565b6040516104d891906141aa565b60405180910390f35b6104fb60048036038101906104f69190613132565b611f89565b604051610509929190614233565b60405180910390f35b61052c60048036038101906105279190613132565b611fc3565b005b61054860048036038101906105439190613252565b6122d3565b604051610555919061418f565b60405180910390f35b6105786004803603810190610573919061315b565b61232c565b005b610594600480360381019061058f919061338b565b612384565b6040516105a19190614355565b60405180910390f35b60006040516020016105bb906140b2565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067d5750604051602001610626906140c7565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106e957506040516020016106929061411b565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061075557506040516020016106fe906140f1565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107c1575060405160200161076a90614106565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061082d57506040516020016107d6906140dc565b604051602081830303815290604052805190602001207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b846108938161244b565b6108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c990614658565b60405180910390fd5b82826007600089815260200190815260200160002087876040516108f7929190614060565b90815260200160405180910390209190610912929190612db3565b508484604051610923929190614060565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a7550878760405161095d929190614392565b60405180910390a3505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006109d0612534565b90503073ffffffffffffffffffffffffffffffffffffffff166109f283612545565b73ffffffffffffffffffffffffffffffffffffffff1614610a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3f906144b8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae0906143f8565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b8152600401610b469291906141c5565b600060405180830381600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b505050506009600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d38282604051610bdf9291906141c5565b60405180910390a15050565b82610bf58161244b565b610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90614658565b60405180910390fd5b604051806040016040528084815260200183815250600660008681526020019081526020016000206000820151816000015560208201518160010155905050837f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e468484604051610ca5929190614233565b60405180910390a250505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000610d1682612545565b9050919050565b6000610d27612534565b90506000610d3e610d3983888861262a565b612682565b9050610d8e8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ed565b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490614418565b60405180910390fd5b60008686604051602001610de2929190614034565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff16610e1a88612545565b73ffffffffffffffffffffffffffffffffffffffff1614610e70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6790614498565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610e9182612545565b73ffffffffffffffffffffffffffffffffffffffff1614610ee7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ede90614438565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ef2c7f08888303060006040518663ffffffff1660e01b8152600401610f4b95949392919061425c565b600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610fda9291906141c5565b600060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b50505050611016818461275a565b50505050505050565b6000611029612534565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b815260040161108691906141aa565b60206040518083038186803b15801561109e57600080fd5b505afa1580156110b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d69190613109565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a906144f8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b81526004016111b591906141aa565b60206040518083038186803b1580156111cd57600080fd5b505afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190613109565b73ffffffffffffffffffffffffffffffffffffffff161461125b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611252906143d8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1661127c83612545565b73ffffffffffffffffffffffffffffffffffffffff16146112d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c990614598565b60405180910390fd5b6112dc828261275a565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790614478565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611422576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141990614538565b60405180910390fd5b86600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506114ad868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050612772565b6114b6846127ca565b6114c183838361280e565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516114f0919061414b565b60405180910390a150505050505050565b6060600760008581526020019081526020016000208383604051611526929190614060565b90815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c85780601f1061159d576101008083540402835291602001916115c8565b820191906000526020600020905b8154815290600101906020018083116115ab57829003601f168201915b505050505090509392505050565b6060600560008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561167f5780601f106116545761010080835404028352916020019161167f565b820191906000526020600020905b81548152906001019060200180831161166257829003601f168201915b50505050509050919050565b60006116ac6116a783600001518460200151856040015161262a565b612682565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661173e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173590614518565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614156117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490614618565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182f906145b8565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b32826040516118c0929190614166565b60405180910390a150565b826118d58161244b565b611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b90614658565b60405180910390fd5b8282600560008781526020019081526020016000209190611936929190612db3565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051611969929190614392565b60405180910390a250505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006119a7612534565b9050600073ffffffffffffffffffffffffffffffffffffffff166119ca83612545565b73ffffffffffffffffffffffffffffffffffffffff1614611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790614578565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab990614558565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401611b3491906141aa565b60206040518083038186803b158015611b4c57600080fd5b505afa158015611b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b849190613109565b73ffffffffffffffffffffffffffffffffffffffff1614611bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd1906145d8565b60405180910390fd5b806009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae368282604051611c5d9291906141c5565b60405180910390a15050565b82611c738161244b565b611cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca990614658565b60405180910390fd5b611cbd848484612870565b50505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590614518565b60405180910390fd5b611d5781612932565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddc90614518565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4c90614538565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edd90614678565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611f789190614130565b60405180910390a150565b60025481565b6000806006600084815260200190815260200160002060000154600660008581526020019081526020016000206001015491509150915091565b6000611fcd612534565b9050600073ffffffffffffffffffffffffffffffffffffffff16611ff083612545565b73ffffffffffffffffffffffffffffffffffffffff1614612046576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203d90614578565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120de906143f8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b815260040161215991906141aa565b60206040518083038186803b15801561217157600080fd5b505afa158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190613109565b73ffffffffffffffffffffffffffffffffffffffff16146121ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f6906145d8565b60405180910390fd5b612209823061275a565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b81526004016122669291906141c5565b600060405180830381600087803b15801561228057600080fd5b505af1158015612294573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f200826040516122c791906141aa565b60405180910390a15050565b60006123238484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ed565b90509392505050565b816123368161244b565b612375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236c90614658565b60405180910390fd5b61237f838361275a565b505050565b60606004600084815260200190815260200160002060008381526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561243e5780601f106124135761010080835404028352916020019161243e565b820191906000526020600020905b81548152906001019060200180831161242157829003601f168201915b5050505050905092915050565b6000612455612534565b73ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016124c691906141aa565b60206040518083038186803b1580156124de57600080fd5b505afa1580156124f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125169190613109565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b60006125406028612ac1565b905090565b6000806060600460008581526020019081526020016000206000603c81526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126035780601f106125d857610100808354040283529160200191612603565b820191906000526020600020905b8154815290600101906020018083116125e657829003601f168201915b505050505090506000815111156126205761261d81612b56565b91505b8192505050919050565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed84848460405160200161266394939291906141ee565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f1901000000000000000000000000000000000000000000000000000000000000815250600254836040516020016126d093929190614079565b604051602081830303815290604052805190602001209050919050565b6000806127038385612b7e90919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b61276e82603c61276984612c39565b612870565b5050565b60008151141561278a5761278532612932565b6127c7565b60008151905060005b818110156127c4576127b78382815181106127aa57fe5b6020026020010151612932565b8080600101915050612793565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac56472848483308660405160200161284e969594939291906142af565b6040516020818303038152906040528051906020012060028190555050505050565b827f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af75283836040516128a2929190614698565b60405180910390a2603c8214156128f457827f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd26128de83612b56565b6040516128eb919061414b565b60405180910390a25b80600460008581526020019081526020016000206000848152602001908152602001600020908051906020019061292c929190612e33565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299990614458565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a25906145f8565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051612ab6929190614166565b60405180910390a150565b60008060009050612ad0612ca0565b15612b49576000836000369050039050612b4160003683906014850192612af993929190614764565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612d4d565b915050612b4d565b3390505b80915050919050565b6000806014835114612b6757600080fd5b600c6101000a602084015104905080915050919050565b60008060009050604183511415612c2f5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015612bbf57601b810190505b601b8160ff161480612bd45750601c8160ff16145b15612c2b5760018782858560405160008152602001604052604051612bfc9493929190614310565b6020604051602081039080840390855afa158015612c1e573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b606080601467ffffffffffffffff81118015612c5457600080fd5b506040519080825280601f01601f191660200182016040528015612c875781602001600182028036833780820191505090505b509050600c6101000a8302602082015280915050919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612d4657602c60003690501015612d41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d38906144d8565b60405180910390fd5b600190505b8091505090565b6000806014835114612d94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8b90614638565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612df457803560ff1916838001178555612e22565b82800160010185558215612e22579182015b82811115612e21578235825591602001919060010190612e06565b5b509050612e2f9190612eb3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e7457805160ff1916838001178555612ea2565b82800160010185558215612ea2579182015b82811115612ea1578251825591602001919060010190612e86565b5b509050612eaf9190612eb3565b5090565b5b80821115612ecc576000816000905550600101612eb4565b5090565b600081359050612edf81614911565b92915050565b600081519050612ef481614911565b92915050565b60008083601f840112612f0c57600080fd5b8235905067ffffffffffffffff811115612f2557600080fd5b602083019150836020820283011115612f3d57600080fd5b9250929050565b600081359050612f5381614928565b92915050565b600081359050612f688161493f565b92915050565b60008083601f840112612f8057600080fd5b8235905067ffffffffffffffff811115612f9957600080fd5b602083019150836001820283011115612fb157600080fd5b9250929050565b600082601f830112612fc957600080fd5b8135612fdc612fd7826146f5565b6146c8565b91508082526020830160208301858383011115612ff857600080fd5b6130038382846148b4565b50505092915050565b60008135905061301b81614956565b92915050565b60008083601f84011261303357600080fd5b8235905067ffffffffffffffff81111561304c57600080fd5b60208301915083600182028301111561306457600080fd5b9250929050565b60006060828403121561307d57600080fd5b61308760606146c8565b9050600061309784828501612ed0565b60008301525060206130ab84828501612f44565b60208301525060406130bf84828501612f44565b60408301525092915050565b6000813590506130da8161496d565b92915050565b6000602082840312156130f257600080fd5b600061310084828501612ed0565b91505092915050565b60006020828403121561311b57600080fd5b600061312984828501612ee5565b91505092915050565b60006020828403121561314457600080fd5b600061315284828501612f44565b91505092915050565b6000806040838503121561316e57600080fd5b600061317c85828601612f44565b925050602061318d85828601612ed0565b9150509250929050565b6000806000606084860312156131ac57600080fd5b60006131ba86828701612f44565b93505060206131cb86828701612f44565b92505060406131dc86828701612f44565b9150509250925092565b600080600080606085870312156131fc57600080fd5b600061320a87828801612f44565b945050602061321b87828801612f44565b935050604085013567ffffffffffffffff81111561323857600080fd5b61324487828801612f6e565b925092505092959194509250565b60008060006040848603121561326757600080fd5b600061327586828701612f44565b935050602084013567ffffffffffffffff81111561329257600080fd5b61329e86828701612f6e565b92509250509250925092565b6000806000604084860312156132bf57600080fd5b60006132cd86828701612f44565b935050602084013567ffffffffffffffff8111156132ea57600080fd5b6132f686828701613021565b92509250509250925092565b60008060008060006060868803121561331a57600080fd5b600061332888828901612f44565b955050602086013567ffffffffffffffff81111561334557600080fd5b61335188828901613021565b9450945050604086013567ffffffffffffffff81111561337057600080fd5b61337c88828901613021565b92509250509295509295909350565b6000806040838503121561339e57600080fd5b60006133ac85828601612f44565b92505060206133bd858286016130cb565b9150509250929050565b6000806000606084860312156133dc57600080fd5b60006133ea86828701612f44565b93505060206133fb868287016130cb565b925050604084013567ffffffffffffffff81111561341857600080fd5b61342486828701612fb8565b9150509250925092565b60006020828403121561344057600080fd5b600061344e84828501612f59565b91505092915050565b60006020828403121561346957600080fd5b60006134778482850161300c565b91505092915050565b600080600080600080600060c0888a03121561349b57600080fd5b60006134a98a828b0161300c565b975050602088013567ffffffffffffffff8111156134c657600080fd5b6134d28a828b01612efa565b965096505060406134e58a828b01612ed0565b94505060606134f68a828b01612f44565b93505060806135078a828b01612f44565b92505060a06135188a828b01612f44565b91505092959891949750929550565b60006060828403121561353957600080fd5b60006135478482850161306b565b91505092915050565b61355981614848565b82525050565b61356881614797565b82525050565b613577816147a9565b82525050565b613586816147b5565b82525050565b61359d613598826147b5565b6148f6565b82525050565b60006135ae82614721565b6135b88185614737565b93506135c88185602086016148c3565b6135d181614900565b840191505092915050565b6135e58161485a565b82525050565b6135f48161487e565b82525050565b60006136068385614748565b93506136138385846148b4565b61361c83614900565b840190509392505050565b60006136338385614759565b93506136408385846148b4565b82840190509392505050565b60006136578261472c565b6136618185614748565b93506136718185602086016148c3565b61367a81614900565b840191505092915050565b60006136908261472c565b61369a8185614759565b93506136aa8185602086016148c3565b80840191505092915050565b60006136c3601983614759565b91507f737570706f727473496e746572666163652862797465733429000000000000006000830152601982019050919050565b6000613703602483614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465207265736f60008301527f6c766572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613769602183614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006137cf602983614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000613835602283614748565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061389b602083614748565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b60006138db602f83614748565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000613941600d83614759565b91507f61646472286279746573333229000000000000000000000000000000000000006000830152600d82019050919050565b6000613981601b83614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b60006139c1602183614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a27602283614748565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a8d601483614759565b91507f7465787428627974657333322c737472696e67290000000000000000000000006000830152601482019050919050565b6000613acd600d83614759565b91507f6e616d65286279746573333229000000000000000000000000000000000000006000830152600d82019050919050565b6000613b0d602b83614748565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b6000613b73602683614748565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bd9602683614748565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c3f602583614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ca5600f83614759565b91507f7075626b657928627974657333322900000000000000000000000000000000006000830152600f82019050919050565b6000613ce5602283614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d4b602383614748565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c726561647920696e207360008301527f796e6300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613db1601f83614748565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613df1602583614748565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613e57602083614748565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000613e97601b83614748565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000613ed7601d83614748565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000613f17603783614748565b91507f454e5341627374726163745265736f6c7665723a20726576657274656420627960008301527f206f6e6c794e6f64654f776e6572206d6f6469666965720000000000000000006020830152604082019050919050565b6000613f7d601283614759565b91507f6164647228627974657333322c75696e742900000000000000000000000000006000830152601282019050919050565b6000613fbd602383614748565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61401f8161481d565b82525050565b61402e8161483b565b82525050565b6000614040828561358c565b602082019150614050828461358c565b6020820191508190509392505050565b600061406d828486613627565b91508190509392505050565b60006140858286613685565b9150614091828561358c565b6020820191506140a1828461358c565b602082019150819050949350505050565b60006140bd826136b6565b9150819050919050565b60006140d282613934565b9150819050919050565b60006140e782613a80565b9150819050919050565b60006140fc82613ac0565b9150819050919050565b600061411182613c98565b9150819050919050565b600061412682613f70565b9150819050919050565b6000602082019050614145600083018461355f565b92915050565b60006020820190506141606000830184613550565b92915050565b600060408201905061417b6000830185613550565b614188602083018461355f565b9392505050565b60006020820190506141a4600083018461356e565b92915050565b60006020820190506141bf600083018461357d565b92915050565b60006040820190506141da600083018561357d565b6141e7602083018461355f565b9392505050565b6000608082019050614203600083018761357d565b614210602083018661355f565b61421d604083018561357d565b61422a606083018461357d565b95945050505050565b6000604082019050614248600083018561357d565b614255602083018461357d565b9392505050565b600060a082019050614271600083018861357d565b61427e602083018761357d565b61428b604083018661355f565b614298606083018561355f565b6142a560808301846135eb565b9695505050505050565b600060c0820190506142c4600083018961357d565b6142d1602083018861357d565b6142de604083018761357d565b6142eb6060830186614016565b6142f8608083018561355f565b61430560a083018461357d565b979650505050505050565b6000608082019050614325600083018761357d565b6143326020830186614025565b61433f604083018561357d565b61434c606083018461357d565b95945050505050565b6000602082019050818103600083015261436f81846135a3565b905092915050565b600060208201905061438c60008301846135dc565b92915050565b600060208201905081810360008301526143ad8184866135fa565b90509392505050565b600060208201905081810360008301526143d0818461364c565b905092915050565b600060208201905081810360008301526143f1816136f6565b9050919050565b600060208201905081810360008301526144118161375c565b9050919050565b60006020820190508181036000830152614431816137c2565b9050919050565b6000602082019050818103600083015261445181613828565b9050919050565b600060208201905081810360008301526144718161388e565b9050919050565b60006020820190508181036000830152614491816138ce565b9050919050565b600060208201905081810360008301526144b181613974565b9050919050565b600060208201905081810360008301526144d1816139b4565b9050919050565b600060208201905081810360008301526144f181613a1a565b9050919050565b6000602082019050818103600083015261451181613b00565b9050919050565b6000602082019050818103600083015261453181613b66565b9050919050565b6000602082019050818103600083015261455181613bcc565b9050919050565b6000602082019050818103600083015261457181613c32565b9050919050565b6000602082019050818103600083015261459181613cd8565b9050919050565b600060208201905081810360008301526145b181613d3e565b9050919050565b600060208201905081810360008301526145d181613da4565b9050919050565b600060208201905081810360008301526145f181613de4565b9050919050565b6000602082019050818103600083015261461181613e4a565b9050919050565b6000602082019050818103600083015261463181613e8a565b9050919050565b6000602082019050818103600083015261465181613eca565b9050919050565b6000602082019050818103600083015261467181613f0a565b9050919050565b6000602082019050818103600083015261469181613fb0565b9050919050565b60006040820190506146ad6000830185614016565b81810360208301526146bf81846135a3565b90509392505050565b6000604051905081810181811067ffffffffffffffff821117156146eb57600080fd5b8060405250919050565b600067ffffffffffffffff82111561470c57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561477457600080fd5b8386111561478157600080fd5b6001850283019150848603905094509492505050565b60006147a2826147fd565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006147f682614797565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061485382614890565b9050919050565b60006148658261486c565b9050919050565b6000614877826147fd565b9050919050565b600061488982614827565b9050919050565b600061489b826148a2565b9050919050565b60006148ad826147fd565b9050919050565b82818337600083830152505050565b60005b838110156148e15780820151818401526020810190506148c6565b838111156148f0576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61491a81614797565b811461492557600080fd5b50565b614931816147b5565b811461493c57600080fd5b50565b614948816147bf565b811461495357600080fd5b50565b61495f816147eb565b811461496a57600080fd5b50565b6149768161481d565b811461498157600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "details": "The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.",
    "events": {
      "NodeReleased(bytes32,address)": {
        "details": "Emitted when new node is released",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeSubmitted(bytes32,address)": {
        "details": "Emitted when new node is submitted",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeVerified(bytes32)": {
        "details": "Emitted when the existing owner is verified",
        "params": {
          "node": "node name hash"
        }
      },
      "RegistryChanged(address)": {
        "details": "Emitted when ENS registry address is changed",
        "params": {
          "registry": "registry address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "params": {
          "subNodeRegistration": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "params": {
          "gateway_": "gateway address",
          "registry_": "ENS registry address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        },
        "returns": {
          "_0": "true when guardian exists"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "params": {
          "guardianSignature": "guardian signature",
          "label": "label hash",
          "node": "node name hash"
        }
      },
      "releaseNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "removeGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "setRegistry(address)": {
        "params": {
          "registry_": "registry address"
        }
      },
      "submitNode(bytes32)": {
        "details": "Should be called from the current ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "syncAddr(bytes32)": {
        "params": {
          "node": "node name hash"
        }
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "params": {
          "messageHash": "message hash",
          "signature": "signature"
        },
        "returns": {
          "_0": "true on correct guardian signature"
        }
      },
      "verifyNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      }
    },
    "title": "ENS controller",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Adds a new guardian"
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "notice": "Hashes `SubNodeRegistration` typed data"
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "notice": "Initializes `ENSController` contract"
      },
      "isGuardian(address)": {
        "notice": "Check if guardian exists"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "notice": "Registers sub node"
      },
      "releaseNode(bytes32)": {
        "notice": "Releases node"
      },
      "removeGuardian(address)": {
        "notice": "Removes the existing guardian"
      },
      "setRegistry(address)": {
        "notice": "Sets registry"
      },
      "submitNode(bytes32)": {
        "notice": "Submits node"
      },
      "syncAddr(bytes32)": {
        "notice": "Sync address"
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "notice": "Verifies guardian signature"
      },
      "verifyNode(bytes32)": {
        "notice": "Verifies node"
      }
    },
    "notice": "ENS subnode registrar",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "guardians",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1849,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2277,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 5273,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "gateway",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3863,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "resolverAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"
      },
      {
        "astId": 4086,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "resolverNames",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 4153,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "resolverPubKeys",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(PubKey)4149_storage)"
      },
      {
        "astId": 4233,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "resolverTexts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 2387,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "registry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ENSRegistry)3577"
      },
      {
        "astId": 2391,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "nodeOwners",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ENSRegistry)3577": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(PubKey)4149_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSPubKeyResolver.PubKey)",
        "numberOfBytes": "32",
        "value": "t_struct(PubKey)4149_storage"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PubKey)4149_storage": {
        "encoding": "inplace",
        "label": "struct ENSPubKeyResolver.PubKey",
        "members": [
          {
            "astId": 4146,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4148,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}