{
  "address": "0x250A77c0A672a6F094D97BfdAf4b5Ced00F29A93",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "batch",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "succeeded",
          "type": "bool"
        }
      ],
      "name": "BatchDelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        }
      ],
      "name": "delegateBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        }
      ],
      "name": "delegateBatchWithGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "batches",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFailure",
          "type": "bool"
        }
      ],
      "name": "delegateBatches",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountNextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Gateway.DelegatedBatch",
          "name": "delegatedBatch",
          "type": "tuple"
        }
      ],
      "name": "hashDelegatedBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct Gateway.DelegatedBatchWithGasPrice",
          "name": "delegatedBatch",
          "type": "tuple"
        }
      ],
      "name": "hashDelegatedBatchWithGasPrice",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "externalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "personalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "sendBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "sendBatchFromAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb051d61a60296b451c8db1241673c2d1f32a1f9a7b04819b0cfa83222644fa4",
  "receipt": {
    "to": null,
    "from": "0x53fE9288897e254698175740aa359E19E26c10af",
    "contractAddress": "0x250A77c0A672a6F094D97BfdAf4b5Ced00F29A93",
    "transactionIndex": 9,
    "gasUsed": "2229818",
    "logsBloom": "0x
    "blockHash": "0x99a49566f9053c7d401bae6ed61ec2018f286624389b598c3decf9af5695f633",
    "transactionHash": "0xcb051d61a60296b451c8db1241673c2d1f32a1f9a7b04819b0cfa83222644fa4",
    "logs": [],
    "blockNumber": 9496744,
    "cumulativeGasUsed": "7183380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "353faa9b830e20b3c7149e0844dbf57e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"batch\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"succeeded\",\"type\":\"bool\"}],\"name\":\"BatchDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"}],\"name\":\"delegateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"}],\"name\":\"delegateBatchWithGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"batches\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFailure\",\"type\":\"bool\"}],\"name\":\"delegateBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Gateway.DelegatedBatch\",\"name\":\"delegatedBatch\",\"type\":\"tuple\"}],\"name\":\"hashDelegatedBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Gateway.DelegatedBatchWithGasPrice\",\"name\":\"delegatedBatch\",\"type\":\"tuple\"}],\"name\":\"hashDelegatedBatchWithGasPrice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"externalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"personalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"sendBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"sendBatchFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"events\":{\"BatchDelegated(address,bytes,bool)\":{\"details\":\"Emitted when the single batch is delegated\",\"params\":{\"batch\":\"batch\",\"sender\":\"sender address\",\"succeeded\":\"if succeeded\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"},\"delegateBatch(address,uint256,address[],bytes[],bytes)\":{\"details\":\"Use `hashDelegatedBatch` to create sender message payload. `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"nonce\":\"next account nonce\",\"senderSignature\":\"sender signature\",\"to\":\"array of batch recipients contracts\"}},\"delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)\":{\"details\":\"Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice) `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"nonce\":\"next account nonce\",\"senderSignature\":\"sender signature\",\"to\":\"array of batch recipients contracts\"}},\"delegateBatches(bytes[],bool)\":{\"details\":\"It will revert when all batches fail\",\"params\":{\"batches\":\"array of batches\",\"revertOnFailure\":\"reverts on any error\"}},\"getAccountNextNonce(address)\":{\"params\":{\"account\":\"account address\"},\"returns\":{\"_0\":\"next nonce\"}},\"hashDelegatedBatch((address,uint256,address[],bytes[]))\":{\"params\":{\"delegatedBatch\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"hashDelegatedBatchWithGasPrice((address,uint256,address[],bytes[],uint256))\":{\"params\":{\"delegatedBatch\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address,bytes32,bytes32,bytes32)\":{\"params\":{\"externalAccountRegistry_\":\"`ExternalAccountRegistry` contract address\",\"personalAccountRegistry_\":\"`PersonalAccountRegistry` contract address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"sendBatch(address[],bytes[])\":{\"details\":\"`GatewayRecipient` context api: `_getContextAccount` will return `msg.sender` `_getContextSender` will return `msg.sender`\",\"params\":{\"data\":\"array of batch data\",\"to\":\"array of batch recipients contracts\"}},\"sendBatchFromAccount(address,address[],bytes[])\":{\"details\":\"`GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return `msg.sender`\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"to\":\"array of batch recipients contracts\"}}},\"title\":\"Gateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegateBatch(address,uint256,address[],bytes[],bytes)\":{\"notice\":\"Delegates batch from the account\"},\"delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)\":{\"notice\":\"Delegates batch from the account (with gas price)\"},\"delegateBatches(bytes[],bool)\":{\"notice\":\"Delegates multiple batches\"},\"getAccountNextNonce(address)\":{\"notice\":\"Gets next account nonce\"},\"hashDelegatedBatch((address,uint256,address[],bytes[]))\":{\"notice\":\"Hashes `DelegatedBatch` typed data\"},\"hashDelegatedBatchWithGasPrice((address,uint256,address[],bytes[],uint256))\":{\"notice\":\"Hashes `DelegatedBatchWithGasPrice` typed data\"},\"initialize(address,address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initializes `Gateway` contract\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"sendBatch(address[],bytes[])\":{\"notice\":\"Sends batch\"},\"sendBatchFromAccount(address,address[],bytes[])\":{\"notice\":\"Sends batch from the account\"}},\"notice\":\"GSN replacement\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gateway/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @dev Contract module which provides an access control mechanism.\\n * It ensures there is only one controlling account of the smart contract\\n * and grants that account exclusive access to specific functions.\\n *\\n * The controller account will be the one that deploys the contract.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller account address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled: msg.sender is not the controller\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0xdf03a0b7ec644da9925c5c1b6c8a86bb1cc1b9c5018bb265a1a4c5044b877af3\",\"license\":\"MIT\"},\"src/common/account/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../access/Controlled.sol\\\";\\n\\n\\n/**\\n * @title Account\\n *\\n * @dev Simple account contract with only one method - `executeTransaction`\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Account is Controlled {\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public payable Controlled() {}\\n\\n  /**\\n   * @notice Allow receives\\n   */\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Executes transaction\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function executeTransaction(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    onlyController\\n    returns (bytes memory)\\n  {\\n    bytes memory result;\\n    bool succeeded;\\n\\n    // solhint-disable-next-line avoid-call-value, avoid-low-level-calls\\n    (succeeded, result) = payable(to).call{value: value}(data);\\n\\n    require(\\n      succeeded,\\n      \\\"Account: transaction reverted\\\"\\n    );\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x909db7d2cf48934aa83e254f5abaff41de08a2517c7ae2e018a5878c8ff8f965\",\"license\":\"MIT\"},\"src/common/account/AccountController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Account.sol\\\";\\n\\n\\n/**\\n * @title Account controller\\n *\\n * @dev Contract module which provides Account deployment mechanism\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract AccountController {\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Deploys account\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _deployAccount(\\n    bytes32 salt\\n  )\\n    internal\\n    returns (address)\\n  {\\n    return address(new Account{salt: salt}());\\n  }\\n\\n  /**\\n   * @notice Executes transaction from the account\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function _executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes memory data\\n  )\\n    internal\\n    returns (bytes memory)\\n  {\\n    require(\\n      to != address(0),\\n      \\\"AccountController: cannot send to 0x0\\\"\\n    );\\n\\n    require(\\n      to != address(this),\\n      \\\"AccountController: cannot send to controller\\\"\\n    );\\n\\n    require(\\n      to != account,\\n      \\\"AccountController: cannot send to self\\\"\\n    );\\n\\n    return Account(payable(account)).executeTransaction(\\n      to,\\n      value,\\n      data\\n    );\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Computes account CREATE2 address\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _computeAccountAddress(\\n    bytes32 salt\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    bytes memory creationCode = type(Account).creationCode;\\n\\n    bytes32 data = keccak256(\\n      abi.encodePacked(\\n        bytes1(0xff),\\n        address(this),\\n        salt,\\n        keccak256(creationCode)\\n      )\\n    );\\n\\n    return address(uint160(uint256(data)));\\n  }\\n}\\n\",\"keccak256\":\"0x5cf620a92b9c2ccf3749e8ed95c90ca85a87b0c6e1af31a6775470a620cf6727\",\"license\":\"MIT\"},\"src/common/libs/BlockLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Block library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BlockLib {\\n  struct BlockRelated {\\n    bool added;\\n    uint256 removedAtBlockNumber;\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at current block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtCurrentBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, block.number);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at any block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtAnyBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at specific block\\n   * @param self self struct\\n   * @param blockNumber block number to verify\\n   * @return true on correct self struct\\n   */\\n  function verifyAtBlock(\\n    BlockRelated memory self,\\n    uint256 blockNumber\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (self.added) {\\n      if (self.removedAtBlockNumber == 0) {\\n        result = true;\\n      } else if (blockNumber == 0) {\\n        result = true;\\n      } else {\\n        result = self.removedAtBlockNumber > blockNumber;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9205536bc211f86d1113118a44dddfa7a9b9772a918cf4b1575c982a05472587\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"SafeMathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMathLib: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"SafeMathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMathLib: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMathLib: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x6089f354ca754d9c5dd9e800ee5ed86717dbf8f9af470604e0be691ac57c0107\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x51799826023958716dc49e0e4fef4a912363d3434e03b044f556c40078469fc4\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title ERC20 token\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\\n */\\ncontract ERC20Token {\\n  using SafeMathLib for uint256;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) internal balances;\\n  mapping(address => mapping(address => uint256)) internal allowances;\\n\\n  // events\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _transfer(_getSender(), to, value);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    address sender = _getSender();\\n\\n    _transfer(from, to, value);\\n    _approve(from, sender, allowances[from][sender].sub(value));\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _approve(_getSender(), spender, value);\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return balances[owner];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  // internal functions\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      from != address(0),\\n      \\\"ERC20Token: cannot transfer from 0x0 address\\\"\\n    );\\n    require(\\n      to != address(0),\\n      \\\"ERC20Token: cannot transfer to 0x0 address\\\"\\n    );\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[to] = balances[to].add(value);\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot approve from 0x0 address\\\"\\n    );\\n    require(\\n      spender != address(0),\\n      \\\"ERC20Token: cannot approve to 0x0 address\\\"\\n    );\\n\\n    allowances[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _mint(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot mint to 0x0 address\\\"\\n    );\\n    require(\\n      value > 0,\\n      \\\"ERC20Token: cannot mint 0 value\\\"\\n    );\\n\\n    balances[owner] = balances[owner].add(value);\\n    totalSupply = totalSupply.add(value);\\n\\n    emit Transfer(address(0), owner, value);\\n  }\\n\\n  function _burn(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot burn from 0x0 address\\\"\\n    );\\n\\n    balances[owner] = balances[owner].sub(\\n      value,\\n      \\\"ERC20Token: burn value exceeds balance\\\"\\n    );\\n\\n    totalSupply = totalSupply.sub(value);\\n\\n    emit Transfer(owner, address(0), value);\\n  }\\n\\n  // internal functions (views)\\n\\n  function _getSender()\\n    virtual\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0x6f2b0bd08da549c6c1f5ceee85766832d587dde62c56bebc3a14bd9ea407e03d\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/external/ExternalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BlockLib.sol\\\";\\n\\n\\n/**\\n * @title External account registry\\n *\\n * @notice Global registry for keys and external (outside of the platform) contract based wallets\\n *\\n * @dev An account can call the registry to add (`addAccountOwner`) or remove (`removeAccountOwner`) its own owners.\\n * When the owner has been added, information about that fact will live in the registry forever.\\n * Removing an owner only affects the future blocks (until the owner is re-added).\\n *\\n * Given the fact, there is no way to sign the data using a contract based wallet,\\n * we created a registry to store signed by the key wallet proofs.\\n * ERC-1271 allows removing a signer after the signature was created. Thus store the signature for the later use\\n * doesn't guarantee the signer is still has access to that smart account.\\n * Because of that, the ERC1271's `isValidSignature()` cannot be used in e.g. `PaymentRegistry`.*\\n *\\n * An account can call the registry to add (`addAccountProof`) or remove (`removeAccountProof`) proof hash.\\n * When the proof has been added, information about that fact will live in the registry forever.\\n * Removing a proof only affects the future blocks (until the proof is re-added).\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ExternalAccountRegistry {\\n  using BlockLib for BlockLib.BlockRelated;\\n\\n  struct Account {\\n    mapping(address => BlockLib.BlockRelated) owners;\\n    mapping(bytes32 => BlockLib.BlockRelated) proofs;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the new proof is added\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofAdded(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing proof is removed\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofRemoved(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ExternalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].added = true;\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account owner\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Adds a new account proof\\n   * @param hash proof hash\\n   */\\n  function addAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      !accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof already exists\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].added = true;\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = 0;\\n\\n    emit AccountProofAdded(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account proof\\n   * @param hash proof hash\\n   */\\n  function removeAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = block.number;\\n\\n    emit AccountProofRemoved(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Verifies the owner of the account at current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at current block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProof(\\n    address account,\\n    bytes32 hash\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at specific block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @param blockNumber block number to verify\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProofAtBlock(\\n    address account,\\n    bytes32 hash,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtBlock(blockNumber);\\n  }\\n}\\n\",\"keccak256\":\"0x8067b1fae41b73949f8d871a835533cbdd94b9ca3faa93b91f595c37e632ccdb\",\"license\":\"MIT\"},\"src/gateway/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/libs/SignatureLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../external/ExternalAccountRegistry.sol\\\";\\nimport \\\"../personal/PersonalAccountRegistry.sol\\\";\\n\\n\\n/**\\n * @title Gateway\\n *\\n * @notice GSN replacement\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Gateway is Initializable, TypedDataContainer {\\n  using SafeMathLib for uint256;\\n  using SignatureLib for bytes32;\\n\\n  struct DelegatedBatch {\\n    address account;\\n    uint256 nonce;\\n    address[] to;\\n    bytes[] data;\\n  }\\n\\n  struct DelegatedBatchWithGasPrice {\\n    address account;\\n    uint256 nonce;\\n    address[] to;\\n    bytes[] data;\\n    uint256 gasPrice;\\n  }\\n\\n  bytes32 private constant DELEGATED_BATCH_TYPE_HASH = keccak256(\\n    \\\"DelegatedBatch(address account,uint256 nonce,address[] to,bytes[] data)\\\"\\n  );\\n\\n  bytes32 private constant DELEGATED_BATCH_TYPE_HASH_WITH_GAS_PRICE = keccak256(\\n    \\\"DelegatedBatchWithGasPrice(address account,uint256 nonce,address[] to,bytes[] data,uint256 gasPrice)\\\"\\n  );\\n\\n  ExternalAccountRegistry public externalAccountRegistry;\\n  PersonalAccountRegistry public personalAccountRegistry;\\n\\n  mapping(address => uint256) private accountNonce;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the single batch is delegated\\n   * @param sender sender address\\n   * @param batch batch\\n   * @param succeeded if succeeded\\n   */\\n  event BatchDelegated(\\n    address sender,\\n    bytes batch,\\n    bool succeeded\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `Gateway` contract\\n   * @param externalAccountRegistry_ `ExternalAccountRegistry` contract address\\n   * @param personalAccountRegistry_ `PersonalAccountRegistry` contract address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ExternalAccountRegistry externalAccountRegistry_,\\n    PersonalAccountRegistry personalAccountRegistry_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    externalAccountRegistry = externalAccountRegistry_;\\n    personalAccountRegistry = personalAccountRegistry_;\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  // public functions\\n\\n  /**\\n   * @notice Sends batch\\n   * @dev `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `msg.sender`\\n   * `_getContextSender` will return `msg.sender`\\n   *\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   */\\n  function sendBatch(\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    public\\n  {\\n    _sendBatch(\\n      msg.sender,\\n      msg.sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Sends batch from the account\\n   * @dev `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return `msg.sender`\\n   *\\n   * @param account account address\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   */\\n  function sendBatchFromAccount(\\n    address account,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    public\\n  {\\n    _sendBatch(\\n      account,\\n      msg.sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates batch from the account\\n   * @dev Use `hashDelegatedBatch` to create sender message payload.\\n   *\\n   * `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return recovered address from `senderSignature` arg\\n   *\\n   * @param account account address\\n   * @param nonce next account nonce\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   * @param senderSignature sender signature\\n   */\\n  function delegateBatch(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    bytes memory senderSignature\\n  )\\n    public\\n  {\\n    require(\\n      nonce > accountNonce[account],\\n      \\\"Gateway: nonce is lower than current account nonce\\\"\\n    );\\n\\n    address sender = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        nonce,\\n        to,\\n        data\\n      )\\n    ).recoverAddress(senderSignature);\\n\\n    accountNonce[account] = nonce;\\n\\n    _sendBatch(\\n      account,\\n      sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates batch from the account (with gas price)\\n   *\\n   * @dev Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice)\\n   *\\n   * `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return recovered address from `senderSignature` arg\\n   *\\n   * @param account account address\\n   * @param nonce next account nonce\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   * @param senderSignature sender signature\\n   */\\n  function delegateBatchWithGasPrice(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    bytes memory senderSignature\\n  )\\n    public\\n  {\\n    require(\\n      nonce > accountNonce[account],\\n      \\\"Gateway: nonce is lower than current account nonce\\\"\\n    );\\n\\n    address sender = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        nonce,\\n        to,\\n        data,\\n        tx.gasprice\\n      )\\n    ).recoverAddress(senderSignature);\\n\\n    accountNonce[account] = nonce;\\n\\n    _sendBatch(\\n      account,\\n      sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates multiple batches\\n   * @dev It will revert when all batches fail\\n   * @param batches array of batches\\n   * @param revertOnFailure reverts on any error\\n   */\\n  function delegateBatches(\\n    bytes[] memory batches,\\n    bool revertOnFailure\\n  )\\n    public\\n  {\\n    require(\\n      batches.length > 0,\\n      \\\"Gateway: cannot delegate empty batches\\\"\\n    );\\n\\n    bool anySucceeded;\\n\\n    for (uint256 i = 0; i < batches.length; i++) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool succeeded,) = address(this).call(batches[i]);\\n\\n      if (revertOnFailure) {\\n        require(\\n          succeeded,\\n          \\\"Gateway: batch reverted\\\"\\n        );\\n      } else if (succeeded && !anySucceeded) {\\n        anySucceeded = true;\\n      }\\n\\n      emit BatchDelegated(\\n        msg.sender,\\n        batches[i],\\n        succeeded\\n      );\\n    }\\n\\n    if (!anySucceeded) {\\n      revert(\\\"Gateway: all batches reverted\\\");\\n    }\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `DelegatedBatch` typed data\\n   * @param delegatedBatch struct\\n   * @return hash\\n   */\\n  function hashDelegatedBatch(\\n    DelegatedBatch memory delegatedBatch\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        delegatedBatch.account,\\n        delegatedBatch.nonce,\\n        delegatedBatch.to,\\n        delegatedBatch.data\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Hashes `DelegatedBatchWithGasPrice` typed data\\n   * @param delegatedBatch struct\\n   * @return hash\\n   */\\n  function hashDelegatedBatchWithGasPrice(\\n    DelegatedBatchWithGasPrice memory delegatedBatch\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        delegatedBatch.account,\\n        delegatedBatch.nonce,\\n        delegatedBatch.to,\\n        delegatedBatch.data,\\n        delegatedBatch.gasPrice\\n      )\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Gets next account nonce\\n   * @param account account address\\n   * @return next nonce\\n   */\\n  function getAccountNextNonce(\\n    address account\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return accountNonce[account].add(1);\\n  }\\n\\n  // private functions\\n\\n  function _sendBatch(\\n    address account,\\n    address sender,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"Gateway: cannot send from 0x0 account\\\"\\n    );\\n    require(\\n      to.length > 0,\\n      \\\"Gateway: cannot send empty batch\\\"\\n    );\\n    require(\\n      data.length == to.length,\\n      \\\"Gateway: invalid batch\\\"\\n    );\\n\\n    if (account != sender) {\\n      require(\\n        personalAccountRegistry.verifyAccountOwner(account, sender) ||\\n        externalAccountRegistry.verifyAccountOwner(account, sender),\\n        \\\"Gateway: sender is not the account owner\\\"\\n      );\\n    }\\n\\n    bool succeeded;\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      require(\\n        to[i] != address(0),\\n        \\\"Gateway: cannot send to 0x0\\\"\\n      );\\n\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (succeeded,) = to[i].call(abi.encodePacked(data[i], account, sender));\\n\\n      require(\\n        succeeded,\\n        \\\"Gateway: batch transaction reverted\\\"\\n      );\\n    }\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes32[] memory dataHashes = new bytes32[](data.length);\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      dataHashes[i] = keccak256(data[i]);\\n    }\\n\\n    return keccak256(abi.encode(\\n      DELEGATED_BATCH_TYPE_HASH,\\n      account,\\n      nonce,\\n      keccak256(abi.encodePacked(to)),\\n      keccak256(abi.encodePacked(dataHashes))\\n    ));\\n  }\\n\\n  function _hashTypedData(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    uint256 gasPrice\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes32[] memory dataHashes = new bytes32[](data.length);\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      dataHashes[i] = keccak256(data[i]);\\n    }\\n\\n    return keccak256(abi.encode(\\n        DELEGATED_BATCH_TYPE_HASH_WITH_GAS_PRICE,\\n        account,\\n        nonce,\\n        keccak256(abi.encodePacked(to)),\\n        keccak256(abi.encodePacked(dataHashes)),\\n        gasPrice\\n      ));\\n  }\\n}\\n\",\"keccak256\":\"0x0000adbac630682c064547bd42d05cfe1d0a14c22561bf72aa22d93099b6b824\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"},\"src/personal/PersonalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/account/AccountController.sol\\\";\\nimport \\\"../common/libs/BlockLib.sol\\\";\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/token/ERC20Token.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\n\\n\\n/**\\n * @title Personal account registry\\n *\\n * @notice A registry for personal (controlled by owners) accounts\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract PersonalAccountRegistry is AccountController, Initializable, GatewayRecipient {\\n  using BlockLib for BlockLib.BlockRelated;\\n  using SafeMathLib for uint256;\\n\\n  struct Account {\\n    bool deployed;\\n    bytes32 salt;\\n    mapping(address => BlockLib.BlockRelated) owners;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the account is deployed\\n   * @param account account address\\n   */\\n  event AccountDeployed(\\n    address account\\n  );\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the transaction is executed\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @param response response\\n   */\\n  event AccountTransactionExecuted(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes data,\\n    bytes response\\n  );\\n\\n  /**\\n   * @dev Emitted when the call is refunded\\n   * @param account account address\\n   * @param beneficiary beneficiary address\\n   * @param token token address\\n   * @param value value\\n   */\\n  event AccountCallRefunded(\\n    address account,\\n    address beneficiary,\\n    address token,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initialize `PersonalAccountRegistry` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function initialize(\\n    address gateway_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n  }\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    require(\\n      owner != address(0),\\n      \\\"PersonalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[account].owners[owner].added = true;\\n    accounts[account].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes the existing account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    address sender = _verifySender(account);\\n\\n    require(\\n      owner != sender,\\n      \\\"PersonalAccountRegistry: cannot remove self\\\"\\n    );\\n\\n    require(\\n      accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[account].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Executes account transaction\\n   * @dev Deploys an account if not deployed yet\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   */\\n  function executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    bytes memory response = _executeAccountTransaction(\\n      account,\\n      to,\\n      value,\\n      data\\n    );\\n\\n    emit AccountTransactionExecuted(\\n      account,\\n      to,\\n      value,\\n      data,\\n      response\\n    );\\n  }\\n\\n  /**\\n   * @notice Refunds account call\\n   * @dev Deploys an account if not deployed yet\\n   * @param account account address\\n   * @param token token address\\n   * @param value value\\n   */\\n  function refundAccountCall(\\n    address account,\\n    address token,\\n    uint256 value\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    /* solhint-disable avoid-tx-origin */\\n\\n    if (token == address(0)) {\\n      _executeAccountTransaction(\\n        account,\\n        tx.origin,\\n        value,\\n        new bytes(0)\\n      );\\n    } else {\\n      bytes memory response = _executeAccountTransaction(\\n        account,\\n        token,\\n        0,\\n        abi.encodeWithSelector(\\n          ERC20Token(token).transfer.selector,\\n          tx.origin,\\n          value\\n        )\\n      );\\n\\n      if (response.length > 0) {\\n        require(\\n          abi.decode(response, (bool)),\\n          \\\"PersonalAccountRegistry: ERC20Token transfer reverted\\\"\\n        );\\n      }\\n    }\\n\\n    emit AccountCallRefunded(\\n      account,\\n      tx.origin,\\n      token,\\n      value\\n    );\\n\\n    /* solhint-enable avoid-tx-origin */\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Computes account address\\n   * @param saltOwner salt owner address\\n   * @return account address\\n   */\\n  function computeAccountAddress(\\n    address saltOwner\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return _computeAccountAddress(saltOwner);\\n  }\\n\\n  /**\\n   * @notice Checks if account is deployed\\n   * @param account account address\\n   * @return true when account is deployed\\n   */\\n  function isAccountDeployed(\\n    address account\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].deployed;\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at the current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyAccountOwner(account, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at a specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (_verifyAccountOwner(account, owner)) {\\n      result = true;\\n    } else {\\n      result = accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions\\n\\n  function _verifySender(\\n    address account\\n  )\\n    private\\n    returns (address)\\n  {\\n    address sender = _getContextSender();\\n\\n    if (accounts[account].owners[sender].added) {\\n      require(\\n        accounts[account].owners[sender].removedAtBlockNumber == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n    } else {\\n      require(\\n        accounts[account].salt == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      bytes32 salt = keccak256(\\n        abi.encodePacked(sender)\\n      );\\n\\n      require(\\n        account == _computeAccountAddress(salt),\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      accounts[account].salt = salt;\\n      accounts[account].owners[sender].added = true;\\n\\n      emit AccountOwnerAdded(\\n        account,\\n        sender\\n      );\\n    }\\n\\n    return sender;\\n  }\\n\\n  function _deployAccount(\\n    address account\\n  )\\n    internal\\n  {\\n    if (!accounts[account].deployed) {\\n      _deployAccount(\\n        accounts[account].salt\\n      );\\n\\n      accounts[account].deployed = true;\\n\\n      emit AccountDeployed(\\n        account\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _computeAccountAddress(\\n    address saltOwner\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(saltOwner)\\n    );\\n\\n    return _computeAccountAddress(salt);\\n  }\\n\\n  function _verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (accounts[account].owners[owner].added) {\\n      result = accounts[account].owners[owner].removedAtBlockNumber == 0;\\n    } else if (accounts[account].salt == 0) {\\n      result = account == _computeAccountAddress(owner);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xaed20c7791184c2c635bed1ff9505ad5652c778bf02bd2e4ad17376542b6059e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061271d806100606000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806387d313131161008c578063b5021b1611610066578063b5021b16146101fc578063bd106a0214610218578063d2c83b9a14610236578063f92c5f7c14610254576100cf565b806387d31313146101a6578063984bd28f146101c45780639f255626146101e0576100cf565b8063231badaf146100d4578063392e53cd146100f05780635afaa7bb1461010e57806373e5a13f1461012a57806376db2b4c1461015a578063867519c61461018a575b600080fd5b6100ee60048036038101906100e99190611630565b610284565b005b6100f8610387565b6040516101059190612039565b60405180910390f35b6101286004803603810190610123919061175b565b6103dd565b005b610144600480360381019061013f9190611890565b6105b5565b6040516101519190612054565b60405180910390f35b610174600480360381019061016f919061184f565b6105e2565b6040516101819190612054565b60405180910390f35b6101a4600480360381019061019f91906115b1565b610614565b005b6101ae610625565b6040516101bb91906121e4565b60405180910390f35b6101de60048036038101906101d991906117d8565b61064b565b005b6101fa60048036038101906101f591906116ef565b6107e5565b005b61021660048036038101906102119190611630565b6107f5565b005b6102206108f9565b60405161022d9190612054565b60405180910390f35b61023e6108ff565b60405161024b91906121c9565b60405180910390f35b61026e60048036038101906102699190611588565b610925565b60405161027b919061237f565b60405180910390f35b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc9061225f565b60405180910390fd5b600061032d8261031f61031a89898989610981565b610ac2565b610b2d90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061037f86828686610be8565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000825111610421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104189061229f565b60405180910390fd5b600080600090505b835181101561056f5760003073ffffffffffffffffffffffffffffffffffffffff1685838151811061045757fe5b602002602001015160405161046c9190611f2e565b6000604051808303816000865af19150503d80600081146104a9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ae565b606091505b5050905083156104fd57806104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef9061223f565b60405180910390fd5b610513565b808015610508575082155b1561051257600192505b5b7f361c14722cc344132c73396113f7164232448b09c544a149f09048648b43d8723386848151811061054157fe5b60200260200101518360405161055993929190611fd2565b60405180910390a1508080600101915050610429565b50806105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a79061235f565b60405180910390fd5b505050565b60006105db6105d68360000151846020015185604001518660600151610981565b610ac2565b9050919050565b600061060d61060883600001518460200151856040015186606001518760800151611053565b610ac2565b9050919050565b61062083338484610be8565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d09061221f565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107a7838383611197565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107d69190611fb7565b60405180910390a15050505050565b6107f133338484610be8565b5050565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086d9061225f565b60405180910390fd5b600061089f8261089161088c898989893a611053565b610ac2565b610b2d90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f186828686610be8565b505050505050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061097a6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111f990919063ffffffff16565b9050919050565b60006060825167ffffffffffffffff8111801561099d57600080fd5b506040519080825280602002602001820160405280156109cc5781602001602082028036833780820191505090505b50905060005b8351811015610a1b578381815181106109e757fe5b602002602001015180519060200120828281518110610a0257fe5b60200260200101818152505080806001019150506109d2565b507f6848d0622081db2451400280dead7a739a080cb93852607c381af11e289769b2868686604051602001610a509190611f00565b6040516020818303038152906040528051906020012084604051602001610a779190611f17565b60405160208183030381529060405280519060200120604051602001610aa195949392919061206f565b60405160208183030381529060405280519060200120915050949350505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060015483604051602001610b1093929190611f7e565b604051602081830303815290604052805190602001209050919050565b60008060009050604183511415610bde5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015610b6e57601b810190505b601b8160ff161480610b835750601c8160ff16145b15610bda5760018782858560405160008152602001604052604051610bab9493929190612184565b6020604051602081039080840390855afa158015610bcd573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f9061227f565b60405180910390fd5b6000825111610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c939061233f565b60405180910390fd5b8151815114610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd7906122df565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610eb457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610d70929190612010565b60206040518083038186803b158015610d8857600080fd5b505afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc091906117af565b80610e745750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610e23929190612010565b60206040518083038186803b158015610e3b57600080fd5b505afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906117af565b5b610eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaa906122bf565b60405180910390fd5b5b600080600090505b825181101561104b57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610ee957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f906121ff565b60405180910390fd5b838181518110610f5457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610f7e57fe5b60200260200101518787604051602001610f9a93929190611f45565b604051602081830303815290604052604051610fb69190611f2e565b6000604051808303816000865af19150503d8060008114610ff3576040519150601f19603f3d011682016040523d82523d6000602084013e610ff8565b606091505b5050809250508161103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906122ff565b60405180910390fd5b8080600101915050610ebc565b505050505050565b60006060835167ffffffffffffffff8111801561106f57600080fd5b5060405190808252806020026020018201604052801561109e5781602001602082028036833780820191505090505b50905060005b84518110156110ed578481815181106110b957fe5b6020026020010151805190602001208282815181106110d457fe5b60200260200101818152505080806001019150506110a4565b507f6f4e1b2b1e5e49f4269e19e16e67a00cb0a796d96d30be3e4b540d3732e8bcad8787876040516020016111229190611f00565b60405160208183030381529060405280519060200120846040516020016111499190611f17565b6040516020818303038152906040528051906020012087604051602001611175969594939291906120c2565b6040516020818303038152906040528051906020012091505095945050505050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016111d796959493929190612123565b6040516020818303038152906040528051906020012060018190555050505050565b600080828401905083811015611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b9061231f565b60405180910390fd5b8091505092915050565b60008135905061125d81612686565b92915050565b600082601f83011261127457600080fd5b8135611287611282826123c7565b61239a565b915081818352602084019350602081019050838560208402820111156112ac57600080fd5b60005b838110156112dc57816112c2888261124e565b8452602084019350602083019250506001810190506112af565b5050505092915050565b600082601f8301126112f757600080fd5b813561130a611305826123ef565b61239a565b9150818183526020840193506020810190508360005b8381101561135057813586016113368882611399565b845260208401935060208301925050600181019050611320565b5050505092915050565b6000813590506113698161269d565b92915050565b60008151905061137e8161269d565b92915050565b600081359050611393816126b4565b92915050565b600082601f8301126113aa57600080fd5b81356113bd6113b882612417565b61239a565b915080825260208301602083018583830111156113d957600080fd5b6113e48382846125f8565b50505092915050565b6000813590506113fc816126cb565b92915050565b600081359050611411816126e2565b92915050565b600060a0828403121561142957600080fd5b61143360a061239a565b905060006114438482850161124e565b600083015250602061145784828501611573565b602083015250604082013567ffffffffffffffff81111561147757600080fd5b61148384828501611263565b604083015250606082013567ffffffffffffffff8111156114a357600080fd5b6114af848285016112e6565b60608301525060806114c384828501611573565b60808301525092915050565b6000608082840312156114e157600080fd5b6114eb608061239a565b905060006114fb8482850161124e565b600083015250602061150f84828501611573565b602083015250604082013567ffffffffffffffff81111561152f57600080fd5b61153b84828501611263565b604083015250606082013567ffffffffffffffff81111561155b57600080fd5b611567848285016112e6565b60608301525092915050565b600081359050611582816126f9565b92915050565b60006020828403121561159a57600080fd5b60006115a88482850161124e565b91505092915050565b6000806000606084860312156115c657600080fd5b60006115d48682870161124e565b935050602084013567ffffffffffffffff8111156115f157600080fd5b6115fd86828701611263565b925050604084013567ffffffffffffffff81111561161a57600080fd5b611626868287016112e6565b9150509250925092565b600080600080600060a0868803121561164857600080fd5b60006116568882890161124e565b955050602061166788828901611573565b945050604086013567ffffffffffffffff81111561168457600080fd5b61169088828901611263565b935050606086013567ffffffffffffffff8111156116ad57600080fd5b6116b9888289016112e6565b925050608086013567ffffffffffffffff8111156116d657600080fd5b6116e288828901611399565b9150509295509295909350565b6000806040838503121561170257600080fd5b600083013567ffffffffffffffff81111561171c57600080fd5b61172885828601611263565b925050602083013567ffffffffffffffff81111561174557600080fd5b611751858286016112e6565b9150509250929050565b6000806040838503121561176e57600080fd5b600083013567ffffffffffffffff81111561178857600080fd5b611794858286016112e6565b92505060206117a58582860161135a565b9150509250929050565b6000602082840312156117c157600080fd5b60006117cf8482850161136f565b91505092915050565b600080600080600060a086880312156117f057600080fd5b60006117fe888289016113ed565b955050602061180f88828901611402565b945050604061182088828901611384565b935050606061183188828901611384565b925050608061184288828901611384565b9150509295509295909350565b60006020828403121561186157600080fd5b600082013567ffffffffffffffff81111561187b57600080fd5b61188784828501611417565b91505092915050565b6000602082840312156118a257600080fd5b600082013567ffffffffffffffff8111156118bc57600080fd5b6118c8848285016114cf565b91505092915050565b60006118dd838361191f565b60208301905092915050565b60006118f58383611a1f565b60208301905092915050565b61190a8161257a565b82525050565b611919816124f7565b82525050565b611928816124f7565b82525050565b61193f61193a826124f7565b61263a565b82525050565b600061195082612463565b61195a81856124a9565b935061196583612443565b8060005b8381101561199657815161197d88826118d1565b97506119888361248f565b925050600181019050611969565b5085935050505092915050565b60006119ae8261246e565b6119b881856124b4565b93506119c383612453565b8060005b838110156119f45781516119db88826118e9565b97506119e68361249c565b9250506001810190506119c7565b5085935050505092915050565b611a0a81612509565b82525050565b611a1981612515565b82525050565b611a2881612515565b82525050565b611a3f611a3a82612515565b61264c565b82525050565b6000611a5082612479565b611a5a81856124bf565b9350611a6a818560208601612607565b611a7381612668565b840191505092915050565b6000611a8982612479565b611a9381856124d0565b9350611aa3818560208601612607565b80840191505092915050565b611ab88161258c565b82525050565b611ac7816125b0565b82525050565b6000611ad882612484565b611ae281856124ec565b9350611af2818560208601612607565b80840191505092915050565b6000611b0b601b836124db565b91507f476174657761793a2063616e6e6f742073656e6420746f2030783000000000006000830152602082019050919050565b6000611b4b602f836124db565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000611bb16017836124db565b91507f476174657761793a2062617463682072657665727465640000000000000000006000830152602082019050919050565b6000611bf16032836124db565b91507f476174657761793a206e6f6e6365206973206c6f776572207468616e2063757260008301527f72656e74206163636f756e74206e6f6e636500000000000000000000000000006020830152604082019050919050565b6000611c576025836124db565b91507f476174657761793a2063616e6e6f742073656e642066726f6d2030783020616360008301527f636f756e740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611cbd6026836124db565b91507f476174657761793a2063616e6e6f742064656c656761746520656d707479206260008301527f61746368657300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d236028836124db565b91507f476174657761793a2073656e646572206973206e6f7420746865206163636f7560008301527f6e74206f776e65720000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d896016836124db565b91507f476174657761793a20696e76616c6964206261746368000000000000000000006000830152602082019050919050565b6000611dc96023836124db565b91507f476174657761793a206261746368207472616e73616374696f6e20726576657260008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611e2f601e836124db565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000611e6f6020836124db565b91507f476174657761793a2063616e6e6f742073656e6420656d7074792062617463686000830152602082019050919050565b6000611eaf601d836124db565b91507f476174657761793a20616c6c20626174636865732072657665727465640000006000830152602082019050919050565b611eeb81612563565b82525050565b611efa8161256d565b82525050565b6000611f0c8284611945565b915081905092915050565b6000611f2382846119a3565b915081905092915050565b6000611f3a8284611a7e565b915081905092915050565b6000611f518286611a7e565b9150611f5d828561192e565b601482019150611f6d828461192e565b601482019150819050949350505050565b6000611f8a8286611acd565b9150611f968285611a2e565b602082019150611fa68284611a2e565b602082019150819050949350505050565b6000602082019050611fcc6000830184611901565b92915050565b6000606082019050611fe76000830186611901565b8181036020830152611ff98185611a45565b90506120086040830184611a01565b949350505050565b60006040820190506120256000830185611910565b6120326020830184611910565b9392505050565b600060208201905061204e6000830184611a01565b92915050565b60006020820190506120696000830184611a10565b92915050565b600060a0820190506120846000830188611a10565b6120916020830187611910565b61209e6040830186611ee2565b6120ab6060830185611a10565b6120b86080830184611a10565b9695505050505050565b600060c0820190506120d76000830189611a10565b6120e46020830188611910565b6120f16040830187611ee2565b6120fe6060830186611a10565b61210b6080830185611a10565b61211860a0830184611ee2565b979650505050505050565b600060c0820190506121386000830189611a10565b6121456020830188611a10565b6121526040830187611a10565b61215f6060830186611ee2565b61216c6080830185611910565b61217960a0830184611a10565b979650505050505050565b60006080820190506121996000830187611a10565b6121a66020830186611ef1565b6121b36040830185611a10565b6121c06060830184611a10565b95945050505050565b60006020820190506121de6000830184611aaf565b92915050565b60006020820190506121f96000830184611abe565b92915050565b6000602082019050818103600083015261221881611afe565b9050919050565b6000602082019050818103600083015261223881611b3e565b9050919050565b6000602082019050818103600083015261225881611ba4565b9050919050565b6000602082019050818103600083015261227881611be4565b9050919050565b6000602082019050818103600083015261229881611c4a565b9050919050565b600060208201905081810360008301526122b881611cb0565b9050919050565b600060208201905081810360008301526122d881611d16565b9050919050565b600060208201905081810360008301526122f881611d7c565b9050919050565b6000602082019050818103600083015261231881611dbc565b9050919050565b6000602082019050818103600083015261233881611e22565b9050919050565b6000602082019050818103600083015261235881611e62565b9050919050565b6000602082019050818103600083015261237881611ea2565b9050919050565b60006020820190506123946000830184611ee2565b92915050565b6000604051905081810181811067ffffffffffffffff821117156123bd57600080fd5b8060405250919050565b600067ffffffffffffffff8211156123de57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561240657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561242e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061250282612543565b9050919050565b60008115159050919050565b6000819050919050565b600061252a826124f7565b9050919050565b600061253c826124f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612585826125d4565b9050919050565b60006125978261259e565b9050919050565b60006125a982612543565b9050919050565b60006125bb826125c2565b9050919050565b60006125cd82612543565b9050919050565b60006125df826125e6565b9050919050565b60006125f182612543565b9050919050565b82818337600083830152505050565b60005b8381101561262557808201518184015260208101905061260a565b83811115612634576000848401525b50505050565b600061264582612656565b9050919050565b6000819050919050565b600061266182612679565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b61268f816124f7565b811461269a57600080fd5b50565b6126a681612509565b81146126b157600080fd5b50565b6126bd81612515565b81146126c857600080fd5b50565b6126d48161251f565b81146126df57600080fd5b50565b6126eb81612531565b81146126f657600080fd5b50565b61270281612563565b811461270d57600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806387d313131161008c578063b5021b1611610066578063b5021b16146101fc578063bd106a0214610218578063d2c83b9a14610236578063f92c5f7c14610254576100cf565b806387d31313146101a6578063984bd28f146101c45780639f255626146101e0576100cf565b8063231badaf146100d4578063392e53cd146100f05780635afaa7bb1461010e57806373e5a13f1461012a57806376db2b4c1461015a578063867519c61461018a575b600080fd5b6100ee60048036038101906100e99190611630565b610284565b005b6100f8610387565b6040516101059190612039565b60405180910390f35b6101286004803603810190610123919061175b565b6103dd565b005b610144600480360381019061013f9190611890565b6105b5565b6040516101519190612054565b60405180910390f35b610174600480360381019061016f919061184f565b6105e2565b6040516101819190612054565b60405180910390f35b6101a4600480360381019061019f91906115b1565b610614565b005b6101ae610625565b6040516101bb91906121e4565b60405180910390f35b6101de60048036038101906101d991906117d8565b61064b565b005b6101fa60048036038101906101f591906116ef565b6107e5565b005b61021660048036038101906102119190611630565b6107f5565b005b6102206108f9565b60405161022d9190612054565b60405180910390f35b61023e6108ff565b60405161024b91906121c9565b60405180910390f35b61026e60048036038101906102699190611588565b610925565b60405161027b919061237f565b60405180910390f35b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc9061225f565b60405180910390fd5b600061032d8261031f61031a89898989610981565b610ac2565b610b2d90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061037f86828686610be8565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6000825111610421576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104189061229f565b60405180910390fd5b600080600090505b835181101561056f5760003073ffffffffffffffffffffffffffffffffffffffff1685838151811061045757fe5b602002602001015160405161046c9190611f2e565b6000604051808303816000865af19150503d80600081146104a9576040519150601f19603f3d011682016040523d82523d6000602084013e6104ae565b606091505b5050905083156104fd57806104f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ef9061223f565b60405180910390fd5b610513565b808015610508575082155b1561051257600192505b5b7f361c14722cc344132c73396113f7164232448b09c544a149f09048648b43d8723386848151811061054157fe5b60200260200101518360405161055993929190611fd2565b60405180910390a1508080600101915050610429565b50806105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a79061235f565b60405180910390fd5b505050565b60006105db6105d68360000151846020015185604001518660600151610981565b610ac2565b9050919050565b600061060d61060883600001518460200151856040015186606001518760800151611053565b610ac2565b9050919050565b61062083338484610be8565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d09061221f565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506107a7838383611197565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107d69190611fb7565b60405180910390a15050505050565b6107f133338484610be8565b5050565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086d9061225f565b60405180910390fd5b600061089f8261089161088c898989893a611053565b610ac2565b610b2d90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f186828686610be8565b505050505050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061097a6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111f990919063ffffffff16565b9050919050565b60006060825167ffffffffffffffff8111801561099d57600080fd5b506040519080825280602002602001820160405280156109cc5781602001602082028036833780820191505090505b50905060005b8351811015610a1b578381815181106109e757fe5b602002602001015180519060200120828281518110610a0257fe5b60200260200101818152505080806001019150506109d2565b507f6848d0622081db2451400280dead7a739a080cb93852607c381af11e289769b2868686604051602001610a509190611f00565b6040516020818303038152906040528051906020012084604051602001610a779190611f17565b60405160208183030381529060405280519060200120604051602001610aa195949392919061206f565b60405160208183030381529060405280519060200120915050949350505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060015483604051602001610b1093929190611f7e565b604051602081830303815290604052805190602001209050919050565b60008060009050604183511415610bde5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015610b6e57601b810190505b601b8160ff161480610b835750601c8160ff16145b15610bda5760018782858560405160008152602001604052604051610bab9493929190612184565b6020604051602081039080840390855afa158015610bcd573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f9061227f565b60405180910390fd5b6000825111610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c939061233f565b60405180910390fd5b8151815114610ce0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd7906122df565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610eb457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610d70929190612010565b60206040518083038186803b158015610d8857600080fd5b505afa158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc091906117af565b80610e745750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610e23929190612010565b60206040518083038186803b158015610e3b57600080fd5b505afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7391906117af565b5b610eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaa906122bf565b60405180910390fd5b5b600080600090505b825181101561104b57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610ee957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f906121ff565b60405180910390fd5b838181518110610f5457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610f7e57fe5b60200260200101518787604051602001610f9a93929190611f45565b604051602081830303815290604052604051610fb69190611f2e565b6000604051808303816000865af19150503d8060008114610ff3576040519150601f19603f3d011682016040523d82523d6000602084013e610ff8565b606091505b5050809250508161103e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611035906122ff565b60405180910390fd5b8080600101915050610ebc565b505050505050565b60006060835167ffffffffffffffff8111801561106f57600080fd5b5060405190808252806020026020018201604052801561109e5781602001602082028036833780820191505090505b50905060005b84518110156110ed578481815181106110b957fe5b6020026020010151805190602001208282815181106110d457fe5b60200260200101818152505080806001019150506110a4565b507f6f4e1b2b1e5e49f4269e19e16e67a00cb0a796d96d30be3e4b540d3732e8bcad8787876040516020016111229190611f00565b60405160208183030381529060405280519060200120846040516020016111499190611f17565b6040516020818303038152906040528051906020012087604051602001611175969594939291906120c2565b6040516020818303038152906040528051906020012091505095945050505050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016111d796959493929190612123565b6040516020818303038152906040528051906020012060018190555050505050565b600080828401905083811015611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b9061231f565b60405180910390fd5b8091505092915050565b60008135905061125d81612686565b92915050565b600082601f83011261127457600080fd5b8135611287611282826123c7565b61239a565b915081818352602084019350602081019050838560208402820111156112ac57600080fd5b60005b838110156112dc57816112c2888261124e565b8452602084019350602083019250506001810190506112af565b5050505092915050565b600082601f8301126112f757600080fd5b813561130a611305826123ef565b61239a565b9150818183526020840193506020810190508360005b8381101561135057813586016113368882611399565b845260208401935060208301925050600181019050611320565b5050505092915050565b6000813590506113698161269d565b92915050565b60008151905061137e8161269d565b92915050565b600081359050611393816126b4565b92915050565b600082601f8301126113aa57600080fd5b81356113bd6113b882612417565b61239a565b915080825260208301602083018583830111156113d957600080fd5b6113e48382846125f8565b50505092915050565b6000813590506113fc816126cb565b92915050565b600081359050611411816126e2565b92915050565b600060a0828403121561142957600080fd5b61143360a061239a565b905060006114438482850161124e565b600083015250602061145784828501611573565b602083015250604082013567ffffffffffffffff81111561147757600080fd5b61148384828501611263565b604083015250606082013567ffffffffffffffff8111156114a357600080fd5b6114af848285016112e6565b60608301525060806114c384828501611573565b60808301525092915050565b6000608082840312156114e157600080fd5b6114eb608061239a565b905060006114fb8482850161124e565b600083015250602061150f84828501611573565b602083015250604082013567ffffffffffffffff81111561152f57600080fd5b61153b84828501611263565b604083015250606082013567ffffffffffffffff81111561155b57600080fd5b611567848285016112e6565b60608301525092915050565b600081359050611582816126f9565b92915050565b60006020828403121561159a57600080fd5b60006115a88482850161124e565b91505092915050565b6000806000606084860312156115c657600080fd5b60006115d48682870161124e565b935050602084013567ffffffffffffffff8111156115f157600080fd5b6115fd86828701611263565b925050604084013567ffffffffffffffff81111561161a57600080fd5b611626868287016112e6565b9150509250925092565b600080600080600060a0868803121561164857600080fd5b60006116568882890161124e565b955050602061166788828901611573565b945050604086013567ffffffffffffffff81111561168457600080fd5b61169088828901611263565b935050606086013567ffffffffffffffff8111156116ad57600080fd5b6116b9888289016112e6565b925050608086013567ffffffffffffffff8111156116d657600080fd5b6116e288828901611399565b9150509295509295909350565b6000806040838503121561170257600080fd5b600083013567ffffffffffffffff81111561171c57600080fd5b61172885828601611263565b925050602083013567ffffffffffffffff81111561174557600080fd5b611751858286016112e6565b9150509250929050565b6000806040838503121561176e57600080fd5b600083013567ffffffffffffffff81111561178857600080fd5b611794858286016112e6565b92505060206117a58582860161135a565b9150509250929050565b6000602082840312156117c157600080fd5b60006117cf8482850161136f565b91505092915050565b600080600080600060a086880312156117f057600080fd5b60006117fe888289016113ed565b955050602061180f88828901611402565b945050604061182088828901611384565b935050606061183188828901611384565b925050608061184288828901611384565b9150509295509295909350565b60006020828403121561186157600080fd5b600082013567ffffffffffffffff81111561187b57600080fd5b61188784828501611417565b91505092915050565b6000602082840312156118a257600080fd5b600082013567ffffffffffffffff8111156118bc57600080fd5b6118c8848285016114cf565b91505092915050565b60006118dd838361191f565b60208301905092915050565b60006118f58383611a1f565b60208301905092915050565b61190a8161257a565b82525050565b611919816124f7565b82525050565b611928816124f7565b82525050565b61193f61193a826124f7565b61263a565b82525050565b600061195082612463565b61195a81856124a9565b935061196583612443565b8060005b8381101561199657815161197d88826118d1565b97506119888361248f565b925050600181019050611969565b5085935050505092915050565b60006119ae8261246e565b6119b881856124b4565b93506119c383612453565b8060005b838110156119f45781516119db88826118e9565b97506119e68361249c565b9250506001810190506119c7565b5085935050505092915050565b611a0a81612509565b82525050565b611a1981612515565b82525050565b611a2881612515565b82525050565b611a3f611a3a82612515565b61264c565b82525050565b6000611a5082612479565b611a5a81856124bf565b9350611a6a818560208601612607565b611a7381612668565b840191505092915050565b6000611a8982612479565b611a9381856124d0565b9350611aa3818560208601612607565b80840191505092915050565b611ab88161258c565b82525050565b611ac7816125b0565b82525050565b6000611ad882612484565b611ae281856124ec565b9350611af2818560208601612607565b80840191505092915050565b6000611b0b601b836124db565b91507f476174657761793a2063616e6e6f742073656e6420746f2030783000000000006000830152602082019050919050565b6000611b4b602f836124db565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000611bb16017836124db565b91507f476174657761793a2062617463682072657665727465640000000000000000006000830152602082019050919050565b6000611bf16032836124db565b91507f476174657761793a206e6f6e6365206973206c6f776572207468616e2063757260008301527f72656e74206163636f756e74206e6f6e636500000000000000000000000000006020830152604082019050919050565b6000611c576025836124db565b91507f476174657761793a2063616e6e6f742073656e642066726f6d2030783020616360008301527f636f756e740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611cbd6026836124db565b91507f476174657761793a2063616e6e6f742064656c656761746520656d707479206260008301527f61746368657300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d236028836124db565b91507f476174657761793a2073656e646572206973206e6f7420746865206163636f7560008301527f6e74206f776e65720000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d896016836124db565b91507f476174657761793a20696e76616c6964206261746368000000000000000000006000830152602082019050919050565b6000611dc96023836124db565b91507f476174657761793a206261746368207472616e73616374696f6e20726576657260008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611e2f601e836124db565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000611e6f6020836124db565b91507f476174657761793a2063616e6e6f742073656e6420656d7074792062617463686000830152602082019050919050565b6000611eaf601d836124db565b91507f476174657761793a20616c6c20626174636865732072657665727465640000006000830152602082019050919050565b611eeb81612563565b82525050565b611efa8161256d565b82525050565b6000611f0c8284611945565b915081905092915050565b6000611f2382846119a3565b915081905092915050565b6000611f3a8284611a7e565b915081905092915050565b6000611f518286611a7e565b9150611f5d828561192e565b601482019150611f6d828461192e565b601482019150819050949350505050565b6000611f8a8286611acd565b9150611f968285611a2e565b602082019150611fa68284611a2e565b602082019150819050949350505050565b6000602082019050611fcc6000830184611901565b92915050565b6000606082019050611fe76000830186611901565b8181036020830152611ff98185611a45565b90506120086040830184611a01565b949350505050565b60006040820190506120256000830185611910565b6120326020830184611910565b9392505050565b600060208201905061204e6000830184611a01565b92915050565b60006020820190506120696000830184611a10565b92915050565b600060a0820190506120846000830188611a10565b6120916020830187611910565b61209e6040830186611ee2565b6120ab6060830185611a10565b6120b86080830184611a10565b9695505050505050565b600060c0820190506120d76000830189611a10565b6120e46020830188611910565b6120f16040830187611ee2565b6120fe6060830186611a10565b61210b6080830185611a10565b61211860a0830184611ee2565b979650505050505050565b600060c0820190506121386000830189611a10565b6121456020830188611a10565b6121526040830187611a10565b61215f6060830186611ee2565b61216c6080830185611910565b61217960a0830184611a10565b979650505050505050565b60006080820190506121996000830187611a10565b6121a66020830186611ef1565b6121b36040830185611a10565b6121c06060830184611a10565b95945050505050565b60006020820190506121de6000830184611aaf565b92915050565b60006020820190506121f96000830184611abe565b92915050565b6000602082019050818103600083015261221881611afe565b9050919050565b6000602082019050818103600083015261223881611b3e565b9050919050565b6000602082019050818103600083015261225881611ba4565b9050919050565b6000602082019050818103600083015261227881611be4565b9050919050565b6000602082019050818103600083015261229881611c4a565b9050919050565b600060208201905081810360008301526122b881611cb0565b9050919050565b600060208201905081810360008301526122d881611d16565b9050919050565b600060208201905081810360008301526122f881611d7c565b9050919050565b6000602082019050818103600083015261231881611dbc565b9050919050565b6000602082019050818103600083015261233881611e22565b9050919050565b6000602082019050818103600083015261235881611e62565b9050919050565b6000602082019050818103600083015261237881611ea2565b9050919050565b60006020820190506123946000830184611ee2565b92915050565b6000604051905081810181811067ffffffffffffffff821117156123bd57600080fd5b8060405250919050565b600067ffffffffffffffff8211156123de57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561240657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561242e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061250282612543565b9050919050565b60008115159050919050565b6000819050919050565b600061252a826124f7565b9050919050565b600061253c826124f7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612585826125d4565b9050919050565b60006125978261259e565b9050919050565b60006125a982612543565b9050919050565b60006125bb826125c2565b9050919050565b60006125cd82612543565b9050919050565b60006125df826125e6565b9050919050565b60006125f182612543565b9050919050565b82818337600083830152505050565b60005b8381101561262557808201518184015260208101905061260a565b83811115612634576000848401525b50505050565b600061264582612656565b9050919050565b6000819050919050565b600061266182612679565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b61268f816124f7565b811461269a57600080fd5b50565b6126a681612509565b81146126b157600080fd5b50565b6126bd81612515565b81146126c857600080fd5b50565b6126d48161251f565b81146126df57600080fd5b50565b6126eb81612531565b81146126f657600080fd5b50565b61270281612563565b811461270d57600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "events": {
      "BatchDelegated(address,bytes,bool)": {
        "details": "Emitted when the single batch is delegated",
        "params": {
          "batch": "batch",
          "sender": "sender address",
          "succeeded": "if succeeded"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      },
      "delegateBatch(address,uint256,address[],bytes[],bytes)": {
        "details": "Use `hashDelegatedBatch` to create sender message payload. `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "nonce": "next account nonce",
          "senderSignature": "sender signature",
          "to": "array of batch recipients contracts"
        }
      },
      "delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)": {
        "details": "Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice) `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "nonce": "next account nonce",
          "senderSignature": "sender signature",
          "to": "array of batch recipients contracts"
        }
      },
      "delegateBatches(bytes[],bool)": {
        "details": "It will revert when all batches fail",
        "params": {
          "batches": "array of batches",
          "revertOnFailure": "reverts on any error"
        }
      },
      "getAccountNextNonce(address)": {
        "params": {
          "account": "account address"
        },
        "returns": {
          "_0": "next nonce"
        }
      },
      "hashDelegatedBatch((address,uint256,address[],bytes[]))": {
        "params": {
          "delegatedBatch": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "hashDelegatedBatchWithGasPrice((address,uint256,address[],bytes[],uint256))": {
        "params": {
          "delegatedBatch": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address,bytes32,bytes32,bytes32)": {
        "params": {
          "externalAccountRegistry_": "`ExternalAccountRegistry` contract address",
          "personalAccountRegistry_": "`PersonalAccountRegistry` contract address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "sendBatch(address[],bytes[])": {
        "details": "`GatewayRecipient` context api: `_getContextAccount` will return `msg.sender` `_getContextSender` will return `msg.sender`",
        "params": {
          "data": "array of batch data",
          "to": "array of batch recipients contracts"
        }
      },
      "sendBatchFromAccount(address,address[],bytes[])": {
        "details": "`GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return `msg.sender`",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "to": "array of batch recipients contracts"
        }
      }
    },
    "title": "Gateway",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "delegateBatch(address,uint256,address[],bytes[],bytes)": {
        "notice": "Delegates batch from the account"
      },
      "delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)": {
        "notice": "Delegates batch from the account (with gas price)"
      },
      "delegateBatches(bytes[],bool)": {
        "notice": "Delegates multiple batches"
      },
      "getAccountNextNonce(address)": {
        "notice": "Gets next account nonce"
      },
      "hashDelegatedBatch((address,uint256,address[],bytes[]))": {
        "notice": "Hashes `DelegatedBatch` typed data"
      },
      "hashDelegatedBatchWithGasPrice((address,uint256,address[],bytes[],uint256))": {
        "notice": "Hashes `DelegatedBatchWithGasPrice` typed data"
      },
      "initialize(address,address,bytes32,bytes32,bytes32)": {
        "notice": "Initializes `Gateway` contract"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "sendBatch(address[],bytes[])": {
        "notice": "Sends batch"
      },
      "sendBatchFromAccount(address,address[],bytes[])": {
        "notice": "Sends batch from the account"
      }
    },
    "notice": "GSN replacement",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 824,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "initializer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1252,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2537,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "externalAccountRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ExternalAccountRegistry)2481"
      },
      {
        "astId": 2539,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "personalAccountRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PersonalAccountRegistry)5170"
      },
      {
        "astId": 2543,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "accountNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ExternalAccountRegistry)2481": {
        "encoding": "inplace",
        "label": "contract ExternalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(PersonalAccountRegistry)5170": {
        "encoding": "inplace",
        "label": "contract PersonalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}