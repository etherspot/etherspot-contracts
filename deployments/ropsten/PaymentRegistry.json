{
  "address": "0xf2AA8F3E5413C7a78ba73b3a4D51FCba0Ff5c995",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "DepositAccountDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositExitCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "DepositExitRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedUntil",
          "type": "uint256"
        }
      ],
      "name": "DepositExitRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAccount",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaymentChannelCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "channelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PaymentDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "channelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositValue",
          "type": "uint256"
        }
      ],
      "name": "PaymentSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "channelHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "PaymentWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "commitPaymentChannelAndDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositPaymentValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "commitPaymentChannelAndSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "commitPaymentChannelAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "computeDepositAccountAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "computePaymentChannelHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "deployDepositAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositExitLockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDepositExitLockedUntil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDepositWithdrawnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "getPaymentChannelCommittedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PaymentRegistry.DepositWithdrawal",
          "name": "depositWithdrawal",
          "type": "tuple"
        }
      ],
      "name": "hashDepositWithdrawal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PaymentRegistry.PaymentChannelCommit",
          "name": "paymentChannelCommit",
          "type": "tuple"
        }
      ],
      "name": "hashPaymentChannelCommit",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "externalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "personalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositExitLockPeriod_",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "guardians_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "isDepositAccountDeployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "processDepositExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "requestDepositExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGuardianSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e473f36c5ae0df612b44beeda98039a22210aa8a84add986aadcf1908d28ea2",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x53fE9288897e254698175740aa359E19E26c10af",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "4425422",
    "logsBloom": "0x
    "blockHash": "0xa5b7daf9d4beebb2c43dbe78eee221f07e0cd371177190dc4eec9041fc5e5125",
    "transactionHash": "0x7e473f36c5ae0df612b44beeda98039a22210aa8a84add986aadcf1908d28ea2",
    "logs": [],
    "blockNumber": 9496748,
    "cumulativeGasUsed": "4425422",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "353faa9b830e20b3c7149e0844dbf57e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DepositAccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositExitCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DepositExitRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"DepositExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentChannelCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositValue\",\"type\":\"uint256\"}],\"name\":\"PaymentSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"channelHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PaymentWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"commitPaymentChannelAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositPaymentValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"commitPaymentChannelAndSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"commitPaymentChannelAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"computeDepositAccountAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"computePaymentChannelHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deployDepositAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositExitLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDepositExitLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDepositWithdrawnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getPaymentChannelCommittedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentRegistry.DepositWithdrawal\",\"name\":\"depositWithdrawal\",\"type\":\"tuple\"}],\"name\":\"hashDepositWithdrawal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentRegistry.PaymentChannelCommit\",\"name\":\"paymentChannelCommit\",\"type\":\"tuple\"}],\"name\":\"hashPaymentChannelCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"externalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"personalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositExitLockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardians_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isDepositAccountDeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"processDepositExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"requestDepositExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGuardianSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"details\":\"the `DepositExit` process can be used in a case operator (guardian) couldn't sign commit / withdrawal message. Process will be rejected when any of senders channels will be committed.\",\"events\":{\"DepositAccountDeployed(address,address)\":{\"details\":\"Emitted when the deposit account is deployed\",\"params\":{\"depositAccount\":\"deposit account address\",\"owner\":\"owner address\"}},\"DepositExitCompleted(address,address,address,uint256)\":{\"details\":\"Emitted when the deposit exist is completed\",\"params\":{\"amount\":\"deposit exist amount\",\"depositAccount\":\"deposit account address\",\"owner\":\"owner address\",\"token\":\"token address\"}},\"DepositExitRejected(address,address,address)\":{\"details\":\"Emitted when the deposit exist is rejected\",\"params\":{\"depositAccount\":\"deposit account address\",\"owner\":\"owner address\",\"token\":\"token address\"}},\"DepositExitRequested(address,address,address,uint256)\":{\"details\":\"Emitted when the deposit exist is requested\",\"params\":{\"depositAccount\":\"deposit account address\",\"lockedUntil\":\"deposit exist locked util time\",\"owner\":\"owner address\",\"token\":\"token address\"}},\"DepositWithdrawn(address,address,address,uint256)\":{\"details\":\"Emitted when the deposit has been withdrawn\",\"params\":{\"amount\":\"withdrawn amount\",\"depositAccount\":\"deposit account address\",\"owner\":\"owner address\",\"token\":\"token address\"}},\"PaymentChannelCommitted(bytes32,address,address,address,bytes32,uint256)\":{\"details\":\"Emitted when the payment channel has been committed\",\"params\":{\"amount\":\"committed amount\",\"hash\":\"channel hash\",\"recipient\":\"recipient address\",\"sender\":\"sender address\",\"token\":\"token address\",\"uid\":\"unique channel id\"}},\"PaymentDeposited(bytes32,uint256)\":{\"details\":\"Emitted when the payment has been deposited\",\"params\":{\"channelHash\":\"channel hash\",\"value\":\"payment value\"}},\"PaymentSplit(bytes32,uint256,uint256)\":{\"details\":\"Emitted when the payment has been withdrawn and deposited (split)\",\"params\":{\"channelHash\":\"channel hash\",\"depositValue\":\"payment deposited value\",\"totalValue\":\"payment total value\"}},\"PaymentWithdrawn(bytes32,uint256)\":{\"details\":\"Emitted when the payment has been withdrawn\",\"params\":{\"channelHash\":\"channel hash\",\"value\":\"payment value\"}}},\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"amount to commit\",\"blockNumber\":\"block number\",\"guardianSignature\":\"guardian signature\",\"sender\":\"sender address\",\"senderSignature\":\"sender signature\",\"token\":\"token address\",\"uid\":\"unique channel id\"}},\"commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"amount to commit\",\"blockNumber\":\"block number\",\"depositPaymentValue\":\"amount to deposit\",\"guardianSignature\":\"guardian signature\",\"sender\":\"sender address\",\"senderSignature\":\"sender signature\",\"token\":\"token address\",\"uid\":\"unique channel id\"}},\"commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)\":{\"params\":{\"amount\":\"amount to commit\",\"blockNumber\":\"block number\",\"guardianSignature\":\"guardian signature\",\"sender\":\"sender address\",\"senderSignature\":\"sender signature\",\"token\":\"token address\",\"uid\":\"unique channel id\"}},\"computeDepositAccountAddress(address)\":{\"params\":{\"owner\":\"owner address\"},\"returns\":{\"_0\":\"deposit account address\"}},\"computePaymentChannelHash(address,address,address,bytes32)\":{\"params\":{\"recipient\":\"recipient address\",\"sender\":\"sender address\",\"token\":\"token address\",\"uid\":\"unique channel id\"},\"returns\":{\"_0\":\"hash\"}},\"constructor\":{\"details\":\"Public constructor\"},\"deployDepositAccount(address)\":{\"params\":{\"owner\":\"owner address\"}},\"getDepositExitLockedUntil(address,address)\":{\"params\":{\"owner\":\"owner address\",\"token\":\"token address\"},\"returns\":{\"_0\":\"locked until time\"}},\"getDepositWithdrawnAmount(address,address)\":{\"params\":{\"owner\":\"owner address\",\"token\":\"token address\"},\"returns\":{\"_0\":\"withdrawn amount\"}},\"getPaymentChannelCommittedAmount(bytes32)\":{\"params\":{\"hash\":\"payment channel hash\"},\"returns\":{\"_0\":\"committed amount\"}},\"hashDepositWithdrawal((address,address,uint256))\":{\"params\":{\"depositWithdrawal\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"hashPaymentChannelCommit((address,address,address,bytes32,uint256,uint256))\":{\"params\":{\"paymentChannelCommit\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address,uint256,address[],address,bytes32,bytes32,bytes32)\":{\"params\":{\"depositExitLockPeriod_\":\"deposit exit lock period\",\"externalAccountRegistry_\":\"`ExternalAccountRegistry` contract address\",\"gateway_\":\"`Gateway` contract address\",\"guardians_\":\"array of guardians addresses\",\"personalAccountRegistry_\":\"`PersonalAccountRegistry` contract address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isDepositAccountDeployed(address)\":{\"params\":{\"owner\":\"owner address\"},\"returns\":{\"_0\":\"true when deposit account is deployed\"}},\"isGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"},\"returns\":{\"_0\":\"true when guardian exists\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"processDepositExit(address)\":{\"params\":{\"token\":\"token address\"}},\"removeGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"requestDepositExit(address)\":{\"params\":{\"token\":\"token address\"}},\"verifyGuardianSignature(bytes32,bytes)\":{\"params\":{\"messageHash\":\"message hash\",\"signature\":\"signature\"},\"returns\":{\"_0\":\"true on correct guardian signature\"}},\"withdrawDeposit(address,uint256,bytes)\":{\"params\":{\"amount\":\"amount to withdraw\",\"guardianSignature\":\"guardian signature\",\"token\":\"token address\"}}},\"title\":\"Payment registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Adds a new guardian\"},\"commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)\":{\"notice\":\"Commits payment channel and deposit payment\"},\"commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)\":{\"notice\":\"Commits payment channel, withdraws and deposits (split) payment\"},\"commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)\":{\"notice\":\"Commits payment channel and withdraw payment\"},\"computeDepositAccountAddress(address)\":{\"notice\":\"Computes deposit account address\"},\"computePaymentChannelHash(address,address,address,bytes32)\":{\"notice\":\"Computes payment channel hash\"},\"deployDepositAccount(address)\":{\"notice\":\"Deploys deposit account\"},\"getDepositExitLockedUntil(address,address)\":{\"notice\":\"Gets deposit exit locked until time\"},\"getDepositWithdrawnAmount(address,address)\":{\"notice\":\"Gets deposit withdrawn amount\"},\"getPaymentChannelCommittedAmount(bytes32)\":{\"notice\":\"Gets payment channel committed amount\"},\"hashDepositWithdrawal((address,address,uint256))\":{\"notice\":\"Hashes `DepositWithdrawal` typed data\"},\"hashPaymentChannelCommit((address,address,address,bytes32,uint256,uint256))\":{\"notice\":\"Hashes `PaymentChannelCommit` typed data\"},\"initialize(address,address,uint256,address[],address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initialize `PaymentRegistry` contract\"},\"isDepositAccountDeployed(address)\":{\"notice\":\"Checks if deposit account is deployed\"},\"isGuardian(address)\":{\"notice\":\"Check if guardian exists\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"processDepositExit(address)\":{\"notice\":\"Processes deposit exit\"},\"removeGuardian(address)\":{\"notice\":\"Removes the existing guardian\"},\"requestDepositExit(address)\":{\"notice\":\"Requests deposit exit\"},\"verifyGuardianSignature(bytes32,bytes)\":{\"notice\":\"Verifies guardian signature\"},\"withdrawDeposit(address,uint256,bytes)\":{\"notice\":\"Withdraws deposit\"}},\"notice\":\"A registry for payment and payment channels\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/payment/PaymentRegistry.sol\":\"PaymentRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @dev Contract module which provides an access control mechanism.\\n * It ensures there is only one controlling account of the smart contract\\n * and grants that account exclusive access to specific functions.\\n *\\n * The controller account will be the one that deploys the contract.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller account address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled: msg.sender is not the controller\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0xdf03a0b7ec644da9925c5c1b6c8a86bb1cc1b9c5018bb265a1a4c5044b877af3\",\"license\":\"MIT\"},\"src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n *\\n * @dev Contract module which provides a guardian-type control mechanism.\\n * It allows key accounts to have guardians and restricts specific methods to be accessible by guardians only.\\n *\\n * Each guardian account can remove other guardians\\n *\\n * Use `_initializeGuarded` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when a new guardian is added\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianAdded(\\n    address sender,\\n    address guardian\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing guardian is removed\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianRemoved(\\n    address sender,\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not a guardian account\\n   */\\n  modifier onlyGuardian() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      guardians[tx.origin],\\n      \\\"Guarded: tx.origin is not the guardian\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new guardian\\n   * @param guardian guardian address\\n   */\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  /**\\n   * @notice Removes the existing guardian\\n   * @param guardian guardian address\\n   */\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin != guardian,\\n      \\\"Guarded: cannot remove self\\\"\\n    );\\n\\n    require(\\n      guardians[guardian],\\n      \\\"Guarded: guardian doesn't exist\\\"\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Check if guardian exists\\n   * @param guardian guardian address\\n   * @return true when guardian exists\\n   */\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  /**\\n   * @notice Verifies guardian signature\\n   * @param messageHash message hash\\n   * @param signature signature\\n   * @return true on correct guardian signature\\n   */\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `Guarded` contract\\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\\n   * @param guardians_ array of guardians addresses\\n   */\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _addGuardian(tx.origin);\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0),\\n      \\\"Guarded: cannot add 0x0 guardian\\\"\\n    );\\n\\n    require(\\n      !guardians[guardian],\\n      \\\"Guarded: guardian already exists\\\"\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x8f2e314e77e258f9ff75a55f031472ece62af57c60dbd718463d961282f7bd65\",\"license\":\"MIT\"},\"src/common/account/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../access/Controlled.sol\\\";\\n\\n\\n/**\\n * @title Account\\n *\\n * @dev Simple account contract with only one method - `executeTransaction`\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Account is Controlled {\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public payable Controlled() {}\\n\\n  /**\\n   * @notice Allow receives\\n   */\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Executes transaction\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function executeTransaction(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    onlyController\\n    returns (bytes memory)\\n  {\\n    bytes memory result;\\n    bool succeeded;\\n\\n    // solhint-disable-next-line avoid-call-value, avoid-low-level-calls\\n    (succeeded, result) = payable(to).call{value: value}(data);\\n\\n    require(\\n      succeeded,\\n      \\\"Account: transaction reverted\\\"\\n    );\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x909db7d2cf48934aa83e254f5abaff41de08a2517c7ae2e018a5878c8ff8f965\",\"license\":\"MIT\"},\"src/common/account/AccountController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Account.sol\\\";\\n\\n\\n/**\\n * @title Account controller\\n *\\n * @dev Contract module which provides Account deployment mechanism\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract AccountController {\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Deploys account\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _deployAccount(\\n    bytes32 salt\\n  )\\n    internal\\n    returns (address)\\n  {\\n    return address(new Account{salt: salt}());\\n  }\\n\\n  /**\\n   * @notice Executes transaction from the account\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function _executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes memory data\\n  )\\n    internal\\n    returns (bytes memory)\\n  {\\n    require(\\n      to != address(0),\\n      \\\"AccountController: cannot send to 0x0\\\"\\n    );\\n\\n    require(\\n      to != address(this),\\n      \\\"AccountController: cannot send to controller\\\"\\n    );\\n\\n    require(\\n      to != account,\\n      \\\"AccountController: cannot send to self\\\"\\n    );\\n\\n    return Account(payable(account)).executeTransaction(\\n      to,\\n      value,\\n      data\\n    );\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Computes account CREATE2 address\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _computeAccountAddress(\\n    bytes32 salt\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    bytes memory creationCode = type(Account).creationCode;\\n\\n    bytes32 data = keccak256(\\n      abi.encodePacked(\\n        bytes1(0xff),\\n        address(this),\\n        salt,\\n        keccak256(creationCode)\\n      )\\n    );\\n\\n    return address(uint160(uint256(data)));\\n  }\\n}\\n\",\"keccak256\":\"0x5cf620a92b9c2ccf3749e8ed95c90ca85a87b0c6e1af31a6775470a620cf6727\",\"license\":\"MIT\"},\"src/common/libs/BlockLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Block library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BlockLib {\\n  struct BlockRelated {\\n    bool added;\\n    uint256 removedAtBlockNumber;\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at current block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtCurrentBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, block.number);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at any block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtAnyBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at specific block\\n   * @param self self struct\\n   * @param blockNumber block number to verify\\n   * @return true on correct self struct\\n   */\\n  function verifyAtBlock(\\n    BlockRelated memory self,\\n    uint256 blockNumber\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (self.added) {\\n      if (self.removedAtBlockNumber == 0) {\\n        result = true;\\n      } else if (blockNumber == 0) {\\n        result = true;\\n      } else {\\n        result = self.removedAtBlockNumber > blockNumber;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9205536bc211f86d1113118a44dddfa7a9b9772a918cf4b1575c982a05472587\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"SafeMathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMathLib: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"SafeMathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMathLib: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMathLib: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x6089f354ca754d9c5dd9e800ee5ed86717dbf8f9af470604e0be691ac57c0107\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x51799826023958716dc49e0e4fef4a912363d3434e03b044f556c40078469fc4\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title ERC20 token\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\\n */\\ncontract ERC20Token {\\n  using SafeMathLib for uint256;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) internal balances;\\n  mapping(address => mapping(address => uint256)) internal allowances;\\n\\n  // events\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _transfer(_getSender(), to, value);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    address sender = _getSender();\\n\\n    _transfer(from, to, value);\\n    _approve(from, sender, allowances[from][sender].sub(value));\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _approve(_getSender(), spender, value);\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return balances[owner];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  // internal functions\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      from != address(0),\\n      \\\"ERC20Token: cannot transfer from 0x0 address\\\"\\n    );\\n    require(\\n      to != address(0),\\n      \\\"ERC20Token: cannot transfer to 0x0 address\\\"\\n    );\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[to] = balances[to].add(value);\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot approve from 0x0 address\\\"\\n    );\\n    require(\\n      spender != address(0),\\n      \\\"ERC20Token: cannot approve to 0x0 address\\\"\\n    );\\n\\n    allowances[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _mint(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot mint to 0x0 address\\\"\\n    );\\n    require(\\n      value > 0,\\n      \\\"ERC20Token: cannot mint 0 value\\\"\\n    );\\n\\n    balances[owner] = balances[owner].add(value);\\n    totalSupply = totalSupply.add(value);\\n\\n    emit Transfer(address(0), owner, value);\\n  }\\n\\n  function _burn(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot burn from 0x0 address\\\"\\n    );\\n\\n    balances[owner] = balances[owner].sub(\\n      value,\\n      \\\"ERC20Token: burn value exceeds balance\\\"\\n    );\\n\\n    totalSupply = totalSupply.sub(value);\\n\\n    emit Transfer(owner, address(0), value);\\n  }\\n\\n  // internal functions (views)\\n\\n  function _getSender()\\n    virtual\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0x6f2b0bd08da549c6c1f5ceee85766832d587dde62c56bebc3a14bd9ea407e03d\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/external/ExternalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BlockLib.sol\\\";\\n\\n\\n/**\\n * @title External account registry\\n *\\n * @notice Global registry for keys and external (outside of the platform) contract based wallets\\n *\\n * @dev An account can call the registry to add (`addAccountOwner`) or remove (`removeAccountOwner`) its own owners.\\n * When the owner has been added, information about that fact will live in the registry forever.\\n * Removing an owner only affects the future blocks (until the owner is re-added).\\n *\\n * Given the fact, there is no way to sign the data using a contract based wallet,\\n * we created a registry to store signed by the key wallet proofs.\\n * ERC-1271 allows removing a signer after the signature was created. Thus store the signature for the later use\\n * doesn't guarantee the signer is still has access to that smart account.\\n * Because of that, the ERC1271's `isValidSignature()` cannot be used in e.g. `PaymentRegistry`.*\\n *\\n * An account can call the registry to add (`addAccountProof`) or remove (`removeAccountProof`) proof hash.\\n * When the proof has been added, information about that fact will live in the registry forever.\\n * Removing a proof only affects the future blocks (until the proof is re-added).\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ExternalAccountRegistry {\\n  using BlockLib for BlockLib.BlockRelated;\\n\\n  struct Account {\\n    mapping(address => BlockLib.BlockRelated) owners;\\n    mapping(bytes32 => BlockLib.BlockRelated) proofs;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the new proof is added\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofAdded(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing proof is removed\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofRemoved(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ExternalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].added = true;\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account owner\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Adds a new account proof\\n   * @param hash proof hash\\n   */\\n  function addAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      !accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof already exists\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].added = true;\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = 0;\\n\\n    emit AccountProofAdded(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account proof\\n   * @param hash proof hash\\n   */\\n  function removeAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = block.number;\\n\\n    emit AccountProofRemoved(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Verifies the owner of the account at current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at current block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProof(\\n    address account,\\n    bytes32 hash\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at specific block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @param blockNumber block number to verify\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProofAtBlock(\\n    address account,\\n    bytes32 hash,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtBlock(blockNumber);\\n  }\\n}\\n\",\"keccak256\":\"0x8067b1fae41b73949f8d871a835533cbdd94b9ca3faa93b91f595c37e632ccdb\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"},\"src/payment/PaymentRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/account/AccountController.sol\\\";\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/libs/SignatureLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/token/ERC20Token.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../external/ExternalAccountRegistry.sol\\\";\\nimport \\\"../personal/PersonalAccountRegistry.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\n\\n\\n/**\\n * @title Payment registry\\n *\\n * @notice A registry for payment and payment channels\\n *\\n * @dev the `DepositExit` process can be used in a case operator (guardian) couldn't sign commit / withdrawal message.\\n * Process will be rejected when any of senders channels will be committed.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract PaymentRegistry is Guarded, AccountController, Initializable, TypedDataContainer, GatewayRecipient {\\n  using SafeMathLib for uint256;\\n  using SignatureLib for bytes32;\\n\\n  struct Deposit {\\n    address account;\\n    mapping(address => uint256) withdrawnAmount;\\n    mapping(address => uint256) exitLockedUntil;\\n  }\\n\\n  struct PaymentChannel {\\n    uint256 committedAmount;\\n  }\\n\\n  struct DepositWithdrawal {\\n    address owner;\\n    address token;\\n    uint256 amount;\\n  }\\n\\n  struct PaymentChannelCommit {\\n    address sender;\\n    address recipient;\\n    address token;\\n    bytes32 uid;\\n    uint256 blockNumber;\\n    uint256 amount;\\n  }\\n\\n  uint256 private constant DEFAULT_DEPOSIT_EXIT_LOCK_PERIOD = 28 days;\\n  bytes32 private constant DEPOSIT_WITHDRAWAL_TYPE_HASH = keccak256(\\n    \\\"DepositWithdrawal(address owner,address token,uint256 amount)\\\"\\n  );\\n  bytes32 private constant PAYMENT_CHANNEL_COMMIT_TYPE_HASH = keccak256(\\n    \\\"PaymentChannelCommit(address sender,address recipient,address token,bytes32 uid,uint256 blockNumber,uint256 amount)\\\"\\n  );\\n\\n  ExternalAccountRegistry public externalAccountRegistry;\\n  PersonalAccountRegistry public personalAccountRegistry;\\n\\n  uint256 public depositExitLockPeriod;\\n\\n  mapping(address => Deposit) private deposits;\\n  mapping(bytes32 => PaymentChannel) private paymentChannels;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the deposit account is deployed\\n   * @param depositAccount deposit account address\\n   * @param owner owner address\\n   */\\n  event DepositAccountDeployed(\\n    address depositAccount,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the deposit exist is requested\\n   * @param depositAccount deposit account address\\n   * @param owner owner address\\n   * @param token token address\\n   * @param lockedUntil deposit exist locked util time\\n   */\\n  event DepositExitRequested(\\n    address depositAccount,\\n    address owner,\\n    address token,\\n    uint256 lockedUntil\\n  );\\n\\n  /**\\n   * @dev Emitted when the deposit exist is completed\\n   * @param depositAccount deposit account address\\n   * @param owner owner address\\n   * @param token token address\\n   * @param amount deposit exist amount\\n   */\\n  event DepositExitCompleted(\\n    address depositAccount,\\n    address owner,\\n    address token,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when the deposit exist is rejected\\n   * @param depositAccount deposit account address\\n   * @param owner owner address\\n   * @param token token address\\n   */\\n  event DepositExitRejected(\\n    address depositAccount,\\n    address owner,\\n    address token\\n  );\\n\\n  /**\\n   * @dev Emitted when the deposit has been withdrawn\\n   * @param depositAccount deposit account address\\n   * @param owner owner address\\n   * @param token token address\\n   * @param amount withdrawn amount\\n   */\\n  event DepositWithdrawn(\\n    address depositAccount,\\n    address owner,\\n    address token,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when the payment channel has been committed\\n   * @param hash channel hash\\n   * @param sender sender address\\n   * @param recipient recipient address\\n   * @param token token address\\n   * @param uid unique channel id\\n   * @param amount committed amount\\n   */\\n  event PaymentChannelCommitted(\\n    bytes32 hash,\\n    address sender,\\n    address recipient,\\n    address token,\\n    bytes32 uid,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted when the payment has been withdrawn\\n   * @param channelHash channel hash\\n   * @param value payment value\\n   */\\n  event PaymentWithdrawn(\\n    bytes32 channelHash,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Emitted when the payment has been deposited\\n   * @param channelHash channel hash\\n   * @param value payment value\\n   */\\n  event PaymentDeposited(\\n    bytes32 channelHash,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Emitted when the payment has been withdrawn and deposited (split)\\n   * @param channelHash channel hash\\n   * @param totalValue payment total value\\n   * @param depositValue payment deposited value\\n   */\\n  event PaymentSplit(\\n    bytes32 channelHash,\\n    uint256 totalValue,\\n    uint256 depositValue\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initialize `PaymentRegistry` contract\\n   * @param externalAccountRegistry_ `ExternalAccountRegistry` contract address\\n   * @param personalAccountRegistry_ `PersonalAccountRegistry` contract address\\n   * @param depositExitLockPeriod_ deposit exit lock period\\n   * @param guardians_ array of guardians addresses\\n   * @param gateway_ `Gateway` contract address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ExternalAccountRegistry externalAccountRegistry_,\\n    PersonalAccountRegistry personalAccountRegistry_,\\n    uint256 depositExitLockPeriod_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    externalAccountRegistry = externalAccountRegistry_;\\n    personalAccountRegistry = personalAccountRegistry_;\\n\\n    if (depositExitLockPeriod_ == 0) {\\n      depositExitLockPeriod = DEFAULT_DEPOSIT_EXIT_LOCK_PERIOD;\\n    } else {\\n      depositExitLockPeriod = depositExitLockPeriod_;\\n    }\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  /**\\n   * @notice Deploys deposit account\\n   * @param owner owner address\\n   */\\n  function deployDepositAccount(\\n    address owner\\n  )\\n    external\\n  {\\n    _deployDepositAccount(owner);\\n  }\\n\\n  /**\\n   * @notice Requests deposit exit\\n   * @param token token address\\n   */\\n  function requestDepositExit(\\n    address token\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n    uint256 lockedUntil = deposits[owner].exitLockedUntil[token];\\n\\n    require(\\n      lockedUntil == 0,\\n      \\\"PaymentRegistry: deposit exit already requested\\\"\\n    );\\n\\n    _deployDepositAccount(owner);\\n\\n    // solhint-disable-next-line not-rely-on-time\\n    lockedUntil = now.add(depositExitLockPeriod);\\n\\n    deposits[owner].exitLockedUntil[token] = lockedUntil;\\n\\n    emit DepositExitRequested(\\n      deposits[owner].account,\\n      owner,\\n      token,\\n      lockedUntil\\n    );\\n  }\\n\\n  /**\\n   * @notice Processes deposit exit\\n   * @param token token address\\n   */\\n  function processDepositExit(\\n    address token\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n    uint256 lockedUntil = deposits[owner].exitLockedUntil[token];\\n\\n    require(\\n      lockedUntil != 0,\\n      \\\"PaymentRegistry: deposit exit not requested\\\"\\n    );\\n\\n    require(\\n      // solhint-disable-next-line not-rely-on-time\\n      lockedUntil <= now,\\n      \\\"PaymentRegistry: deposit exit locked\\\"\\n    );\\n\\n    deposits[owner].exitLockedUntil[token] = 0;\\n\\n    address depositAccount = deposits[owner].account;\\n    uint256 depositValue;\\n\\n    if (token == address(0)) {\\n      depositValue = depositAccount.balance;\\n    } else {\\n      depositValue = ERC20Token(token).balanceOf(depositAccount);\\n    }\\n\\n    _transferFromDeposit(\\n      depositAccount,\\n      owner,\\n      token,\\n      depositValue\\n    );\\n\\n    emit DepositExitCompleted(\\n      depositAccount,\\n      owner,\\n      token,\\n      depositValue\\n    );\\n  }\\n\\n  /**\\n   * @notice Withdraws deposit\\n   * @param token token address\\n   * @param amount amount to withdraw\\n   * @param guardianSignature guardian signature\\n   */\\n  function withdrawDeposit(\\n    address token,\\n    uint256 amount,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n    uint256 value = amount.sub(deposits[owner].withdrawnAmount[token]);\\n\\n    require(\\n      value > 0,\\n      \\\"PaymentRegistry: invalid amount\\\"\\n    );\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        owner,\\n        token,\\n        amount\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"PaymentRegistry: invalid guardian signature\\\"\\n    );\\n\\n    deposits[owner].withdrawnAmount[token] = amount;\\n\\n    _verifyDepositExitOrDeployAccount(owner, token);\\n\\n    _transferFromDeposit(\\n      deposits[owner].account,\\n      owner,\\n      token,\\n      value\\n    );\\n\\n    emit DepositWithdrawn(\\n      deposits[owner].account,\\n      owner,\\n      token,\\n      amount\\n    );\\n  }\\n\\n  /**\\n   * @notice Commits payment channel and withdraw payment\\n   * @param sender sender address\\n   * @param token token address\\n   * @param uid unique channel id\\n   * @param blockNumber block number\\n   * @param amount amount to commit\\n   * @param senderSignature sender signature\\n   * @param guardianSignature guardian signature\\n   */\\n  function commitPaymentChannelAndWithdraw(\\n    address sender,\\n    address token,\\n    bytes32 uid,\\n    uint256 blockNumber,\\n    uint256 amount,\\n    bytes calldata senderSignature,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address recipient = _getContextAccount();\\n\\n    (bytes32 hash, address depositAccount, uint256 paymentValue) = _commitPaymentChannel(\\n      sender,\\n      recipient,\\n      token,\\n      uid,\\n      blockNumber,\\n      amount,\\n      senderSignature,\\n      guardianSignature\\n    );\\n\\n    _transferFromDeposit(\\n      depositAccount,\\n      recipient,\\n      token,\\n      paymentValue\\n    );\\n\\n    emit PaymentWithdrawn(hash, paymentValue);\\n  }\\n\\n  /**\\n   * @notice Commits payment channel and deposit payment\\n   * @param sender sender address\\n   * @param token token address\\n   * @param uid unique channel id\\n   * @param blockNumber block number\\n   * @param amount amount to commit\\n   * @param senderSignature sender signature\\n   * @param guardianSignature guardian signature\\n   */\\n  function commitPaymentChannelAndDeposit(\\n    address sender,\\n    address token,\\n    bytes32 uid,\\n    uint256 blockNumber,\\n    uint256 amount,\\n    bytes calldata senderSignature,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address recipient = _getContextAccount();\\n\\n    (bytes32 hash, address depositAccount, uint256 paymentValue) = _commitPaymentChannel(\\n      sender,\\n      recipient,\\n      token,\\n      uid,\\n      blockNumber,\\n      amount,\\n      senderSignature,\\n      guardianSignature\\n    );\\n\\n    _transferFromDeposit(\\n      depositAccount,\\n      _computeDepositAccountAddress(recipient),\\n      token,\\n      paymentValue\\n    );\\n\\n    emit PaymentDeposited(hash, paymentValue);\\n  }\\n\\n  /**\\n   * @notice Commits payment channel, withdraws and deposits (split) payment\\n   * @param sender sender address\\n   * @param token token address\\n   * @param uid unique channel id\\n   * @param blockNumber block number\\n   * @param amount amount to commit\\n   * @param depositPaymentValue amount to deposit\\n   * @param senderSignature sender signature\\n   * @param guardianSignature guardian signature\\n   */\\n  function commitPaymentChannelAndSplit(\\n    address sender,\\n    address token,\\n    bytes32 uid,\\n    uint256 blockNumber,\\n    uint256 amount,\\n    uint256 depositPaymentValue,\\n    bytes calldata senderSignature,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address recipient = _getContextAccount();\\n\\n    (bytes32 hash, address depositAccount, uint256 paymentValue) = _commitPaymentChannel(\\n      sender,\\n      recipient,\\n      token,\\n      uid,\\n      blockNumber,\\n      amount,\\n      senderSignature,\\n      guardianSignature\\n    );\\n\\n    _transferSplitFromDeposit(\\n      depositAccount,\\n      recipient,\\n      token,\\n      paymentValue,\\n      depositPaymentValue\\n    );\\n\\n    emit PaymentSplit(hash, paymentValue, depositPaymentValue);\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Computes deposit account address\\n   * @param owner owner address\\n   * @return deposit account address\\n   */\\n  function computeDepositAccountAddress(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return _computeDepositAccountAddress(owner);\\n  }\\n\\n  /**\\n   * @notice Checks if deposit account is deployed\\n   * @param owner owner address\\n   * @return true when deposit account is deployed\\n   */\\n  function isDepositAccountDeployed(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return deposits[owner].account != address(0);\\n  }\\n\\n  /**\\n   * @notice Gets deposit exit locked until time\\n   * @param owner owner address\\n   * @param token token address\\n   * @return locked until time\\n   */\\n  function getDepositExitLockedUntil(\\n    address owner,\\n    address token\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return deposits[owner].exitLockedUntil[token];\\n  }\\n\\n  /**\\n   * @notice Gets deposit withdrawn amount\\n   * @param owner owner address\\n   * @param token token address\\n   * @return withdrawn amount\\n   */\\n  function getDepositWithdrawnAmount(\\n    address owner,\\n    address token\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return deposits[owner].withdrawnAmount[token];\\n  }\\n\\n  /**\\n   * @notice Gets payment channel committed amount\\n   * @param hash payment channel hash\\n   * @return committed amount\\n   */\\n  function getPaymentChannelCommittedAmount(\\n    bytes32 hash\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return paymentChannels[hash].committedAmount;\\n  }\\n\\n  // external functions (pure)\\n\\n  /**\\n   * @notice Computes payment channel hash\\n   * @param sender sender address\\n   * @param recipient recipient address\\n   * @param token token address\\n   * @param uid unique channel id\\n   * @return hash\\n   */\\n  function computePaymentChannelHash(\\n    address sender,\\n    address recipient,\\n    address token,\\n    bytes32 uid\\n  )\\n    external\\n    pure\\n    returns (bytes32)\\n  {\\n    return _computePaymentChannelHash(\\n      sender,\\n      recipient,\\n      token,\\n      uid\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `DepositWithdrawal` typed data\\n   * @param depositWithdrawal struct\\n   * @return hash\\n   */\\n  function hashDepositWithdrawal(\\n    DepositWithdrawal memory depositWithdrawal\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        depositWithdrawal.owner,\\n        depositWithdrawal.token,\\n        depositWithdrawal.amount\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Hashes `PaymentChannelCommit` typed data\\n   * @param paymentChannelCommit struct\\n   * @return hash\\n   */\\n  function hashPaymentChannelCommit(\\n    PaymentChannelCommit memory paymentChannelCommit\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        paymentChannelCommit.sender,\\n        paymentChannelCommit.recipient,\\n        paymentChannelCommit.token,\\n        paymentChannelCommit.uid,\\n        paymentChannelCommit.blockNumber,\\n        paymentChannelCommit.amount\\n      )\\n    );\\n  }\\n\\n  // private functions\\n\\n  function _deployDepositAccount(\\n    address owner\\n  )\\n    private\\n  {\\n    if (deposits[owner].account == address(0)) {\\n      bytes32 salt = keccak256(\\n        abi.encodePacked(\\n          owner\\n        )\\n      );\\n\\n      deposits[owner].account = _deployAccount(salt);\\n\\n      emit DepositAccountDeployed(\\n        deposits[owner].account,\\n        owner\\n      );\\n    }\\n  }\\n\\n  function _verifyDepositExitOrDeployAccount(\\n    address owner,\\n    address token\\n  )\\n    private\\n  {\\n    if (deposits[owner].exitLockedUntil[token] > 0) {\\n      deposits[owner].exitLockedUntil[token] = 0;\\n\\n      emit DepositExitRejected(\\n        deposits[owner].account,\\n        owner,\\n        token\\n      );\\n    } else {\\n      _deployDepositAccount(owner);\\n    }\\n  }\\n\\n  function _commitPaymentChannel(\\n    address sender,\\n    address recipient,\\n    address token,\\n    bytes32 uid,\\n    uint256 blockNumber,\\n    uint256 amount,\\n    bytes memory senderSignature,\\n    bytes memory guardianSignature\\n  )\\n    private\\n    returns (bytes32 hash, address depositAccount, uint256 paymentValue)\\n  {\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        sender,\\n        recipient,\\n        token,\\n        uid,\\n        blockNumber,\\n        amount\\n      )\\n    );\\n\\n    if (senderSignature.length == 0) {\\n      require(\\n        externalAccountRegistry.verifyAccountProofAtBlock(sender, messageHash, blockNumber),\\n        \\\"PaymentRegistry: invalid guardian signature\\\"\\n      );\\n    } else {\\n      address signer = messageHash.recoverAddress(senderSignature);\\n\\n      if (sender != signer) {\\n        require(\\n          personalAccountRegistry.verifyAccountOwnerAtBlock(sender, signer, blockNumber) ||\\n          externalAccountRegistry.verifyAccountOwnerAtBlock(sender, signer, blockNumber),\\n          \\\"PaymentRegistry: invalid sender signature\\\"\\n        );\\n      }\\n    }\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"PaymentRegistry: invalid guardian signature\\\"\\n    );\\n\\n    hash = _computePaymentChannelHash(\\n      sender,\\n      recipient,\\n      token,\\n      uid\\n    );\\n\\n    /// @dev calc payment value\\n    paymentValue = amount.sub(paymentChannels[hash].committedAmount);\\n\\n    require(\\n      paymentValue != 0,\\n      \\\"PaymentRegistry: invalid payment value\\\"\\n    );\\n\\n    paymentChannels[hash].committedAmount = amount;\\n\\n    _verifyDepositExitOrDeployAccount(sender, token);\\n\\n    depositAccount = deposits[sender].account;\\n\\n    emit PaymentChannelCommitted(\\n      hash,\\n      sender,\\n      recipient,\\n      token,\\n      uid,\\n      amount\\n    );\\n\\n    return (hash, depositAccount, paymentValue);\\n  }\\n\\n  function _transferFromDeposit(\\n    address depositAccount,\\n    address to,\\n    address token,\\n    uint256 value\\n  )\\n    private\\n  {\\n    if (token == address(0)) {\\n      _executeAccountTransaction(\\n        depositAccount,\\n        to,\\n        value,\\n        new bytes(0)\\n      );\\n    } else {\\n      bytes memory response = _executeAccountTransaction(\\n        depositAccount,\\n        token,\\n        0,\\n        abi.encodeWithSelector(\\n          ERC20Token(token).transfer.selector,\\n          to,\\n          value\\n        )\\n      );\\n\\n      if (response.length > 0) {\\n        require(\\n          abi.decode(response, (bool)),\\n          \\\"PaymentRegistry: ERC20Token transfer reverted\\\"\\n        );\\n      }\\n    }\\n  }\\n\\n  function _transferSplitFromDeposit(\\n    address depositAccount,\\n    address to,\\n    address token,\\n    uint256 paymentValue,\\n    uint256 depositValue\\n  )\\n    private\\n  {\\n    require(\\n      depositValue > 0,\\n      \\\"PaymentRegistry: invalid deposit value\\\"\\n    );\\n\\n    uint256 withdrawValue = paymentValue.sub(depositValue);\\n\\n    require(\\n      withdrawValue > 0,\\n      \\\"PaymentRegistry: invalid withdraw value\\\"\\n    );\\n\\n    _transferFromDeposit(\\n      depositAccount,\\n      to,\\n      token,\\n      withdrawValue\\n    );\\n\\n    _transferFromDeposit(\\n      depositAccount,\\n      _computeDepositAccountAddress(to),\\n      token,\\n      depositValue\\n    );\\n  }\\n\\n  // private functions (views)\\n\\n  function _computeDepositAccountAddress(\\n    address owner\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(\\n        owner\\n      )\\n    );\\n\\n    return _computeAccountAddress(salt);\\n  }\\n\\n  // private functions (pure)\\n\\n  function _computePaymentChannelHash(\\n    address sender,\\n    address recipient,\\n    address token,\\n    bytes32 uid\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(\\n      abi.encodePacked(\\n        sender,\\n        recipient,\\n        token,\\n        uid\\n      )\\n    );\\n  }\\n\\n  function _hashTypedData(\\n    address owner,\\n    address token,\\n    uint256 amount\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      DEPOSIT_WITHDRAWAL_TYPE_HASH,\\n      owner,\\n      token,\\n      amount\\n    ));\\n  }\\n\\n  function _hashTypedData(\\n    address sender,\\n    address recipient,\\n    address token,\\n    bytes32 uid,\\n    uint256 blockNumber,\\n    uint256 amount\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n        PAYMENT_CHANNEL_COMMIT_TYPE_HASH,\\n        sender,\\n        recipient,\\n        token,\\n        uid,\\n        blockNumber,\\n        amount\\n      ));\\n  }\\n}\\n\",\"keccak256\":\"0xd0ff04d2b000d5833c53c7a6d9f8d061bfcecd87a9cb30d65e98b26d4a2798c4\",\"license\":\"MIT\"},\"src/personal/PersonalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/account/AccountController.sol\\\";\\nimport \\\"../common/libs/BlockLib.sol\\\";\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/token/ERC20Token.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\n\\n\\n/**\\n * @title Personal account registry\\n *\\n * @notice A registry for personal (controlled by owners) accounts\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract PersonalAccountRegistry is AccountController, Initializable, GatewayRecipient {\\n  using BlockLib for BlockLib.BlockRelated;\\n  using SafeMathLib for uint256;\\n\\n  struct Account {\\n    bool deployed;\\n    bytes32 salt;\\n    mapping(address => BlockLib.BlockRelated) owners;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the account is deployed\\n   * @param account account address\\n   */\\n  event AccountDeployed(\\n    address account\\n  );\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the transaction is executed\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @param response response\\n   */\\n  event AccountTransactionExecuted(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes data,\\n    bytes response\\n  );\\n\\n  /**\\n   * @dev Emitted when the call is refunded\\n   * @param account account address\\n   * @param beneficiary beneficiary address\\n   * @param token token address\\n   * @param value value\\n   */\\n  event AccountCallRefunded(\\n    address account,\\n    address beneficiary,\\n    address token,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initialize `PersonalAccountRegistry` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function initialize(\\n    address gateway_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n  }\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    require(\\n      owner != address(0),\\n      \\\"PersonalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[account].owners[owner].added = true;\\n    accounts[account].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes the existing account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    address sender = _verifySender(account);\\n\\n    require(\\n      owner != sender,\\n      \\\"PersonalAccountRegistry: cannot remove self\\\"\\n    );\\n\\n    require(\\n      accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[account].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Executes account transaction\\n   * @dev Deploys an account if not deployed yet\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   */\\n  function executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    bytes memory response = _executeAccountTransaction(\\n      account,\\n      to,\\n      value,\\n      data\\n    );\\n\\n    emit AccountTransactionExecuted(\\n      account,\\n      to,\\n      value,\\n      data,\\n      response\\n    );\\n  }\\n\\n  /**\\n   * @notice Refunds account call\\n   * @dev Deploys an account if not deployed yet\\n   * @param account account address\\n   * @param token token address\\n   * @param value value\\n   */\\n  function refundAccountCall(\\n    address account,\\n    address token,\\n    uint256 value\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    /* solhint-disable avoid-tx-origin */\\n\\n    if (token == address(0)) {\\n      _executeAccountTransaction(\\n        account,\\n        tx.origin,\\n        value,\\n        new bytes(0)\\n      );\\n    } else {\\n      bytes memory response = _executeAccountTransaction(\\n        account,\\n        token,\\n        0,\\n        abi.encodeWithSelector(\\n          ERC20Token(token).transfer.selector,\\n          tx.origin,\\n          value\\n        )\\n      );\\n\\n      if (response.length > 0) {\\n        require(\\n          abi.decode(response, (bool)),\\n          \\\"PersonalAccountRegistry: ERC20Token transfer reverted\\\"\\n        );\\n      }\\n    }\\n\\n    emit AccountCallRefunded(\\n      account,\\n      tx.origin,\\n      token,\\n      value\\n    );\\n\\n    /* solhint-enable avoid-tx-origin */\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Computes account address\\n   * @param saltOwner salt owner address\\n   * @return account address\\n   */\\n  function computeAccountAddress(\\n    address saltOwner\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return _computeAccountAddress(saltOwner);\\n  }\\n\\n  /**\\n   * @notice Checks if account is deployed\\n   * @param account account address\\n   * @return true when account is deployed\\n   */\\n  function isAccountDeployed(\\n    address account\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].deployed;\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at the current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyAccountOwner(account, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at a specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (_verifyAccountOwner(account, owner)) {\\n      result = true;\\n    } else {\\n      result = accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions\\n\\n  function _verifySender(\\n    address account\\n  )\\n    private\\n    returns (address)\\n  {\\n    address sender = _getContextSender();\\n\\n    if (accounts[account].owners[sender].added) {\\n      require(\\n        accounts[account].owners[sender].removedAtBlockNumber == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n    } else {\\n      require(\\n        accounts[account].salt == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      bytes32 salt = keccak256(\\n        abi.encodePacked(sender)\\n      );\\n\\n      require(\\n        account == _computeAccountAddress(salt),\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      accounts[account].salt = salt;\\n      accounts[account].owners[sender].added = true;\\n\\n      emit AccountOwnerAdded(\\n        account,\\n        sender\\n      );\\n    }\\n\\n    return sender;\\n  }\\n\\n  function _deployAccount(\\n    address account\\n  )\\n    internal\\n  {\\n    if (!accounts[account].deployed) {\\n      _deployAccount(\\n        accounts[account].salt\\n      );\\n\\n      accounts[account].deployed = true;\\n\\n      emit AccountDeployed(\\n        account\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _computeAccountAddress(\\n    address saltOwner\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(saltOwner)\\n    );\\n\\n    return _computeAccountAddress(salt);\\n  }\\n\\n  function _verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (accounts[account].owners[owner].added) {\\n      result = accounts[account].owners[owner].removedAtBlockNumber == 0;\\n    } else if (accounts[account].salt == 0) {\\n      result = account == _computeAccountAddress(owner);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xaed20c7791184c2c635bed1ff9505ad5652c778bf02bd2e4ad17376542b6059e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5032600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614ed3806100616000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a1773ab116100de578063bdff4b3b11610097578063d2c83b9a11610071578063d2c83b9a146104b9578063da1b213d146104d7578063dc7d6c31146104f3578063df043380146105235761018e565b8063bdff4b3b1461043b578063c36326e714610459578063d0f710d6146104895761018e565b80638a1773ab1461037d5780639130c06e146103ad5780639a85fae2146103c9578063a526d83b146103e5578063b0274a7314610401578063bd106a021461041d5761018e565b806360bf4df21161014b5780636866da52116101255780636866da52146102f7578063714041561461031357806384389a2b1461032f57806387d313131461035f5761018e565b806360bf4df21461027b5780636121fcfc146102ab5780636524a947146102db5761018e565b80630c68ba2114610193578063116191b6146101c35780632c073a71146101e15780632e4f161e146101fd5780632e7037a01461022d578063392e53cd1461025d575b600080fd5b6101ad60048036038101906101a8919061310f565b61053f565b6040516101ba919061421b565b60405180910390f35b6101cb610594565b6040516101d89190614042565b60405180910390f35b6101fb60048036038101906101f691906134ef565b6105ba565b005b61021760048036038101906102129190613174565b6107ce565b6040516102249190614236565b60405180910390f35b610247600480360381019061024291906135bd565b6107e6565b6040516102549190614236565b60405180910390f35b61026561080e565b604051610272919061421b565b60405180910390f35b6102956004803603810190610290919061310f565b610866565b6040516102a29190614042565b60405180910390f35b6102c560048036038101906102c0919061310f565b610878565b6040516102d2919061421b565b60405180910390f35b6102f560048036038101906102f0919061310f565b610913565b005b610311600480360381019061030c9190613398565b61091f565b005b61032d6004803603810190610328919061310f565b610c4c565b005b610349600480360381019061034491906135e6565b610e64565b6040516103569190614236565b60405180910390f35b610367610e9b565b6040516103749190614487565b60405180910390f35b6103976004803603810190610392919061342d565b610ec1565b6040516103a49190614784565b60405180910390f35b6103c760048036038101906103c2919061310f565b610ee1565b005b6103e360048036038101906103de91906131d7565b611215565b005b6103ff60048036038101906103fa919061310f565b611320565b005b61041b6004803603810190610416919061310f565b6113b7565b005b6104256115d2565b6040516104329190614236565b60405180910390f35b6104436115d8565b6040516104509190614784565b60405180910390f35b610473600480360381019061046e9190613138565b6115de565b6040516104809190614784565b60405180910390f35b6104a3600480360381019061049e9190613456565b611668565b6040516104b0919061421b565b60405180910390f35b6104c16116c1565b6040516104ce919061446c565b60405180910390f35b6104f160048036038101906104ec91906132ad565b6116e7565b005b61050d60048036038101906105089190613138565b6117ee565b60405161051a9190614784565b60405180910390f35b61053d600480360381019061053891906131d7565b611878565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190614524565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000871415610726576224ea0060068190555061072e565b866006819055505b610778868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061197b565b610781846119d3565b61078c838383611a17565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107bb919061405d565b60405180910390a1505050505050505050565b60006107dc85858585611a79565b9050949350505050565b6000610807610802836000015184602001518560400151611ab2565b611b0a565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600061087182611b75565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61091c81611bb2565b50565b6000610929611d9d565b905060006109bf600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611dae90919063ffffffff16565b905060008111610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90614624565b60405180910390fd5b6000610a19610a14848989611ab2565b611b0a565b9050610a698186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ddb565b610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90614764565b60405180910390fd5b85600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b368388611e48565b610ba4600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848985612005565b7f95f66b073d65f18e43f6b76c7ab8557787f5f766d86cab7c9c76f41be9f8abc6600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848989604051610c3b9493929190614101565b60405180910390a150505050505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90614604565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90614724565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8906146c4565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b3282604051610e59929190614078565b60405180910390a150565b6000610e94610e8f836000015184602001518560400151866060015187608001518860a00151612185565b611b0a565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060086000838152602001908152602001600020600001549050919050565b6000610eeb611d9d565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fac906145c4565b60405180910390fd5b42811115610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90614644565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611139578173ffffffffffffffffffffffffffffffffffffffff163190506111c5565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016111729190614042565b60206040518083038186803b15801561118a57600080fd5b505afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c2919061360f565b90505b6111d182858784612005565b7f5300d9a2838baade7cdc628c82cb80c1298853ba5f389d51e2b47330336aeffc828587846040516112069493929190614101565b60405180910390a15050505050565b600061121f611d9d565b905060008060006112be8d858e8e8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b9250925092506112d8826112d186611b75565b8e84612005565b7f771bc0494e1a2fcbef19a8762845000d8c4500454c756a7370c955e39ed60fd483826040516113099291906143c7565b60405180910390a150505050505050505050505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290614604565b60405180910390fd5b6113b481612692565b50565b60006113c1611d9d565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811461148a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148190614564565b60405180910390fd5b61149382611bb2565b6114a86006544261282190919063ffffffff16565b905080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fed3c8c6cdfc6d7b91dc9db3e1f54866587c26c3c3e0f9e32cd1944974be43a50600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168385846040516115c59493929190614101565b60405180910390a1505050565b60025481565b60065481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006116b88484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ddb565b90509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006116f1611d9d565b905060008060006117908e858f8f8f8f8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b9250925092506117a382858f848d612876565b7f8b67efde501ee9cd0e771f7436554c44a5c076239ff3a6fbb397646a4689c0f283828b6040516117d6939291906143f0565b60405180910390a15050505050505050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000611882611d9d565b905060008060006119218d858e8e8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b92509250925061193382858e84612005565b7f6675346cd43846f7d47c310d39fb5c15bc7db66b3770338cdf1f133613a5ae9883826040516119649291906143c7565b60405180910390a150505050505050505050505050565b6000815114156119935761198e32612692565b6119d0565b60008151905060005b818110156119cd576119c08382815181106119b357fe5b6020026020010151612692565b808060010191505061199c565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac564728484833086604051602001611a5796959493929190614366565b6040516020818303038152906040528051906020012060028190555050505050565b600084848484604051602001611a929493929190613f6d565b604051602081830303815290604052805190602001209050949350505050565b60007f3b3087c8f883f1f44cabe66444f5f9d96f69de6a88f364ea10959eef0331414a848484604051602001611aeb9493929190614321565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060025483604051602001611b5893929190614009565b604051602081830303815290604052805190602001209050919050565b60008082604051602001611b899190613f52565b604051602081830303815290604052805190602001209050611baa8161293b565b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d9a57600081604051602001611c5c9190613f52565b604051602081830303815290604052805190602001209050611c7d816129ae565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd80572c0f2f24f2d9d726d831bd860ed82b12bafaf01cfb6e4d38fb23c4347e9600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051611d909291906140a1565b60405180910390a1505b50565b6000611da960286129e5565b905090565b6000611dd38383604051806060016040528060218152602001614ea660219139612a7a565b905092915050565b600080611df18385612acf90919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611ff7576000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa19281a6f3163da06f6b82f3ecf0130493c52aba23cdc2a312f652742f0d1801600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383604051611fea939291906140ca565b60405180910390a1612001565b61200082611bb2565b5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561209757612091848483600067ffffffffffffffff8111801561205857600080fd5b506040519080825280601f01601f19166020018201604052801561208b5781602001600182028036833780820191505090505b50612b8a565b5061217f565b606061211d8584600063a9059cbb60e01b88876040516024016120bb9291906141b4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b8a565b905060008151111561217d578080602001905181019061213d9190613404565b61217c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612173906145e4565b60405180910390fd5b5b505b50505050565b60007f745089e29f2abf28f618236a5dc04d214ac05ead3440ba532b69e9d160ba2e728787878787876040516020016121c497969594939291906142b2565b6040516020818303038152906040528051906020012090509695505050505050565b6000806000806122026121fd8d8d8d8d8d8d612185565b611b0a565b905060008651141561230157600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359b52ef88d838b6040518463ffffffff1660e01b815260040161226d9392919061417d565b60206040518083038186803b15801561228557600080fd5b505afa158015612299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bd9190613404565b6122fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f390614764565b60405180910390fd5b6124f2565b60006123168783612acf90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146124f057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d323a48e838c6040518463ffffffff1660e01b81526004016123aa93929190614146565b60206040518083038186803b1580156123c257600080fd5b505afa1580156123d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fa9190613404565b806124b05750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d323a48e838c6040518463ffffffff1660e01b815260040161245f93929190614146565b60206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af9190613404565b5b6124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906146a4565b60405180910390fd5b5b505b6124fc8186611ddb565b61253b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253290614764565b60405180910390fd5b6125478c8c8c8c611a79565b9350612572600860008681526020019081526020016000206000015488611dae90919063ffffffff16565b915060008214156125b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125af90614584565b60405180910390fd5b8660086000868152602001908152602001600020600001819055506125dd8c8b611e48565b600760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692507f0d1cb77d1fe491f98926195d0b885509da18bc305dd1489f45610237d971ed46848d8d8d8d8c60405161267b96959493929190614251565b60405180910390a150985098509895505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f990614504565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561278e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278590614704565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051612816929190614078565b60405180910390a150565b60008082840190508381101561286c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612863906146e4565b60405180910390fd5b8091505092915050565b600081116128b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b0906144c4565b60405180910390fd5b60006128ce8284611dae90919063ffffffff16565b905060008111612913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290a90614664565b60405180910390fd5b61291f86868684612005565b6129338661292c87611b75565b8685612005565b505050505050565b600060606040518060200161294f90612e8b565b6020820181038252601f19601f820116604052509050600060ff60f81b308584805190602001206040516020016129899493929190613fbb565b6040516020818303038152906040528051906020012090508060001c92505050919050565b6000816040516129bd90612e8b565b8190604051809103906000f59050801580156129dd573d6000803e3d6000fd5b509050919050565b600080600090506129f4612d78565b15612a6d576000836000369050039050612a6560003683906014850192612a1d9392919061483b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612e25565b915050612a71565b3390505b80915050919050565b6000838311158290612ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab991906144a2565b60405180910390fd5b5082840390509392505050565b60008060009050604183511415612b805760008060006020860151925060408601519150606086015160001a9050601b8160ff161015612b1057601b810190505b601b8160ff161480612b255750601c8160ff16145b15612b7c5760018782858560405160008152602001604052604051612b4d9493929190614427565b6020604051602081039080840390855afa158015612b6f573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b6060600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf390614544565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290614684565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd1906144e4565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633f579f428585856040518463ffffffff1660e01b8152600401612d17939291906141dd565b600060405180830381600087803b158015612d3157600080fd5b505af1158015612d45573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d6e91906134ae565b9050949350505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612e1e57602c60003690501015612e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e10906145a4565b60405180910390fd5b600190505b8091505090565b6000806014835114612e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6390614744565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b6103f780614aaf83390190565b600081359050612ea781614a24565b92915050565b60008083601f840112612ebf57600080fd5b8235905067ffffffffffffffff811115612ed857600080fd5b602083019150836020820283011115612ef057600080fd5b9250929050565b600081519050612f0681614a3b565b92915050565b600081359050612f1b81614a52565b92915050565b60008083601f840112612f3357600080fd5b8235905067ffffffffffffffff811115612f4c57600080fd5b602083019150836001820283011115612f6457600080fd5b9250929050565b600082601f830112612f7c57600080fd5b8151612f8f612f8a826147cc565b61479f565b91508082526020830160208301858383011115612fab57600080fd5b612fb683828461499b565b50505092915050565b600081359050612fce81614a69565b92915050565b600081359050612fe381614a80565b92915050565b600060608284031215612ffb57600080fd5b613005606061479f565b9050600061301584828501612e98565b600083015250602061302984828501612e98565b602083015250604061303d848285016130e5565b60408301525092915050565b600060c0828403121561305b57600080fd5b61306560c061479f565b9050600061307584828501612e98565b600083015250602061308984828501612e98565b602083015250604061309d84828501612e98565b60408301525060606130b184828501612f0c565b60608301525060806130c5848285016130e5565b60808301525060a06130d9848285016130e5565b60a08301525092915050565b6000813590506130f481614a97565b92915050565b60008151905061310981614a97565b92915050565b60006020828403121561312157600080fd5b600061312f84828501612e98565b91505092915050565b6000806040838503121561314b57600080fd5b600061315985828601612e98565b925050602061316a85828601612e98565b9150509250929050565b6000806000806080858703121561318a57600080fd5b600061319887828801612e98565b94505060206131a987828801612e98565b93505060406131ba87828801612e98565b92505060606131cb87828801612f0c565b91505092959194509250565b600080600080600080600080600060e08a8c0312156131f557600080fd5b60006132038c828d01612e98565b99505060206132148c828d01612e98565b98505060406132258c828d01612f0c565b97505060606132368c828d016130e5565b96505060806132478c828d016130e5565b95505060a08a013567ffffffffffffffff81111561326457600080fd5b6132708c828d01612f21565b945094505060c08a013567ffffffffffffffff81111561328f57600080fd5b61329b8c828d01612f21565b92509250509295985092959850929598565b6000806000806000806000806000806101008b8d0312156132cd57600080fd5b60006132db8d828e01612e98565b9a505060206132ec8d828e01612e98565b99505060406132fd8d828e01612f0c565b985050606061330e8d828e016130e5565b975050608061331f8d828e016130e5565b96505060a06133308d828e016130e5565b95505060c08b013567ffffffffffffffff81111561334d57600080fd5b6133598d828e01612f21565b945094505060e08b013567ffffffffffffffff81111561337857600080fd5b6133848d828e01612f21565b92509250509295989b9194979a5092959850565b600080600080606085870312156133ae57600080fd5b60006133bc87828801612e98565b94505060206133cd878288016130e5565b935050604085013567ffffffffffffffff8111156133ea57600080fd5b6133f687828801612f21565b925092505092959194509250565b60006020828403121561341657600080fd5b600061342484828501612ef7565b91505092915050565b60006020828403121561343f57600080fd5b600061344d84828501612f0c565b91505092915050565b60008060006040848603121561346b57600080fd5b600061347986828701612f0c565b935050602084013567ffffffffffffffff81111561349657600080fd5b6134a286828701612f21565b92509250509250925092565b6000602082840312156134c057600080fd5b600082015167ffffffffffffffff8111156134da57600080fd5b6134e684828501612f6b565b91505092915050565b60008060008060008060008060006101008a8c03121561350e57600080fd5b600061351c8c828d01612fbf565b995050602061352d8c828d01612fd4565b985050604061353e8c828d016130e5565b97505060608a013567ffffffffffffffff81111561355b57600080fd5b6135678c828d01612ead565b9650965050608061357a8c828d01612e98565b94505060a061358b8c828d01612f0c565b93505060c061359c8c828d01612f0c565b92505060e06135ad8c828d01612f0c565b9150509295985092959850929598565b6000606082840312156135cf57600080fd5b60006135dd84828501612fe9565b91505092915050565b600060c082840312156135f857600080fd5b600061360684828501613049565b91505092915050565b60006020828403121561362157600080fd5b600061362f848285016130fa565b91505092915050565b6136418161491d565b82525050565b6136508161486e565b82525050565b6136676136628261486e565b6149ce565b82525050565b61367681614880565b82525050565b61368d6136888261488c565b6149e0565b82525050565b61369c816148b8565b82525050565b6136b36136ae826148b8565b6149ea565b82525050565b60006136c4826147f8565b6136ce818561480e565b93506136de81856020860161499b565b6136e781614a06565b840191505092915050565b6136fb8161492f565b82525050565b61370a81614953565b82525050565b600061371b82614803565b613725818561481f565b935061373581856020860161499b565b61373e81614a06565b840191505092915050565b600061375482614803565b61375e8185614830565b935061376e81856020860161499b565b80840191505092915050565b600061378760268361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964206465706f73697460008301527f2076616c756500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006137ed60268361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f2073656c6600000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061385360208361481f565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b6000613893602f8361481f565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b60006138f960258361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f203078300000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061395f602f8361481f565b91507f5061796d656e7452656769737472793a206465706f736974206578697420616c60008301527f72656164792072657175657374656400000000000000000000000000000000006020830152604082019050919050565b60006139c560268361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964207061796d656e7460008301527f2076616c756500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a2b60228361481f565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a91602b8361481f565b91507f5061796d656e7452656769737472793a206465706f7369742065786974206e6f60008301527f74207265717565737465640000000000000000000000000000000000000000006020830152604082019050919050565b6000613af7602d8361481f565b91507f5061796d656e7452656769737472793a204552433230546f6b656e207472616e60008301527f73666572207265766572746564000000000000000000000000000000000000006020830152604082019050919050565b6000613b5d60268361481f565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bc3601f8361481f565b91507f5061796d656e7452656769737472793a20696e76616c696420616d6f756e74006000830152602082019050919050565b6000613c0360248361481f565b91507f5061796d656e7452656769737472793a206465706f7369742065786974206c6f60008301527f636b6564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c6960278361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964207769746864726160008301527f772076616c7565000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ccf602c8361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f20636f6e74726f6c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6000613d3560298361481f565b91507f5061796d656e7452656769737472793a20696e76616c69642073656e6465722060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d9b601f8361481f565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613ddb601e8361481f565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000613e1b60208361481f565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000613e5b601b8361481f565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000613e9b601d8361481f565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000613edb602b8361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964206775617264696160008301527f6e207369676e61747572650000000000000000000000000000000000000000006020830152604082019050919050565b613f3d81614906565b82525050565b613f4c81614910565b82525050565b6000613f5e8284613656565b60148201915081905092915050565b6000613f798287613656565b601482019150613f898286613656565b601482019150613f998285613656565b601482019150613fa982846136a2565b60208201915081905095945050505050565b6000613fc7828761367c565b600182019150613fd78286613656565b601482019150613fe782856136a2565b602082019150613ff782846136a2565b60208201915081905095945050505050565b60006140158286613749565b915061402182856136a2565b60208201915061403182846136a2565b602082019150819050949350505050565b60006020820190506140576000830184613647565b92915050565b60006020820190506140726000830184613638565b92915050565b600060408201905061408d6000830185613638565b61409a6020830184613647565b9392505050565b60006040820190506140b66000830185613647565b6140c36020830184613647565b9392505050565b60006060820190506140df6000830186613647565b6140ec6020830185613647565b6140f96040830184613647565b949350505050565b60006080820190506141166000830187613647565b6141236020830186613647565b6141306040830185613647565b61413d6060830184613f34565b95945050505050565b600060608201905061415b6000830186613647565b6141686020830185613647565b6141756040830184613f34565b949350505050565b60006060820190506141926000830186613647565b61419f6020830185613693565b6141ac6040830184613f34565b949350505050565b60006040820190506141c96000830185613647565b6141d66020830184613f34565b9392505050565b60006060820190506141f26000830186613647565b6141ff6020830185613f34565b818103604083015261421181846136b9565b9050949350505050565b6000602082019050614230600083018461366d565b92915050565b600060208201905061424b6000830184613693565b92915050565b600060c0820190506142666000830189613693565b6142736020830188613647565b6142806040830187613647565b61428d6060830186613647565b61429a6080830185613693565b6142a760a0830184613f34565b979650505050505050565b600060e0820190506142c7600083018a613693565b6142d46020830189613647565b6142e16040830188613647565b6142ee6060830187613647565b6142fb6080830186613693565b61430860a0830185613f34565b61431560c0830184613f34565b98975050505050505050565b60006080820190506143366000830187613693565b6143436020830186613647565b6143506040830185613647565b61435d6060830184613f34565b95945050505050565b600060c08201905061437b6000830189613693565b6143886020830188613693565b6143956040830187613693565b6143a26060830186613f34565b6143af6080830185613647565b6143bc60a0830184613693565b979650505050505050565b60006040820190506143dc6000830185613693565b6143e96020830184613f34565b9392505050565b60006060820190506144056000830186613693565b6144126020830185613f34565b61441f6040830184613f34565b949350505050565b600060808201905061443c6000830187613693565b6144496020830186613f43565b6144566040830185613693565b6144636060830184613693565b95945050505050565b600060208201905061448160008301846136f2565b92915050565b600060208201905061449c6000830184613701565b92915050565b600060208201905081810360008301526144bc8184613710565b905092915050565b600060208201905081810360008301526144dd8161377a565b9050919050565b600060208201905081810360008301526144fd816137e0565b9050919050565b6000602082019050818103600083015261451d81613846565b9050919050565b6000602082019050818103600083015261453d81613886565b9050919050565b6000602082019050818103600083015261455d816138ec565b9050919050565b6000602082019050818103600083015261457d81613952565b9050919050565b6000602082019050818103600083015261459d816139b8565b9050919050565b600060208201905081810360008301526145bd81613a1e565b9050919050565b600060208201905081810360008301526145dd81613a84565b9050919050565b600060208201905081810360008301526145fd81613aea565b9050919050565b6000602082019050818103600083015261461d81613b50565b9050919050565b6000602082019050818103600083015261463d81613bb6565b9050919050565b6000602082019050818103600083015261465d81613bf6565b9050919050565b6000602082019050818103600083015261467d81613c5c565b9050919050565b6000602082019050818103600083015261469d81613cc2565b9050919050565b600060208201905081810360008301526146bd81613d28565b9050919050565b600060208201905081810360008301526146dd81613d8e565b9050919050565b600060208201905081810360008301526146fd81613dce565b9050919050565b6000602082019050818103600083015261471d81613e0e565b9050919050565b6000602082019050818103600083015261473d81613e4e565b9050919050565b6000602082019050818103600083015261475d81613e8e565b9050919050565b6000602082019050818103600083015261477d81613ece565b9050919050565b60006020820190506147996000830184613f34565b92915050565b6000604051905081810181811067ffffffffffffffff821117156147c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156147e357600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561484b57600080fd5b8386111561485857600080fd5b6001850283019150848603905094509492505050565b6000614879826148e6565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60006148cd8261486e565b9050919050565b60006148df8261486e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061492882614977565b9050919050565b600061493a82614941565b9050919050565b600061494c826148e6565b9050919050565b600061495e82614965565b9050919050565b6000614970826148e6565b9050919050565b600061498282614989565b9050919050565b6000614994826148e6565b9050919050565b60005b838110156149b957808201518184015260208101905061499e565b838111156149c8576000848401525b50505050565b60006149d9826149f4565b9050919050565b6000819050919050565b6000819050919050565b60006149ff82614a17565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b614a2d8161486e565b8114614a3857600080fd5b50565b614a4481614880565b8114614a4f57600080fd5b50565b614a5b816148b8565b8114614a6657600080fd5b50565b614a72816148c2565b8114614a7d57600080fd5b50565b614a89816148d4565b8114614a9457600080fd5b50565b614aa081614906565b8114614aab57600080fd5b5056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103a4806100536000396000f3fe60806040526004361061002d5760003560e01c80633f579f4214610039578063f77c47911461016257610034565b3661003457005b600080fd5b34801561004557600080fd5b506100e76004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100a357600080fd5b8201836020820111156100b557600080fd5b803590602001918460018302840111640100000000831117156100d757600080fd5b90919293919293905050506101a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012757808201518184015260208101905061010c565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016e57600080fd5b50610177610347565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061036c602c913960400191505060405180910390fd5b606060008673ffffffffffffffffffffffffffffffffffffffff1686868660405180838380828437808301925050509250505060006040518083038185875af1925050503d80600081146102b9576040519150601f19603f3d011682016040523d82523d6000602084013e6102be565b606091505b5080935081925050508061033a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4163636f756e743a207472616e73616374696f6e20726576657274656400000081525060200191505060405180910390fd5b8192505050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f742074686520636f6e74726f6c6c6572a164736f6c634300060c000a536166654d6174684c69623a207375627472616374696f6e206f766572666c6f77a164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638a1773ab116100de578063bdff4b3b11610097578063d2c83b9a11610071578063d2c83b9a146104b9578063da1b213d146104d7578063dc7d6c31146104f3578063df043380146105235761018e565b8063bdff4b3b1461043b578063c36326e714610459578063d0f710d6146104895761018e565b80638a1773ab1461037d5780639130c06e146103ad5780639a85fae2146103c9578063a526d83b146103e5578063b0274a7314610401578063bd106a021461041d5761018e565b806360bf4df21161014b5780636866da52116101255780636866da52146102f7578063714041561461031357806384389a2b1461032f57806387d313131461035f5761018e565b806360bf4df21461027b5780636121fcfc146102ab5780636524a947146102db5761018e565b80630c68ba2114610193578063116191b6146101c35780632c073a71146101e15780632e4f161e146101fd5780632e7037a01461022d578063392e53cd1461025d575b600080fd5b6101ad60048036038101906101a8919061310f565b61053f565b6040516101ba919061421b565b60405180910390f35b6101cb610594565b6040516101d89190614042565b60405180910390f35b6101fb60048036038101906101f691906134ef565b6105ba565b005b61021760048036038101906102129190613174565b6107ce565b6040516102249190614236565b60405180910390f35b610247600480360381019061024291906135bd565b6107e6565b6040516102549190614236565b60405180910390f35b61026561080e565b604051610272919061421b565b60405180910390f35b6102956004803603810190610290919061310f565b610866565b6040516102a29190614042565b60405180910390f35b6102c560048036038101906102c0919061310f565b610878565b6040516102d2919061421b565b60405180910390f35b6102f560048036038101906102f0919061310f565b610913565b005b610311600480360381019061030c9190613398565b61091f565b005b61032d6004803603810190610328919061310f565b610c4c565b005b610349600480360381019061034491906135e6565b610e64565b6040516103569190614236565b60405180910390f35b610367610e9b565b6040516103749190614487565b60405180910390f35b6103976004803603810190610392919061342d565b610ec1565b6040516103a49190614784565b60405180910390f35b6103c760048036038101906103c2919061310f565b610ee1565b005b6103e360048036038101906103de91906131d7565b611215565b005b6103ff60048036038101906103fa919061310f565b611320565b005b61041b6004803603810190610416919061310f565b6113b7565b005b6104256115d2565b6040516104329190614236565b60405180910390f35b6104436115d8565b6040516104509190614784565b60405180910390f35b610473600480360381019061046e9190613138565b6115de565b6040516104809190614784565b60405180910390f35b6104a3600480360381019061049e9190613456565b611668565b6040516104b0919061421b565b60405180910390f35b6104c16116c1565b6040516104ce919061446c565b60405180910390f35b6104f160048036038101906104ec91906132ad565b6116e7565b005b61050d60048036038101906105089190613138565b6117ee565b60405161051a9190614784565b60405180910390f35b61053d600480360381019061053891906131d7565b611878565b005b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190614524565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000871415610726576224ea0060068190555061072e565b866006819055505b610778868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505061197b565b610781846119d3565b61078c838383611a17565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107bb919061405d565b60405180910390a1505050505050505050565b60006107dc85858585611a79565b9050949350505050565b6000610807610802836000015184602001518560400151611ab2565b611b0a565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600061087182611b75565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61091c81611bb2565b50565b6000610929611d9d565b905060006109bf600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611dae90919063ffffffff16565b905060008111610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90614624565b60405180910390fd5b6000610a19610a14848989611ab2565b611b0a565b9050610a698186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ddb565b610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90614764565b60405180910390fd5b85600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b368388611e48565b610ba4600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848985612005565b7f95f66b073d65f18e43f6b76c7ab8557787f5f766d86cab7c9c76f41be9f8abc6600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848989604051610c3b9493929190614101565b60405180910390a150505050505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610cd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cce90614604565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90614724565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8906146c4565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b3282604051610e59929190614078565b60405180910390a150565b6000610e94610e8f836000015184602001518560400151866060015187608001518860a00151612185565b611b0a565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060086000838152602001908152602001600020600001549050919050565b6000610eeb611d9d565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fac906145c4565b60405180910390fd5b42811115610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90614644565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611139578173ffffffffffffffffffffffffffffffffffffffff163190506111c5565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016111729190614042565b60206040518083038186803b15801561118a57600080fd5b505afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c2919061360f565b90505b6111d182858784612005565b7f5300d9a2838baade7cdc628c82cb80c1298853ba5f389d51e2b47330336aeffc828587846040516112069493929190614101565b60405180910390a15050505050565b600061121f611d9d565b905060008060006112be8d858e8e8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b9250925092506112d8826112d186611b75565b8e84612005565b7f771bc0494e1a2fcbef19a8762845000d8c4500454c756a7370c955e39ed60fd483826040516113099291906143c7565b60405180910390a150505050505050505050505050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290614604565b60405180910390fd5b6113b481612692565b50565b60006113c1611d9d565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811461148a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148190614564565b60405180910390fd5b61149382611bb2565b6114a86006544261282190919063ffffffff16565b905080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fed3c8c6cdfc6d7b91dc9db3e1f54866587c26c3c3e0f9e32cd1944974be43a50600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168385846040516115c59493929190614101565b60405180910390a1505050565b60025481565b60065481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006116b88484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ddb565b90509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006116f1611d9d565b905060008060006117908e858f8f8f8f8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b9250925092506117a382858f848d612876565b7f8b67efde501ee9cd0e771f7436554c44a5c076239ff3a6fbb397646a4689c0f283828b6040516117d6939291906143f0565b60405180910390a15050505050505050505050505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000611882611d9d565b905060008060006119218d858e8e8e8e8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506121e6565b92509250925061193382858e84612005565b7f6675346cd43846f7d47c310d39fb5c15bc7db66b3770338cdf1f133613a5ae9883826040516119649291906143c7565b60405180910390a150505050505050505050505050565b6000815114156119935761198e32612692565b6119d0565b60008151905060005b818110156119cd576119c08382815181106119b357fe5b6020026020010151612692565b808060010191505061199c565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac564728484833086604051602001611a5796959493929190614366565b6040516020818303038152906040528051906020012060028190555050505050565b600084848484604051602001611a929493929190613f6d565b604051602081830303815290604052805190602001209050949350505050565b60007f3b3087c8f883f1f44cabe66444f5f9d96f69de6a88f364ea10959eef0331414a848484604051602001611aeb9493929190614321565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060025483604051602001611b5893929190614009565b604051602081830303815290604052805190602001209050919050565b60008082604051602001611b899190613f52565b604051602081830303815290604052805190602001209050611baa8161293b565b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d9a57600081604051602001611c5c9190613f52565b604051602081830303815290604052805190602001209050611c7d816129ae565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd80572c0f2f24f2d9d726d831bd860ed82b12bafaf01cfb6e4d38fb23c4347e9600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051611d909291906140a1565b60405180910390a1505b50565b6000611da960286129e5565b905090565b6000611dd38383604051806060016040528060218152602001614ea660219139612a7a565b905092915050565b600080611df18385612acf90919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611ff7576000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa19281a6f3163da06f6b82f3ecf0130493c52aba23cdc2a312f652742f0d1801600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168383604051611fea939291906140ca565b60405180910390a1612001565b61200082611bb2565b5b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561209757612091848483600067ffffffffffffffff8111801561205857600080fd5b506040519080825280601f01601f19166020018201604052801561208b5781602001600182028036833780820191505090505b50612b8a565b5061217f565b606061211d8584600063a9059cbb60e01b88876040516024016120bb9291906141b4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612b8a565b905060008151111561217d578080602001905181019061213d9190613404565b61217c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612173906145e4565b60405180910390fd5b5b505b50505050565b60007f745089e29f2abf28f618236a5dc04d214ac05ead3440ba532b69e9d160ba2e728787878787876040516020016121c497969594939291906142b2565b6040516020818303038152906040528051906020012090509695505050505050565b6000806000806122026121fd8d8d8d8d8d8d612185565b611b0a565b905060008651141561230157600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359b52ef88d838b6040518463ffffffff1660e01b815260040161226d9392919061417d565b60206040518083038186803b15801561228557600080fd5b505afa158015612299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bd9190613404565b6122fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f390614764565b60405180910390fd5b6124f2565b60006123168783612acf90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16146124f057600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d323a48e838c6040518463ffffffff1660e01b81526004016123aa93929190614146565b60206040518083038186803b1580156123c257600080fd5b505afa1580156123d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fa9190613404565b806124b05750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334d323a48e838c6040518463ffffffff1660e01b815260040161245f93929190614146565b60206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af9190613404565b5b6124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906146a4565b60405180910390fd5b5b505b6124fc8186611ddb565b61253b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253290614764565b60405180910390fd5b6125478c8c8c8c611a79565b9350612572600860008681526020019081526020016000206000015488611dae90919063ffffffff16565b915060008214156125b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125af90614584565b60405180910390fd5b8660086000868152602001908152602001600020600001819055506125dd8c8b611e48565b600760008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692507f0d1cb77d1fe491f98926195d0b885509da18bc305dd1489f45610237d971ed46848d8d8d8d8c60405161267b96959493929190614251565b60405180910390a150985098509895505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f990614504565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561278e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278590614704565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051612816929190614078565b60405180910390a150565b60008082840190508381101561286c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612863906146e4565b60405180910390fd5b8091505092915050565b600081116128b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b0906144c4565b60405180910390fd5b60006128ce8284611dae90919063ffffffff16565b905060008111612913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290a90614664565b60405180910390fd5b61291f86868684612005565b6129338661292c87611b75565b8685612005565b505050505050565b600060606040518060200161294f90612e8b565b6020820181038252601f19601f820116604052509050600060ff60f81b308584805190602001206040516020016129899493929190613fbb565b6040516020818303038152906040528051906020012090508060001c92505050919050565b6000816040516129bd90612e8b565b8190604051809103906000f59050801580156129dd573d6000803e3d6000fd5b509050919050565b600080600090506129f4612d78565b15612a6d576000836000369050039050612a6560003683906014850192612a1d9392919061483b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612e25565b915050612a71565b3390505b80915050919050565b6000838311158290612ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ab991906144a2565b60405180910390fd5b5082840390509392505050565b60008060009050604183511415612b805760008060006020860151925060408601519150606086015160001a9050601b8160ff161015612b1057601b810190505b601b8160ff161480612b255750601c8160ff16145b15612b7c5760018782858560405160008152602001604052604051612b4d9493929190614427565b6020604051602081039080840390855afa158015612b6f573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b6060600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612bfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf390614544565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290614684565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612cda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd1906144e4565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633f579f428585856040518463ffffffff1660e01b8152600401612d17939291906141dd565b600060405180830381600087803b158015612d3157600080fd5b505af1158015612d45573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d6e91906134ae565b9050949350505050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612e1e57602c60003690501015612e19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e10906145a4565b60405180910390fd5b600190505b8091505090565b6000806014835114612e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e6390614744565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b6103f780614aaf83390190565b600081359050612ea781614a24565b92915050565b60008083601f840112612ebf57600080fd5b8235905067ffffffffffffffff811115612ed857600080fd5b602083019150836020820283011115612ef057600080fd5b9250929050565b600081519050612f0681614a3b565b92915050565b600081359050612f1b81614a52565b92915050565b60008083601f840112612f3357600080fd5b8235905067ffffffffffffffff811115612f4c57600080fd5b602083019150836001820283011115612f6457600080fd5b9250929050565b600082601f830112612f7c57600080fd5b8151612f8f612f8a826147cc565b61479f565b91508082526020830160208301858383011115612fab57600080fd5b612fb683828461499b565b50505092915050565b600081359050612fce81614a69565b92915050565b600081359050612fe381614a80565b92915050565b600060608284031215612ffb57600080fd5b613005606061479f565b9050600061301584828501612e98565b600083015250602061302984828501612e98565b602083015250604061303d848285016130e5565b60408301525092915050565b600060c0828403121561305b57600080fd5b61306560c061479f565b9050600061307584828501612e98565b600083015250602061308984828501612e98565b602083015250604061309d84828501612e98565b60408301525060606130b184828501612f0c565b60608301525060806130c5848285016130e5565b60808301525060a06130d9848285016130e5565b60a08301525092915050565b6000813590506130f481614a97565b92915050565b60008151905061310981614a97565b92915050565b60006020828403121561312157600080fd5b600061312f84828501612e98565b91505092915050565b6000806040838503121561314b57600080fd5b600061315985828601612e98565b925050602061316a85828601612e98565b9150509250929050565b6000806000806080858703121561318a57600080fd5b600061319887828801612e98565b94505060206131a987828801612e98565b93505060406131ba87828801612e98565b92505060606131cb87828801612f0c565b91505092959194509250565b600080600080600080600080600060e08a8c0312156131f557600080fd5b60006132038c828d01612e98565b99505060206132148c828d01612e98565b98505060406132258c828d01612f0c565b97505060606132368c828d016130e5565b96505060806132478c828d016130e5565b95505060a08a013567ffffffffffffffff81111561326457600080fd5b6132708c828d01612f21565b945094505060c08a013567ffffffffffffffff81111561328f57600080fd5b61329b8c828d01612f21565b92509250509295985092959850929598565b6000806000806000806000806000806101008b8d0312156132cd57600080fd5b60006132db8d828e01612e98565b9a505060206132ec8d828e01612e98565b99505060406132fd8d828e01612f0c565b985050606061330e8d828e016130e5565b975050608061331f8d828e016130e5565b96505060a06133308d828e016130e5565b95505060c08b013567ffffffffffffffff81111561334d57600080fd5b6133598d828e01612f21565b945094505060e08b013567ffffffffffffffff81111561337857600080fd5b6133848d828e01612f21565b92509250509295989b9194979a5092959850565b600080600080606085870312156133ae57600080fd5b60006133bc87828801612e98565b94505060206133cd878288016130e5565b935050604085013567ffffffffffffffff8111156133ea57600080fd5b6133f687828801612f21565b925092505092959194509250565b60006020828403121561341657600080fd5b600061342484828501612ef7565b91505092915050565b60006020828403121561343f57600080fd5b600061344d84828501612f0c565b91505092915050565b60008060006040848603121561346b57600080fd5b600061347986828701612f0c565b935050602084013567ffffffffffffffff81111561349657600080fd5b6134a286828701612f21565b92509250509250925092565b6000602082840312156134c057600080fd5b600082015167ffffffffffffffff8111156134da57600080fd5b6134e684828501612f6b565b91505092915050565b60008060008060008060008060006101008a8c03121561350e57600080fd5b600061351c8c828d01612fbf565b995050602061352d8c828d01612fd4565b985050604061353e8c828d016130e5565b97505060608a013567ffffffffffffffff81111561355b57600080fd5b6135678c828d01612ead565b9650965050608061357a8c828d01612e98565b94505060a061358b8c828d01612f0c565b93505060c061359c8c828d01612f0c565b92505060e06135ad8c828d01612f0c565b9150509295985092959850929598565b6000606082840312156135cf57600080fd5b60006135dd84828501612fe9565b91505092915050565b600060c082840312156135f857600080fd5b600061360684828501613049565b91505092915050565b60006020828403121561362157600080fd5b600061362f848285016130fa565b91505092915050565b6136418161491d565b82525050565b6136508161486e565b82525050565b6136676136628261486e565b6149ce565b82525050565b61367681614880565b82525050565b61368d6136888261488c565b6149e0565b82525050565b61369c816148b8565b82525050565b6136b36136ae826148b8565b6149ea565b82525050565b60006136c4826147f8565b6136ce818561480e565b93506136de81856020860161499b565b6136e781614a06565b840191505092915050565b6136fb8161492f565b82525050565b61370a81614953565b82525050565b600061371b82614803565b613725818561481f565b935061373581856020860161499b565b61373e81614a06565b840191505092915050565b600061375482614803565b61375e8185614830565b935061376e81856020860161499b565b80840191505092915050565b600061378760268361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964206465706f73697460008301527f2076616c756500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006137ed60268361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f2073656c6600000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061385360208361481f565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b6000613893602f8361481f565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b60006138f960258361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f203078300000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061395f602f8361481f565b91507f5061796d656e7452656769737472793a206465706f736974206578697420616c60008301527f72656164792072657175657374656400000000000000000000000000000000006020830152604082019050919050565b60006139c560268361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964207061796d656e7460008301527f2076616c756500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a2b60228361481f565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a91602b8361481f565b91507f5061796d656e7452656769737472793a206465706f7369742065786974206e6f60008301527f74207265717565737465640000000000000000000000000000000000000000006020830152604082019050919050565b6000613af7602d8361481f565b91507f5061796d656e7452656769737472793a204552433230546f6b656e207472616e60008301527f73666572207265766572746564000000000000000000000000000000000000006020830152604082019050919050565b6000613b5d60268361481f565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bc3601f8361481f565b91507f5061796d656e7452656769737472793a20696e76616c696420616d6f756e74006000830152602082019050919050565b6000613c0360248361481f565b91507f5061796d656e7452656769737472793a206465706f7369742065786974206c6f60008301527f636b6564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c6960278361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964207769746864726160008301527f772076616c7565000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ccf602c8361481f565b91507f4163636f756e74436f6e74726f6c6c65723a2063616e6e6f742073656e64207460008301527f6f20636f6e74726f6c6c657200000000000000000000000000000000000000006020830152604082019050919050565b6000613d3560298361481f565b91507f5061796d656e7452656769737472793a20696e76616c69642073656e6465722060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d9b601f8361481f565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613ddb601e8361481f565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000613e1b60208361481f565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000613e5b601b8361481f565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000613e9b601d8361481f565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000613edb602b8361481f565b91507f5061796d656e7452656769737472793a20696e76616c6964206775617264696160008301527f6e207369676e61747572650000000000000000000000000000000000000000006020830152604082019050919050565b613f3d81614906565b82525050565b613f4c81614910565b82525050565b6000613f5e8284613656565b60148201915081905092915050565b6000613f798287613656565b601482019150613f898286613656565b601482019150613f998285613656565b601482019150613fa982846136a2565b60208201915081905095945050505050565b6000613fc7828761367c565b600182019150613fd78286613656565b601482019150613fe782856136a2565b602082019150613ff782846136a2565b60208201915081905095945050505050565b60006140158286613749565b915061402182856136a2565b60208201915061403182846136a2565b602082019150819050949350505050565b60006020820190506140576000830184613647565b92915050565b60006020820190506140726000830184613638565b92915050565b600060408201905061408d6000830185613638565b61409a6020830184613647565b9392505050565b60006040820190506140b66000830185613647565b6140c36020830184613647565b9392505050565b60006060820190506140df6000830186613647565b6140ec6020830185613647565b6140f96040830184613647565b949350505050565b60006080820190506141166000830187613647565b6141236020830186613647565b6141306040830185613647565b61413d6060830184613f34565b95945050505050565b600060608201905061415b6000830186613647565b6141686020830185613647565b6141756040830184613f34565b949350505050565b60006060820190506141926000830186613647565b61419f6020830185613693565b6141ac6040830184613f34565b949350505050565b60006040820190506141c96000830185613647565b6141d66020830184613f34565b9392505050565b60006060820190506141f26000830186613647565b6141ff6020830185613f34565b818103604083015261421181846136b9565b9050949350505050565b6000602082019050614230600083018461366d565b92915050565b600060208201905061424b6000830184613693565b92915050565b600060c0820190506142666000830189613693565b6142736020830188613647565b6142806040830187613647565b61428d6060830186613647565b61429a6080830185613693565b6142a760a0830184613f34565b979650505050505050565b600060e0820190506142c7600083018a613693565b6142d46020830189613647565b6142e16040830188613647565b6142ee6060830187613647565b6142fb6080830186613693565b61430860a0830185613f34565b61431560c0830184613f34565b98975050505050505050565b60006080820190506143366000830187613693565b6143436020830186613647565b6143506040830185613647565b61435d6060830184613f34565b95945050505050565b600060c08201905061437b6000830189613693565b6143886020830188613693565b6143956040830187613693565b6143a26060830186613f34565b6143af6080830185613647565b6143bc60a0830184613693565b979650505050505050565b60006040820190506143dc6000830185613693565b6143e96020830184613f34565b9392505050565b60006060820190506144056000830186613693565b6144126020830185613f34565b61441f6040830184613f34565b949350505050565b600060808201905061443c6000830187613693565b6144496020830186613f43565b6144566040830185613693565b6144636060830184613693565b95945050505050565b600060208201905061448160008301846136f2565b92915050565b600060208201905061449c6000830184613701565b92915050565b600060208201905081810360008301526144bc8184613710565b905092915050565b600060208201905081810360008301526144dd8161377a565b9050919050565b600060208201905081810360008301526144fd816137e0565b9050919050565b6000602082019050818103600083015261451d81613846565b9050919050565b6000602082019050818103600083015261453d81613886565b9050919050565b6000602082019050818103600083015261455d816138ec565b9050919050565b6000602082019050818103600083015261457d81613952565b9050919050565b6000602082019050818103600083015261459d816139b8565b9050919050565b600060208201905081810360008301526145bd81613a1e565b9050919050565b600060208201905081810360008301526145dd81613a84565b9050919050565b600060208201905081810360008301526145fd81613aea565b9050919050565b6000602082019050818103600083015261461d81613b50565b9050919050565b6000602082019050818103600083015261463d81613bb6565b9050919050565b6000602082019050818103600083015261465d81613bf6565b9050919050565b6000602082019050818103600083015261467d81613c5c565b9050919050565b6000602082019050818103600083015261469d81613cc2565b9050919050565b600060208201905081810360008301526146bd81613d28565b9050919050565b600060208201905081810360008301526146dd81613d8e565b9050919050565b600060208201905081810360008301526146fd81613dce565b9050919050565b6000602082019050818103600083015261471d81613e0e565b9050919050565b6000602082019050818103600083015261473d81613e4e565b9050919050565b6000602082019050818103600083015261475d81613e8e565b9050919050565b6000602082019050818103600083015261477d81613ece565b9050919050565b60006020820190506147996000830184613f34565b92915050565b6000604051905081810181811067ffffffffffffffff821117156147c257600080fd5b8060405250919050565b600067ffffffffffffffff8211156147e357600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000808585111561484b57600080fd5b8386111561485857600080fd5b6001850283019150848603905094509492505050565b6000614879826148e6565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60006148cd8261486e565b9050919050565b60006148df8261486e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061492882614977565b9050919050565b600061493a82614941565b9050919050565b600061494c826148e6565b9050919050565b600061495e82614965565b9050919050565b6000614970826148e6565b9050919050565b600061498282614989565b9050919050565b6000614994826148e6565b9050919050565b60005b838110156149b957808201518184015260208101905061499e565b838111156149c8576000848401525b50505050565b60006149d9826149f4565b9050919050565b6000819050919050565b6000819050919050565b60006149ff82614a17565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b614a2d8161486e565b8114614a3857600080fd5b50565b614a4481614880565b8114614a4f57600080fd5b50565b614a5b816148b8565b8114614a6657600080fd5b50565b614a72816148c2565b8114614a7d57600080fd5b50565b614a89816148d4565b8114614a9457600080fd5b50565b614aa081614906565b8114614aab57600080fd5b5056fe6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103a4806100536000396000f3fe60806040526004361061002d5760003560e01c80633f579f4214610039578063f77c47911461016257610034565b3661003457005b600080fd5b34801561004557600080fd5b506100e76004803603606081101561005c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100a357600080fd5b8201836020820111156100b557600080fd5b803590602001918460018302840111640100000000831117156100d757600080fd5b90919293919293905050506101a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012757808201518184015260208101905061010c565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016e57600080fd5b50610177610347565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061036c602c913960400191505060405180910390fd5b606060008673ffffffffffffffffffffffffffffffffffffffff1686868660405180838380828437808301925050509250505060006040518083038185875af1925050503d80600081146102b9576040519150601f19603f3d011682016040523d82523d6000602084013e6102be565b606091505b5080935081925050508061033a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4163636f756e743a207472616e73616374696f6e20726576657274656400000081525060200191505060405180910390fd5b8192505050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fe436f6e74726f6c6c65643a206d73672e73656e646572206973206e6f742074686520636f6e74726f6c6c6572a164736f6c634300060c000a536166654d6174684c69623a207375627472616374696f6e206f766572666c6f77a164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "details": "the `DepositExit` process can be used in a case operator (guardian) couldn't sign commit / withdrawal message. Process will be rejected when any of senders channels will be committed.",
    "events": {
      "DepositAccountDeployed(address,address)": {
        "details": "Emitted when the deposit account is deployed",
        "params": {
          "depositAccount": "deposit account address",
          "owner": "owner address"
        }
      },
      "DepositExitCompleted(address,address,address,uint256)": {
        "details": "Emitted when the deposit exist is completed",
        "params": {
          "amount": "deposit exist amount",
          "depositAccount": "deposit account address",
          "owner": "owner address",
          "token": "token address"
        }
      },
      "DepositExitRejected(address,address,address)": {
        "details": "Emitted when the deposit exist is rejected",
        "params": {
          "depositAccount": "deposit account address",
          "owner": "owner address",
          "token": "token address"
        }
      },
      "DepositExitRequested(address,address,address,uint256)": {
        "details": "Emitted when the deposit exist is requested",
        "params": {
          "depositAccount": "deposit account address",
          "lockedUntil": "deposit exist locked util time",
          "owner": "owner address",
          "token": "token address"
        }
      },
      "DepositWithdrawn(address,address,address,uint256)": {
        "details": "Emitted when the deposit has been withdrawn",
        "params": {
          "amount": "withdrawn amount",
          "depositAccount": "deposit account address",
          "owner": "owner address",
          "token": "token address"
        }
      },
      "PaymentChannelCommitted(bytes32,address,address,address,bytes32,uint256)": {
        "details": "Emitted when the payment channel has been committed",
        "params": {
          "amount": "committed amount",
          "hash": "channel hash",
          "recipient": "recipient address",
          "sender": "sender address",
          "token": "token address",
          "uid": "unique channel id"
        }
      },
      "PaymentDeposited(bytes32,uint256)": {
        "details": "Emitted when the payment has been deposited",
        "params": {
          "channelHash": "channel hash",
          "value": "payment value"
        }
      },
      "PaymentSplit(bytes32,uint256,uint256)": {
        "details": "Emitted when the payment has been withdrawn and deposited (split)",
        "params": {
          "channelHash": "channel hash",
          "depositValue": "payment deposited value",
          "totalValue": "payment total value"
        }
      },
      "PaymentWithdrawn(bytes32,uint256)": {
        "details": "Emitted when the payment has been withdrawn",
        "params": {
          "channelHash": "channel hash",
          "value": "payment value"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)": {
        "params": {
          "amount": "amount to commit",
          "blockNumber": "block number",
          "guardianSignature": "guardian signature",
          "sender": "sender address",
          "senderSignature": "sender signature",
          "token": "token address",
          "uid": "unique channel id"
        }
      },
      "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)": {
        "params": {
          "amount": "amount to commit",
          "blockNumber": "block number",
          "depositPaymentValue": "amount to deposit",
          "guardianSignature": "guardian signature",
          "sender": "sender address",
          "senderSignature": "sender signature",
          "token": "token address",
          "uid": "unique channel id"
        }
      },
      "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)": {
        "params": {
          "amount": "amount to commit",
          "blockNumber": "block number",
          "guardianSignature": "guardian signature",
          "sender": "sender address",
          "senderSignature": "sender signature",
          "token": "token address",
          "uid": "unique channel id"
        }
      },
      "computeDepositAccountAddress(address)": {
        "params": {
          "owner": "owner address"
        },
        "returns": {
          "_0": "deposit account address"
        }
      },
      "computePaymentChannelHash(address,address,address,bytes32)": {
        "params": {
          "recipient": "recipient address",
          "sender": "sender address",
          "token": "token address",
          "uid": "unique channel id"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "deployDepositAccount(address)": {
        "params": {
          "owner": "owner address"
        }
      },
      "getDepositExitLockedUntil(address,address)": {
        "params": {
          "owner": "owner address",
          "token": "token address"
        },
        "returns": {
          "_0": "locked until time"
        }
      },
      "getDepositWithdrawnAmount(address,address)": {
        "params": {
          "owner": "owner address",
          "token": "token address"
        },
        "returns": {
          "_0": "withdrawn amount"
        }
      },
      "getPaymentChannelCommittedAmount(bytes32)": {
        "params": {
          "hash": "payment channel hash"
        },
        "returns": {
          "_0": "committed amount"
        }
      },
      "hashDepositWithdrawal((address,address,uint256))": {
        "params": {
          "depositWithdrawal": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "hashPaymentChannelCommit((address,address,address,bytes32,uint256,uint256))": {
        "params": {
          "paymentChannelCommit": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address,uint256,address[],address,bytes32,bytes32,bytes32)": {
        "params": {
          "depositExitLockPeriod_": "deposit exit lock period",
          "externalAccountRegistry_": "`ExternalAccountRegistry` contract address",
          "gateway_": "`Gateway` contract address",
          "guardians_": "array of guardians addresses",
          "personalAccountRegistry_": "`PersonalAccountRegistry` contract address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isDepositAccountDeployed(address)": {
        "params": {
          "owner": "owner address"
        },
        "returns": {
          "_0": "true when deposit account is deployed"
        }
      },
      "isGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        },
        "returns": {
          "_0": "true when guardian exists"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "processDepositExit(address)": {
        "params": {
          "token": "token address"
        }
      },
      "removeGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "requestDepositExit(address)": {
        "params": {
          "token": "token address"
        }
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "params": {
          "messageHash": "message hash",
          "signature": "signature"
        },
        "returns": {
          "_0": "true on correct guardian signature"
        }
      },
      "withdrawDeposit(address,uint256,bytes)": {
        "params": {
          "amount": "amount to withdraw",
          "guardianSignature": "guardian signature",
          "token": "token address"
        }
      }
    },
    "title": "Payment registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Adds a new guardian"
      },
      "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)": {
        "notice": "Commits payment channel and deposit payment"
      },
      "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)": {
        "notice": "Commits payment channel, withdraws and deposits (split) payment"
      },
      "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)": {
        "notice": "Commits payment channel and withdraw payment"
      },
      "computeDepositAccountAddress(address)": {
        "notice": "Computes deposit account address"
      },
      "computePaymentChannelHash(address,address,address,bytes32)": {
        "notice": "Computes payment channel hash"
      },
      "deployDepositAccount(address)": {
        "notice": "Deploys deposit account"
      },
      "getDepositExitLockedUntil(address,address)": {
        "notice": "Gets deposit exit locked until time"
      },
      "getDepositWithdrawnAmount(address,address)": {
        "notice": "Gets deposit withdrawn amount"
      },
      "getPaymentChannelCommittedAmount(bytes32)": {
        "notice": "Gets payment channel committed amount"
      },
      "hashDepositWithdrawal((address,address,uint256))": {
        "notice": "Hashes `DepositWithdrawal` typed data"
      },
      "hashPaymentChannelCommit((address,address,address,bytes32,uint256,uint256))": {
        "notice": "Hashes `PaymentChannelCommit` typed data"
      },
      "initialize(address,address,uint256,address[],address,bytes32,bytes32,bytes32)": {
        "notice": "Initialize `PaymentRegistry` contract"
      },
      "isDepositAccountDeployed(address)": {
        "notice": "Checks if deposit account is deployed"
      },
      "isGuardian(address)": {
        "notice": "Check if guardian exists"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "processDepositExit(address)": {
        "notice": "Processes deposit exit"
      },
      "removeGuardian(address)": {
        "notice": "Removes the existing guardian"
      },
      "requestDepositExit(address)": {
        "notice": "Requests deposit exit"
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "notice": "Verifies guardian signature"
      },
      "withdrawDeposit(address,uint256,bytes)": {
        "notice": "Withdraws deposit"
      }
    },
    "notice": "A registry for payment and payment channels",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "guardians",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 824,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1252,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3150,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "gateway",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3381,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "externalAccountRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ExternalAccountRegistry)2481"
      },
      {
        "astId": 3383,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "personalAccountRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PersonalAccountRegistry)5170"
      },
      {
        "astId": 3385,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "depositExitLockPeriod",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3389,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "deposits",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Deposit)3343_storage)"
      },
      {
        "astId": 3393,
        "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
        "label": "paymentChannels",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(PaymentChannel)3346_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ExternalAccountRegistry)2481": {
        "encoding": "inplace",
        "label": "contract ExternalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(PersonalAccountRegistry)5170": {
        "encoding": "inplace",
        "label": "contract PersonalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Deposit)3343_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PaymentRegistry.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)3343_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(PaymentChannel)3346_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaymentRegistry.PaymentChannel)",
        "numberOfBytes": "32",
        "value": "t_struct(PaymentChannel)3346_storage"
      },
      "t_struct(Deposit)3343_storage": {
        "encoding": "inplace",
        "label": "struct PaymentRegistry.Deposit",
        "members": [
          {
            "astId": 3334,
            "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3338,
            "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
            "label": "withdrawnAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 3342,
            "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
            "label": "exitLockedUntil",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PaymentChannel)3346_storage": {
        "encoding": "inplace",
        "label": "struct PaymentRegistry.PaymentChannel",
        "members": [
          {
            "astId": 3345,
            "contract": "src/payment/PaymentRegistry.sol:PaymentRegistry",
            "label": "committedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}