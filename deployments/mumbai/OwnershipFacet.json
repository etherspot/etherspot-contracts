{
  "address": "0x4e0BaFA6f2a4299f4b19b31250970fAdA52a9515",
  "abi": [
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "solcInputHash": "72cddffebd41bee705239522b76dca2d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"owner_\":\"The address of the owner.\"}},\"transferOwnership(address)\":{\"details\":\"Set _newOwner to address(0) to renounce any ownership.\",\"params\":{\"_newOwner\":\"The address of the new owner of the contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Get the address of the owner\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bridges/facets/OwnershipFacet.sol\":\"OwnershipFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/bridges/facets/OwnershipFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport { LibDiamond } from \\\"../libs/LibDiamond.sol\\\";\\r\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\r\\n\\r\\ncontract OwnershipFacet is IERC173 {\\r\\n  function transferOwnership(address _newOwner) external override {\\r\\n    LibDiamond.enforceIsContractOwner();\\r\\n    LibDiamond.setContractOwner(_newOwner);\\r\\n  }\\r\\n\\r\\n  function owner() external view override returns (address owner_) {\\r\\n    owner_ = LibDiamond.contractOwner();\\r\\n  }\\r\\n}\",\"keccak256\":\"0xf4b7583bdfaa8bf43804c083b0e2cf5a264e6c8ad6aec78620139cfcf78b72ef\",\"license\":\"MIT\"},\"src/bridges/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {\\r\\n        Add,\\r\\n        Replace,\\r\\n        Remove\\r\\n    }\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x328c89b6fa5bae672416dbfc8b15837f6764895e563675d550edc33c706ad948\",\"license\":\"MIT\"},\"src/bridges/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\n/// @title ERC-173 Contract Ownership Standard\\r\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\r\\n/* is ERC165 */\\r\\ninterface IERC173 {\\r\\n  /// @notice Get the address of the owner\\r\\n  /// @return owner_ The address of the owner.\\r\\n  function owner() external view returns (address owner_);\\r\\n\\r\\n  /// @notice Set the address of the new owner of the contract\\r\\n  /// @dev Set _newOwner to address(0) to renounce any ownership.\\r\\n  /// @param _newOwner The address of the new owner of the contract\\r\\n  function transferOwnership(address _newOwner) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3116cc31ad82064930699927badba20f0dc39efa71533bbc330691c55b3bfd0\",\"license\":\"MIT\"},\"src/bridges/libs/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\nlibrary LibDiamond {\\r\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage()\\r\\n        internal\\r\\n        pure\\r\\n        returns (DiamondStorage storage ds)\\r\\n    {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(\\r\\n            msg.sender == diamondStorage().contractOwner,\\r\\n            \\\"LibDiamond: Must be contract owner\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    event DiamondCut(\\r\\n        IDiamondCut.FacetCut[] _diamondCut,\\r\\n        address _init,\\r\\n        bytes _calldata\\r\\n    );\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (\\r\\n            uint256 facetIndex;\\r\\n            facetIndex < _diamondCut.length;\\r\\n            facetIndex++\\r\\n        ) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(\\r\\n                    _diamondCut[facetIndex].facetAddress,\\r\\n                    _diamondCut[facetIndex].functionSelectors\\r\\n                );\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(\\r\\n                    _diamondCut[facetIndex].facetAddress,\\r\\n                    _diamondCut[facetIndex].functionSelectors\\r\\n                );\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(\\r\\n                    _diamondCut[facetIndex].facetAddress,\\r\\n                    _diamondCut[facetIndex].functionSelectors\\r\\n                );\\r\\n            } else {\\r\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(\\r\\n        address _facetAddress,\\r\\n        bytes4[] memory _functionSelectors\\r\\n    ) internal {\\r\\n        require(\\r\\n            _functionSelectors.length > 0,\\r\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\r\\n        );\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(\\r\\n            _facetAddress != address(0),\\r\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\r\\n        );\\r\\n        uint96 selectorPosition = uint96(\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\r\\n        );\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (\\r\\n            uint256 selectorIndex;\\r\\n            selectorIndex < _functionSelectors.length;\\r\\n            selectorIndex++\\r\\n        ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds\\r\\n                .selectorToFacetAndPosition[selector]\\r\\n                .facetAddress;\\r\\n            require(\\r\\n                oldFacetAddress == address(0),\\r\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\r\\n            );\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(\\r\\n        address _facetAddress,\\r\\n        bytes4[] memory _functionSelectors\\r\\n    ) internal {\\r\\n        require(\\r\\n            _functionSelectors.length > 0,\\r\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\r\\n        );\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(\\r\\n            _facetAddress != address(0),\\r\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\r\\n        );\\r\\n        uint96 selectorPosition = uint96(\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\r\\n        );\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (\\r\\n            uint256 selectorIndex;\\r\\n            selectorIndex < _functionSelectors.length;\\r\\n            selectorIndex++\\r\\n        ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds\\r\\n                .selectorToFacetAndPosition[selector]\\r\\n                .facetAddress;\\r\\n            require(\\r\\n                oldFacetAddress != _facetAddress,\\r\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\r\\n            );\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(\\r\\n        address _facetAddress,\\r\\n        bytes4[] memory _functionSelectors\\r\\n    ) internal {\\r\\n        require(\\r\\n            _functionSelectors.length > 0,\\r\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\r\\n        );\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(\\r\\n            _facetAddress == address(0),\\r\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\r\\n        );\\r\\n        for (\\r\\n            uint256 selectorIndex;\\r\\n            selectorIndex < _functionSelectors.length;\\r\\n            selectorIndex++\\r\\n        ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds\\r\\n                .selectorToFacetAndPosition[selector]\\r\\n                .facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\r\\n        internal\\r\\n    {\\r\\n        enforceHasContractCode(\\r\\n            _facetAddress,\\r\\n            \\\"LibDiamondCut: New facet has no code\\\"\\r\\n        );\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\r\\n            .facetAddresses\\r\\n            .length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n    function addFunction(\\r\\n        DiamondStorage storage ds,\\r\\n        bytes4 _selector,\\r\\n        uint96 _selectorPosition,\\r\\n        address _facetAddress\\r\\n    ) internal {\\r\\n        ds\\r\\n            .selectorToFacetAndPosition[_selector]\\r\\n            .functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\r\\n            _selector\\r\\n        );\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(\\r\\n        DiamondStorage storage ds,\\r\\n        address _facetAddress,\\r\\n        bytes4 _selector\\r\\n    ) internal {\\r\\n        require(\\r\\n            _facetAddress != address(0),\\r\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\r\\n        );\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(\\r\\n            _facetAddress != address(this),\\r\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\r\\n        );\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds\\r\\n            .selectorToFacetAndPosition[_selector]\\r\\n            .functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds\\r\\n            .facetFunctionSelectors[_facetAddress]\\r\\n            .functionSelectors\\r\\n            .length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds\\r\\n                .facetFunctionSelectors[_facetAddress]\\r\\n                .functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\r\\n                    selectorPosition\\r\\n                ] = lastSelector;\\r\\n            ds\\r\\n                .selectorToFacetAndPosition[lastSelector]\\r\\n                .functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds\\r\\n                .facetFunctionSelectors[_facetAddress]\\r\\n                .facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[\\r\\n                    lastFacetAddressPosition\\r\\n                ];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds\\r\\n                    .facetFunctionSelectors[lastFacetAddress]\\r\\n                    .facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds\\r\\n                .facetFunctionSelectors[_facetAddress]\\r\\n                .facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\r\\n        internal\\r\\n    {\\r\\n        if (_init == address(0)) {\\r\\n            require(\\r\\n                _calldata.length == 0,\\r\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _calldata.length > 0,\\r\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\r\\n            );\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(\\r\\n                    _init,\\r\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\r\\n                );\\r\\n            }\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(\\r\\n        address _contract,\\r\\n        string memory _errorMessage\\r\\n    ) internal view {\\r\\n        uint256 contractSize;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3edf6c990e9b8e885c9c7fb000d182fc1a4fe6466ada506197a77b8e536ff657\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b610043610075565b60405161005091906102ab565b60405180910390f35b610073600480360381019061006e91906102f7565b610084565b005b600061007f610098565b905090565b61008c6100cb565b61009581610166565b50565b60006100a261023d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100d361023d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b906103a7565b60405180910390fd5b565b600061017061023d565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102958261026a565b9050919050565b6102a58161028a565b82525050565b60006020820190506102c0600083018461029c565b92915050565b600080fd5b6102d48161028a565b81146102df57600080fd5b50565b6000813590506102f1816102cb565b92915050565b60006020828403121561030d5761030c6102c6565b5b600061031b848285016102e2565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000610391602283610324565b915061039c82610335565b604082019050919050565b600060208201905081810360008301526103c081610384565b905091905056fea164736f6c634300080f000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610059575b600080fd5b610043610075565b60405161005091906102ab565b60405180910390f35b610073600480360381019061006e91906102f7565b610084565b005b600061007f610098565b905090565b61008c6100cb565b61009581610166565b50565b60006100a261023d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100d361023d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015b906103a7565b60405180910390fd5b565b600061017061023d565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102958261026a565b9050919050565b6102a58161028a565b82525050565b60006020820190506102c0600083018461029c565b92915050565b600080fd5b6102d48161028a565b81146102df57600080fd5b50565b6000813590506102f1816102cb565b92915050565b60006020828403121561030d5761030c6102c6565b5b600061031b848285016102e2565b91505092915050565b600082825260208201905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b6000610391602283610324565b915061039c82610335565b604082019050919050565b600060208201905081810360008301526103c081610384565b905091905056fea164736f6c634300080f000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "returns": {
          "owner_": "The address of the owner."
        }
      },
      "transferOwnership(address)": {
        "details": "Set _newOwner to address(0) to renounce any ownership.",
        "params": {
          "_newOwner": "The address of the new owner of the contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Get the address of the owner"
      },
      "transferOwnership(address)": {
        "notice": "Set the address of the new owner of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}