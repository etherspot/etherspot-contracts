{
  "address": "0x2dcF821442205b7550bDBDb7DABF6c547a86e92d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "NodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "label",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ENSController.SubNodeRegistration",
          "name": "subNodeRegistration",
          "type": "tuple"
        }
      ],
      "name": "hashSubNodeRegistration",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "guardians_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "registerSubNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGuardianSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x481aada1862ca7e18e46c7e32ffb70c4c58ecb213ecc43d4967c07439a98a8cf",
  "receipt": {
    "to": null,
    "from": "0xae32631bdbb2474CC11594268427A2da3D6aBd6B",
    "contractAddress": "0x2dcF821442205b7550bDBDb7DABF6c547a86e92d",
    "transactionIndex": 0,
    "gasUsed": "1034009",
    "logsBloom": "0x
    "blockHash": "0xcb120588be0a212788f569427cf4f06516a6f0ec97dca46b4163a8178efb5b71",
    "transactionHash": "0x481aada1862ca7e18e46c7e32ffb70c4c58ecb213ecc43d4967c07439a98a8cf",
    "logs": [],
    "blockNumber": 1030,
    "cumulativeGasUsed": "1034009",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d3df566cd311e2cad327d1b461b99b1b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"NodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"internalType\":\"struct ENSController.SubNodeRegistration\",\"name\":\"subNodeRegistration\",\"type\":\"tuple\"}],\"name\":\"hashSubNodeRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardians_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"registerSubNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGuardianSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"public constructor\"}},\"title\":\"ENSController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ens/ENSController.sol\":\"ENSController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  event GuardianAdded(\\n    address guardian\\n  );\\n\\n  event GuardianRemoved(\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  modifier onlyGuardian() {\\n    require(\\n      guardians[msg.sender]\\n    );\\n\\n    _;\\n  }\\n\\n  // external functions\\n\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      msg.sender != guardian\\n    );\\n\\n    require(\\n      guardians[guardian]\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      guardians[msg.sender] = true;\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0)\\n    );\\n\\n    require(\\n      !guardians[guardian]\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(guardian);\\n  }\\n}\\n\",\"keccak256\":\"0xe496b3b2b919de467bec38314083aca7ef7608a455ca0e7bf40ee6d5d511d21e\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title BytesLib\\n */\\nlibrary BytesLib {\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x3b36d35d5b97b9fec4f158fa57871ed45a7e608fa141581148085a540630f57c\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignatureLib\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x7ad3bad268bc2fa44dfbca8230262b73b27e8646d5dde6d6d10b860a29a7424b\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title Initializable\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  event Initialized();\\n\\n  // modifiers\\n\\n  modifier onlyInitializer() {\\n    require(\\n      msg.sender == initializer\\n    );\\n\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized();\\n  }\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    initializer = msg.sender;\\n  }\\n\\n   // external functions (views)\\n\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0xeec4c2a5753b5991d956ea10a067553a8e7303f00b49ef6a535a7b06d0dd25d4\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title TypedDataContainer\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x85483e6032998bb02482ca00ad153415870ac773253b4c647e8a82c4eb038924\",\"license\":\"MIT\"},\"src/ens/ENSController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\nimport \\\"./ENSRegistry.sol\\\";\\n\\n/**\\n * @title ENSController\\n */\\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient {\\n  struct Node {\\n    address addr;\\n  }\\n\\n  struct SubNodeRegistration {\\n    address account;\\n    bytes32 node;\\n    bytes32 label;\\n  }\\n\\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\\n    \\\"SubNodeRegistration(address account,bytes32 node,bytes32 label)\\\"\\n  );\\n\\n  bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\\n  bytes4 private constant INTERFACE_ADDR_ID = 0x3b3b57de;\\n\\n  ENSRegistry public registry;\\n\\n  mapping(bytes32 => Node) private nodes;\\n\\n  // events\\n\\n  event AddrChanged(\\n    bytes32 indexed node,\\n    address addr\\n  );\\n\\n  event NodeAdded(\\n    bytes32 node\\n  );\\n\\n  event RegistryChanged(\\n    address registry\\n  );\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  function initialize(\\n    ENSRegistry registry_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      address(registry_) != address(0)\\n    );\\n\\n    registry = registry_;\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  function setRegistry(\\n    ENSRegistry registry_\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      address(registry_) != address(0)\\n    );\\n\\n    require(\\n      registry_ != registry\\n    );\\n\\n    registry = registry_;\\n\\n    emit RegistryChanged(\\n      address(registry)\\n    );\\n  }\\n\\n  function addNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    require(\\n      nodes[node].addr == address(0)\\n    );\\n\\n    require(\\n      registry.owner(node) == address(this)\\n    );\\n\\n    nodes[node].addr = address(this);\\n\\n    emit NodeAdded(node);\\n  }\\n\\n  function setAddr(\\n    bytes32 node,\\n    address addr\\n  )\\n    external\\n  {\\n    require(\\n      nodes[node].addr == _getContextAccount()\\n    );\\n\\n    nodes[node].addr = addr;\\n\\n    emit AddrChanged(node, addr);\\n  }\\n\\n  function registerSubNode(\\n    bytes32 node,\\n    bytes32 label,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature)\\n    );\\n\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      nodes[node].addr == address(this)\\n    );\\n\\n    require(\\n      nodes[subNode].addr == address(0)\\n    );\\n\\n    nodes[subNode].addr = account;\\n\\n    registry.setSubnodeOwner(node, label, address(this));\\n    registry.setResolver(subNode, address(this));\\n    registry.setOwner(subNode, account);\\n\\n    emit AddrChanged(subNode, account);\\n  }\\n\\n  // external functions (views)\\n\\n  function addr(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return nodes[node].addr;\\n  }\\n\\n  // external functions (pure)\\n\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  )\\n    external\\n    pure\\n    returns (bool)\\n  {\\n    return (\\n      interfaceID == INTERFACE_META_ID ||\\n      interfaceID == INTERFACE_ADDR_ID\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  function hashSubNodeRegistration(\\n    SubNodeRegistration memory subNodeRegistration\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        subNodeRegistration.account,\\n        subNodeRegistration.node,\\n        subNodeRegistration.label\\n      )\\n    );\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    bytes32 node,\\n    bytes32 label\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      SUB_NODE_REGISTRATION_TYPE_HASH,\\n      account,\\n      node,\\n      label\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x551205f024ae4c0a0f8d3c11919c97ad593da7af8150f44554495727317b357d\",\"license\":\"MIT\"},\"src/ens/ENSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title ENSRegistry\\n */\\ncontract ENSRegistry {\\n  struct Record {\\n    address owner;\\n    address resolver;\\n    uint64 ttl;\\n  }\\n\\n  mapping(bytes32 => Record) private records;\\n\\n  // events\\n\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n  // modifiers\\n\\n  modifier onlyNodeOwner(\\n    bytes32 node\\n  ) {\\n    require(\\n      records[node].owner == msg.sender\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n  {\\n    records[0x0].owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].owner = owner;\\n\\n    emit Transfer(node, owner);\\n  }\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    records[subNode].owner = owner;\\n\\n    emit NewOwner(node, label, owner);\\n  }\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].resolver = resolver;\\n\\n    emit NewResolver(node, resolver);\\n  }\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].ttl = ttl;\\n\\n    emit NewTTL(node, ttl);\\n  }\\n\\n  // external functions (views)\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].owner;\\n  }\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].resolver;\\n  }\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (uint64)\\n  {\\n    return records[node].ttl;\\n  }\\n}\\n\",\"keccak256\":\"0x080ffc62d0ac4417453c6fb8a26a1acc917421a01290577c7f23e80b251a73cc\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title GatewayRecipient\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x56513e7384f04ac487964a92152a87d22ed38d76a26f210b9da56627af117280\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b0319163317905561115c806100326000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636df0cf4211610097578063a91ee0dc11610066578063a91ee0dc146101fa578063bd106a021461020d578063d0f710d614610215578063d5fa2b001461022857610100565b80636df0cf42146101ac57806371404156146101cc5780637b103999146101df578063a526d83b146101e757610100565b80633b3b57de116100d35780633b3b57de1461015e57806346386f73146101715780635773fd1d1461018657806361fc6d1f1461019957610100565b806301ffc9a7146101055780630c68ba211461012e578063116191b614610141578063392e53cd14610156575b600080fd5b610118610113366004610ebb565b61023b565b6040516101259190611055565b60405180910390f35b61011861013c366004610da1565b610272565b610149610290565b6040516101259190611041565b61011861029f565b61014961016c366004610dd9565b6102af565b61018461017f366004610e20565b6102ca565b005b610184610194366004610ee3565b61053b565b6101846101a7366004610dd9565b61060f565b6101bf6101ba366004610f92565b61071e565b6040516101259190611060565b6101846101da366004610da1565b61073a565b6101496107e1565b6101846101f5366004610da1565b6107f0565b610184610208366004610da1565b610818565b6101bf6108b3565b610118610223366004610e71565b6108b9565b610184610236366004610df1565b610903565b60006001600160e01b031982166301ffc9a760e01b148061026c57506001600160e01b03198216631d9dabef60e11b145b92915050565b6001600160a01b031660009081526020819052604090205460ff1690565b6003546001600160a01b031681565b6001546001600160a01b03161590565b6000908152600560205260409020546001600160a01b031690565b60006102d4610996565b905060006102eb6102e68388886109a7565b6109ff565b905061032d8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a4f92505050565b61033657600080fd5b6000868660405160200161034b929190610fef565b60408051601f19818403018152918152815160209283012060008a815260059093529120549091506001600160a01b0316301461038757600080fd5b6000818152600560205260409020546001600160a01b0316156103a957600080fd5b6000818152600560205260409081902080546001600160a01b0319166001600160a01b03868116919091179091556004805492516306ab592360e01b815292909116916306ab592391610402918b918b913091016110a4565b600060405180830381600087803b15801561041c57600080fd5b505af1158015610430573d6000803e3d6000fd5b505060048054604051630c4b7b8560e11b81526001600160a01b039091169350631896f70a9250610465918591309101611069565b600060405180830381600087803b15801561047f57600080fd5b505af1158015610493573d6000803e3d6000fd5b505060048054604051635b0fc9c360e01b81526001600160a01b039091169350635b0fc9c392506104c8918591889101611069565b600060405180830381600087803b1580156104e257600080fd5b505af11580156104f6573d6000803e3d6000fd5b50505050807f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd28460405161052a9190611041565b60405180910390a250505050505050565b6001546001600160a01b0316331461055257600080fd5b600180546001600160a01b03191690556001600160a01b03871661057557600080fd5b600480546001600160a01b0319166001600160a01b03891617905560408051602087810280830182019093528782526105c992899189918291850190849080828437600092019190915250610a7f92505050565b6105d284610ada565b6105dd838383610afc565b6040517f5daa87a0e9463431830481fd4b6e3403442dfb9a12b9c07597e9f61d50b633c890600090a150505050505050565b6000818152600560205260409020546001600160a01b03161561063157600080fd5b600480546040516302571be360e01b815230926001600160a01b03909216916302571be39161066291869101611060565b60206040518083038186803b15801561067a57600080fd5b505afa15801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b29190610dbd565b6001600160a01b0316146106c557600080fd5b6000818152600560205260409081902080546001600160a01b03191630179055517f9789a7ebab1e3d4a74f1c22b0ae2a212125ac931a6227e44d5a5a7aaf30dda7590610713908390611060565b60405180910390a150565b600061026c6102e68360000151846020015185604001516109a7565b3360009081526020819052604090205460ff1661075657600080fd5b336001600160a01b038216141561076c57600080fd5b6001600160a01b03811660009081526020819052604090205460ff1661079157600080fd5b6001600160a01b03811660009081526020819052604090819020805460ff19169055517fb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c5290610713908390611041565b6004546001600160a01b031681565b3360009081526020819052604090205460ff1661080c57600080fd5b61081581610b5a565b50565b3360009081526020819052604090205460ff1661083457600080fd5b6001600160a01b03811661084757600080fd5b6004546001600160a01b038281169116141561086257600080fd5b600480546001600160a01b0319166001600160a01b0383811691909117918290556040517fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc92610713921690611041565b60025481565b60006108fb8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a4f92505050565b949350505050565b61090b610996565b6000838152600560205260409020546001600160a01b0390811691161461093157600080fd5b6000828152600560205260409081902080546001600160a01b0319166001600160a01b0384161790555182907f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd29061098a908490611041565b60405180910390a25050565b60006109a26028610be6565b905090565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed8484846040516020016109e09493929190611080565b6040516020818303038152906040528051906020012090509392505050565b600060405180604001604052806002815260200161190160f01b81525060025483604051602001610a3293929190610ffd565b604051602081830303815290604052805190602001209050919050565b600080610a5c8484610c5b565b6001600160a01b031660009081526020819052604090205460ff16949350505050565b8051610aa457336000908152602081905260409020805460ff19166001179055610815565b805160005b81811015610ad557610acd838281518110610ac057fe5b6020026020010151610b5a565b600101610aa9565b505050565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6040514690610b39907fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647290869086908590309088906020016110c3565b60408051601f19818403018152919052805160209091012060025550505050565b6001600160a01b038116610b6d57600080fd5b6001600160a01b03811660009081526020819052604090205460ff1615610b9357600080fd5b6001600160a01b03811660009081526020819052604090819020805460ff19166001179055517f038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f96990610713908390611041565b600080610bf1610d00565b15610c53573683810390610c4b90610c1190601484019084906000611112565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d2e92505050565b91505061026c565b503392915050565b8051600090819060411415610cf95760208301516040840151606085015160001a601b811015610c8957601b015b8060ff16601b1480610c9e57508060ff16601c145b15610cf55760018782858560405160008152602001604052604051610cc694939291906110f4565b6020604051602081039080840390855afa158015610ce8573d6000803e3d6000fd5b5050506020604051035193505b5050505b9392505050565b60035460009081906001600160a01b03163314156109a257602c361015610d2657600080fd5b506001905090565b6000808251601414610d3f57600080fd5b505060200151600160601b900490565b803561026c8161113a565b60008083601f840112610d6b578182fd5b50813567ffffffffffffffff811115610d82578182fd5b602083019150836020828501011115610d9a57600080fd5b9250929050565b600060208284031215610db2578081fd5b8135610cf98161113a565b600060208284031215610dce578081fd5b8151610cf98161113a565b600060208284031215610dea578081fd5b5035919050565b60008060408385031215610e03578081fd5b823591506020830135610e158161113a565b809150509250929050565b60008060008060608587031215610e35578182fd5b8435935060208501359250604085013567ffffffffffffffff811115610e59578283fd5b610e6587828801610d5a565b95989497509550505050565b600080600060408486031215610e85578283fd5b83359250602084013567ffffffffffffffff811115610ea2578283fd5b610eae86828701610d5a565b9497909650939450505050565b600060208284031215610ecc578081fd5b81356001600160e01b031981168114610cf9578182fd5b600080600080600080600060c0888a031215610efd578283fd5b8735610f088161113a565b9650602088013567ffffffffffffffff80821115610f24578485fd5b818a0191508a601f830112610f37578485fd5b813581811115610f45578586fd5b8b60208083028501011115610f58578586fd5b602083019850809750505050610f718960408a01610d4f565b969995985093966060810135956080820135955060a0909101359350915050565b600060608284031215610fa3578081fd5b6040516060810181811067ffffffffffffffff82111715610fc2578283fd5b6040528235610fd08161113a565b8152602083810135908201526040928301359281019290925250919050565b918252602082015260400190565b60008451815b8181101561101d5760208188018101518583015201611003565b8181111561102b5782828501525b5091909101928352506020820152604001919050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b92835260208301919091526001600160a01b0316604082015260600190565b9586526020860194909452604085019290925260608401526001600160a01b0316608083015260a082015260c00190565b93845260ff9290921660208401526040830152606082015260800190565b60008085851115611121578182fd5b8386111561112d578182fd5b5050820193919092039150565b6001600160a01b038116811461081557600080fdfea164736f6c634300060c000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "public constructor"
      }
    },
    "title": "ENSController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 323,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "guardians",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 998,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1404,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2686,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "gateway",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1498,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ENSRegistry)2077"
      },
      {
        "astId": 1502,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Node)1478_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSRegistry)2077": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Node)1478_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSController.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)1478_storage"
      },
      "t_struct(Node)1478_storage": {
        "encoding": "inplace",
        "label": "struct ENSController.Node",
        "members": [
          {
            "astId": 1477,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}