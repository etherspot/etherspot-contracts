{
  "address": "0xDC105575501a4a772DaFE2Cc14c3b6A9DaF9c6a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99f8dda02874af89d1cb7a7abd1fa7c533af7cdc013f420d2219aac3c82b48e7",
  "receipt": {
    "to": null,
    "from": "0xae32631bdbb2474CC11594268427A2da3D6aBd6B",
    "contractAddress": "0xDC105575501a4a772DaFE2Cc14c3b6A9DaF9c6a2",
    "transactionIndex": 0,
    "gasUsed": "297741",
    "logsBloom": "0x
    "blockHash": "0x40eed9db713f39ab46c4c6368adc69df25371428d338fa58850ca93db1faf7a6",
    "transactionHash": "0x99f8dda02874af89d1cb7a7abd1fa7c533af7cdc013f420d2219aac3c82b48e7",
    "logs": [],
    "blockNumber": 1036,
    "cumulativeGasUsed": "297741",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d3df566cd311e2cad327d1b461b99b1b",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"BalanceChecker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBalances(address[],address[])\":{\"notice\":\"Check the token balances of a wallet for multiple tokens. Pass 0x0 as a \\\"token\\\" address to get ETH balance. Possible error throws:   - extremely large arrays for account and or tokens (gas cost too high) Returns a one-dimensional that's user.length * tokens.length long. The array is ordered by all of the 0th users token balances, then the 1th user, and so on.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utils/BalanceChecker.sol\":\"BalanceChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/libs/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SafeMathLib\\n */\\nlibrary SafeMathLib {\\n  function add(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result = a + b;\\n\\n    require(\\n      result >= a\\n    );\\n\\n    return result;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b <= a\\n    );\\n\\n    return a - b;\\n  }\\n\\n  function mul(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 result = 0;\\n\\n    if (a != 0 && b != 0) {\\n      result = a * b;\\n\\n      require(\\n        result / a == b\\n      );\\n    }\\n\\n    return result;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0\\n    );\\n\\n    return a / b;\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(\\n      b != 0\\n    );\\n\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x738c0a35942134eeaa1c6f5b1ec462103d64e9177b425d1e63416f0bdb76b3c8\",\"license\":\"MIT\"},\"src/common/token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title ERC20Token\\n */\\ncontract ERC20Token {\\n  using SafeMathLib for uint256;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) internal balances;\\n  mapping(address => mapping(address => uint256)) internal allowances;\\n\\n  // events\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _transfer(msg.sender, to, value);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _transfer(from, to, value);\\n    _approve(from, msg.sender, allowances[from][msg.sender].sub(value));\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _approve(msg.sender, spender, value);\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return balances[owner];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  // internal functions\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      from != address(0)\\n    );\\n    require(\\n      to != address(0)\\n    );\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[to] = balances[to].add(value);\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0)\\n    );\\n    require(\\n      spender != address(0)\\n    );\\n\\n    allowances[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _mint(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0)\\n    );\\n\\n    require(\\n      value > 0\\n    );\\n\\n    balances[owner] = balances[owner].add(value);\\n    totalSupply = totalSupply.add(value);\\n\\n    emit Transfer(address(0), owner, value);\\n  }\\n\\n  function _burn(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0)\\n    );\\n\\n    require(\\n      value > 0\\n    );\\n\\n    balances[owner] = balances[owner].sub(value);\\n    totalSupply = totalSupply.sub(value);\\n\\n    emit Transfer(owner, address(0), value);\\n  }\\n}\\n\",\"keccak256\":\"0x7c813ef482e781bc61d13437780e6f763e790f65e26b984aa58bd794ba042b09\",\"license\":\"MIT\"},\"src/utils/BalanceChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"../common/token/ERC20Token.sol\\\";\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title BalanceChecker\\n */\\ncontract BalanceChecker {\\n  using SafeMathLib for uint256;\\n\\n  /**\\n   * Check the token balances of a wallet for multiple tokens.\\n   * Pass 0x0 as a \\\"token\\\" address to get ETH balance.\\n   *\\n   * Possible error throws:\\n   *   - extremely large arrays for account and or tokens (gas cost too high)\\n   *\\n   * Returns a one-dimensional that's user.length * tokens.length long. The\\n   * array is ordered by all of the 0th users token balances, then the 1th\\n   * user, and so on.\\n   */\\n  function getBalances(\\n    address[] calldata accounts,\\n    address[] calldata tokens\\n  )\\n    external\\n    view\\n    returns (uint[] memory)\\n  {\\n    uint[] memory result = new uint[](accounts.length.mul(tokens.length));\\n\\n    for (uint i = 0; i < accounts.length; i++) {\\n      for (uint j = 0; j < tokens.length; j++) {\\n        uint index = j.add(tokens.length.mul(i));\\n\\n        if (tokens[j] != address(0x0)) {\\n          result[index] = _getBalance(accounts[i], tokens[j]);\\n        } else {\\n          result[index] = accounts[i].balance;\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function _getBalance(\\n    address account,\\n    address token\\n  )\\n    private\\n    view\\n    returns (uint256)\\n  {\\n    uint256 result = 0;\\n    uint256 tokenCode;\\n\\n    // check if token is actually a contract\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly { tokenCode := extcodesize(token) } // contract code size\\n\\n    if (tokenCode > 0) {\\n      // is it a contract and does it implement balanceOf\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool methodExists,) = token.staticcall(abi.encodeWithSelector(\\n        ERC20Token(token).balanceOf.selector,\\n        account\\n      ));\\n\\n      if (methodExists) {\\n        result = ERC20Token(token).balanceOf(account);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x506bff945d54e82052070f3a2104fdf34e48a0c558737cb0ee59de870b727ae6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061046d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ef5bfc3714610030575b600080fd5b6100f26004803603604081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184602083028401116401000000008311171561009557600080fd5b9193909290916020810190356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610142565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561012e578181015183820152602001610116565b505050509050019250505060405180910390f35b60608061014f85846102a4565b67ffffffffffffffff8111801561016557600080fd5b5060405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060005b8581101561029a5760005b848110156102915760006101be6101b787856102a4565b83906102da565b905060008787848181106101ce57fe5b905060200201356001600160a01b03166001600160a01b0316146102495761022c8989858181106101fb57fe5b905060200201356001600160a01b031688888581811061021757fe5b905060200201356001600160a01b03166102ec565b84828151811061023857fe5b602002602001018181525050610288565b88888481811061025557fe5b905060200201356001600160a01b03166001600160a01b03163184828151811061027b57fe5b6020026020010181815250505b506001016101a0565b50600101610195565b5095945050505050565b60008083158015906102b557508215155b156102d35750828202828482816102c857fe5b04146102d357600080fd5b9392505050565b6000828201838110156102d357600080fd5b600080823b801561045857604080516001600160a01b0387811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b17815292518251600094928916939282918083835b6020831061036b5780518252601f19909201916020918201910161034c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146103cb576040519150601f19603f3d011682016040523d82523d6000602084013e6103d0565b606091505b50509050801561045657846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d602081101561045157600080fd5b505192505b505b50939250505056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ef5bfc3714610030575b600080fd5b6100f26004803603604081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184602083028401116401000000008311171561009557600080fd5b9193909290916020810190356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610142565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561012e578181015183820152602001610116565b505050509050019250505060405180910390f35b60608061014f85846102a4565b67ffffffffffffffff8111801561016557600080fd5b5060405190808252806020026020018201604052801561018f578160200160208202803683370190505b50905060005b8581101561029a5760005b848110156102915760006101be6101b787856102a4565b83906102da565b905060008787848181106101ce57fe5b905060200201356001600160a01b03166001600160a01b0316146102495761022c8989858181106101fb57fe5b905060200201356001600160a01b031688888581811061021757fe5b905060200201356001600160a01b03166102ec565b84828151811061023857fe5b602002602001018181525050610288565b88888481811061025557fe5b905060200201356001600160a01b03166001600160a01b03163184828151811061027b57fe5b6020026020010181815250505b506001016101a0565b50600101610195565b5095945050505050565b60008083158015906102b557508215155b156102d35750828202828482816102c857fe5b04146102d357600080fd5b9392505050565b6000828201838110156102d357600080fd5b600080823b801561045857604080516001600160a01b0387811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b17815292518251600094928916939282918083835b6020831061036b5780518252601f19909201916020918201910161034c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146103cb576040519150601f19603f3d011682016040523d82523d6000602084013e6103d0565b606091505b50509050801561045657846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561042757600080fd5b505afa15801561043b573d6000803e3d6000fd5b505050506040513d602081101561045157600080fd5b505192505b505b50939250505056fea164736f6c634300060c000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "BalanceChecker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBalances(address[],address[])": {
        "notice": "Check the token balances of a wallet for multiple tokens. Pass 0x0 as a \"token\" address to get ETH balance. Possible error throws:   - extremely large arrays for account and or tokens (gas cost too high) Returns a one-dimensional that's user.length * tokens.length long. The array is ordered by all of the 0th users token balances, then the 1th user, and so on."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}