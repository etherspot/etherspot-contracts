{
  "address": "0x87161Bf725f583d4174712be1A9Ce1fe4B7743D7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "batch",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "succeeded",
          "type": "bool"
        }
      ],
      "name": "BatchDelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        }
      ],
      "name": "delegateBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "senderSignature",
          "type": "bytes"
        }
      ],
      "name": "delegateBatchWithGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "batches",
          "type": "bytes[]"
        },
        {
          "internalType": "bool",
          "name": "revertOnFailure",
          "type": "bool"
        }
      ],
      "name": "delegateBatches",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "externalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountNextNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Gateway.DelegatedBatch",
          "name": "delegatedBatch",
          "type": "tuple"
        }
      ],
      "name": "hashDelegatedBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct Gateway.DelegatedBatchWithGasPrice",
          "name": "delegatedBatch",
          "type": "tuple"
        }
      ],
      "name": "hashDelegatedBatchWithGasPrice",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExternalAccountRegistry",
          "name": "externalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "personalAccountRegistry_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalAccountRegistry",
      "outputs": [
        {
          "internalType": "contract PersonalAccountRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "sendBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "sendBatchFromAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0af8640619a81159a6de0244ce135478d87af13637d8daf1f17def086b120313",
  "receipt": {
    "to": null,
    "from": "0xae32631bdbb2474CC11594268427A2da3D6aBd6B",
    "contractAddress": "0x87161Bf725f583d4174712be1A9Ce1fe4B7743D7",
    "transactionIndex": 0,
    "gasUsed": "2211203",
    "logsBloom": "0x
    "blockHash": "0x315026da8858c15183c6a17108e31609296d0d1c27642a55409d17b9e3b7083a",
    "transactionHash": "0x0af8640619a81159a6de0244ce135478d87af13637d8daf1f17def086b120313",
    "logs": [],
    "blockNumber": 73,
    "cumulativeGasUsed": "2211203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ea35c89096a4158a540bab69cab65944",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"batch\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"succeeded\",\"type\":\"bool\"}],\"name\":\"BatchDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"}],\"name\":\"delegateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"senderSignature\",\"type\":\"bytes\"}],\"name\":\"delegateBatchWithGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"batches\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFailure\",\"type\":\"bool\"}],\"name\":\"delegateBatches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"externalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Gateway.DelegatedBatch\",\"name\":\"delegatedBatch\",\"type\":\"tuple\"}],\"name\":\"hashDelegatedBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Gateway.DelegatedBatchWithGasPrice\",\"name\":\"delegatedBatch\",\"type\":\"tuple\"}],\"name\":\"hashDelegatedBatchWithGasPrice\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExternalAccountRegistry\",\"name\":\"externalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"personalAccountRegistry_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalAccountRegistry\",\"outputs\":[{\"internalType\":\"contract PersonalAccountRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"sendBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"sendBatchFromAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"events\":{\"BatchDelegated(address,bytes,bool)\":{\"details\":\"Emitted when the single batch is delegated\",\"params\":{\"batch\":\"batch\",\"sender\":\"sender address\",\"succeeded\":\"if succeeded\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Public constructor\"},\"delegateBatch(address,uint256,address[],bytes[],bytes)\":{\"details\":\"Use `hashDelegatedBatch` to create sender message payload. `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"nonce\":\"next account nonce\",\"senderSignature\":\"sender signature\",\"to\":\"array of batch recipients contracts\"}},\"delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)\":{\"details\":\"Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice) `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"nonce\":\"next account nonce\",\"senderSignature\":\"sender signature\",\"to\":\"array of batch recipients contracts\"}},\"delegateBatches(bytes[],bool)\":{\"details\":\"It will revert when all batches fail\",\"params\":{\"batches\":\"array of batches\",\"revertOnFailure\":\"reverts on any error\"}},\"getAccountNextNonce(address)\":{\"params\":{\"account\":\"account address\"},\"returns\":{\"_0\":\"next nonce\"}},\"hashDelegatedBatch((uint256,address[],bytes[]))\":{\"params\":{\"delegatedBatch\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"hashDelegatedBatchWithGasPrice((uint256,address[],bytes[],uint256))\":{\"params\":{\"delegatedBatch\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address,bytes32,bytes32,bytes32)\":{\"params\":{\"externalAccountRegistry_\":\"`ExternalAccountRegistry` contract address\",\"personalAccountRegistry_\":\"`PersonalAccountRegistry` contract address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"sendBatch(address[],bytes[])\":{\"details\":\"`GatewayRecipient` context api: `_getContextAccount` will return `msg.sender` `_getContextSender` will return `msg.sender`\",\"params\":{\"data\":\"array of batch data\",\"to\":\"array of batch recipients contracts\"}},\"sendBatchFromAccount(address,address[],bytes[])\":{\"details\":\"`GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return `msg.sender`\",\"params\":{\"account\":\"account address\",\"data\":\"array of batch data\",\"to\":\"array of batch recipients contracts\"}}},\"title\":\"Gateway\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegateBatch(address,uint256,address[],bytes[],bytes)\":{\"notice\":\"Delegates batch from the account\"},\"delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)\":{\"notice\":\"Delegates batch from the account (with gas price)\"},\"delegateBatches(bytes[],bool)\":{\"notice\":\"Delegates multiple batches\"},\"getAccountNextNonce(address)\":{\"notice\":\"Gets next account nonce\"},\"hashDelegatedBatch((uint256,address[],bytes[]))\":{\"notice\":\"Hashes `DelegatedBatch` typed data\"},\"hashDelegatedBatchWithGasPrice((uint256,address[],bytes[],uint256))\":{\"notice\":\"Hashes `DelegatedBatchWithGasPrice` typed data\"},\"initialize(address,address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initializes `Gateway` contract\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"sendBatch(address[],bytes[])\":{\"notice\":\"Sends batch\"},\"sendBatchFromAccount(address,address[],bytes[])\":{\"notice\":\"Sends batch from the account\"}},\"notice\":\"GSN replacement\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/gateway/Gateway.sol\":\"Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Controlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Controlled\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the controller account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The controller account will be the one that deploys the contract.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Controlled {\\n  /**\\n   * @return controller account address\\n   */\\n  address public controller;\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if msg.sender is not the controller\\n   */\\n  modifier onlyController() {\\n    require(\\n      msg.sender == controller,\\n      \\\"Controlled: msg.sender is not the controller\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    controller = msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0x8c27e8fc2d7cbea00f3952b0e0235caeb284d043689bedff5b083fd60a6bd587\",\"license\":\"MIT\"},\"src/common/account/Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../access/Controlled.sol\\\";\\n\\n\\n/**\\n * @title Account\\n *\\n * @dev Simple account contract with only one method - `executeTransaction`\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Account is Controlled {\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public payable Controlled() {}\\n\\n  /**\\n   * @notice Allow receives\\n   */\\n  receive()\\n    external\\n    payable\\n  {\\n    //\\n  }\\n\\n  // external functions\\n\\n  /**\\n   * @notice Executes transaction\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function executeTransaction(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    onlyController\\n    returns (bytes memory)\\n  {\\n    bytes memory result;\\n    bool succeeded;\\n\\n    // solhint-disable-next-line avoid-call-value, avoid-low-level-calls\\n    (succeeded, result) = payable(to).call{value: value}(data);\\n\\n    require(\\n      succeeded,\\n      \\\"Account: transaction reverted\\\"\\n    );\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x909db7d2cf48934aa83e254f5abaff41de08a2517c7ae2e018a5878c8ff8f965\",\"license\":\"MIT\"},\"src/common/account/AccountController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./Account.sol\\\";\\n\\n\\n/**\\n * @title Account controller\\n *\\n * @dev Contract module which provides Account deployment mechanism\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract AccountController {\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Deploys account\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _deployAccount(\\n    bytes32 salt\\n  )\\n    internal\\n    returns (address)\\n  {\\n    return address(new Account{salt: salt}());\\n  }\\n\\n  /**\\n   * @notice Executes transaction from the account\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @return transaction result\\n   */\\n  function _executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes memory data\\n  )\\n    internal\\n    returns (bytes memory)\\n  {\\n    require(\\n      to != address(0),\\n      \\\"AccountController: cannot send to 0x0\\\"\\n    );\\n\\n    require(\\n      to != address(this),\\n      \\\"AccountController: cannot send to controller\\\"\\n    );\\n\\n    require(\\n      to != account,\\n      \\\"AccountController: cannot send to self\\\"\\n    );\\n\\n    return Account(payable(account)).executeTransaction(\\n      to,\\n      value,\\n      data\\n    );\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Computes account CREATE2 address\\n   * @param salt CREATE2 salt\\n   * @return account address\\n   */\\n  function _computeAccountAddress(\\n    bytes32 salt\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    bytes memory creationCode = type(Account).creationCode;\\n\\n    bytes32 data = keccak256(\\n      abi.encodePacked(\\n        bytes1(0xff),\\n        address(this),\\n        salt,\\n        keccak256(creationCode)\\n      )\\n    );\\n\\n    return address(uint160(uint256(data)));\\n  }\\n}\\n\",\"keccak256\":\"0x5cf620a92b9c2ccf3749e8ed95c90ca85a87b0c6e1af31a6775470a620cf6727\",\"license\":\"MIT\"},\"src/common/libs/BlockLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Block library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BlockLib {\\n  struct BlockRelated {\\n    bool added;\\n    uint256 removedAtBlockNumber;\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at current block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtCurrentBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, block.number);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at any block\\n   * @param self self struct\\n   * @return true on correct self struct\\n   */\\n  function verifyAtAnyBlock(\\n    BlockRelated memory self\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return verifyAtBlock(self, 0);\\n  }\\n\\n  /**\\n   * @notice Verifies self struct at specific block\\n   * @param self self struct\\n   * @param blockNumber block number to verify\\n   * @return true on correct self struct\\n   */\\n  function verifyAtBlock(\\n    BlockRelated memory self,\\n    uint256 blockNumber\\n  )\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (self.added) {\\n      if (self.removedAtBlockNumber == 0) {\\n        result = true;\\n      } else if (blockNumber == 0) {\\n        result = true;\\n      } else {\\n        result = self.removedAtBlockNumber > blockNumber;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x9205536bc211f86d1113118a44dddfa7a9b9772a918cf4b1575c982a05472587\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SafeMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Safe math library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/math/SafeMath.sol\\n */\\nlibrary SafeMathLib {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n\\n    require(c >= a, \\\"SafeMathLib: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMathLib: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n\\n    require(c / a == b, \\\"SafeMathLib: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMathLib: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMathLib: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x6089f354ca754d9c5dd9e800ee5ed86717dbf8f9af470604e0be691ac57c0107\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x51799826023958716dc49e0e4fef4a912363d3434e03b044f556c40078469fc4\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/token/ERC20Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SafeMathLib.sol\\\";\\n\\n\\n/**\\n * @title ERC20 token\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/token/ERC20/ERC20.sol\\n */\\ncontract ERC20Token {\\n  using SafeMathLib for uint256;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public decimals;\\n  uint256 public totalSupply;\\n\\n  mapping(address => uint256) internal balances;\\n  mapping(address => mapping(address => uint256)) internal allowances;\\n\\n  // events\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (bool)\\n  {\\n    _transfer(_getSender(), to, value);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    address sender = _getSender();\\n\\n    _transfer(from, to, value);\\n    _approve(from, sender, allowances[from][sender].sub(value));\\n\\n    return true;\\n  }\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    external\\n    returns (bool)\\n  {\\n    _approve(_getSender(), spender, value);\\n\\n    return true;\\n  }\\n\\n  // external functions (views)\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return balances[owner];\\n  }\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    virtual\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[owner][spender];\\n  }\\n\\n  // internal functions\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      from != address(0),\\n      \\\"ERC20Token: cannot transfer from 0x0 address\\\"\\n    );\\n    require(\\n      to != address(0),\\n      \\\"ERC20Token: cannot transfer to 0x0 address\\\"\\n    );\\n\\n    balances[from] = balances[from].sub(value);\\n    balances[to] = balances[to].add(value);\\n\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot approve from 0x0 address\\\"\\n    );\\n    require(\\n      spender != address(0),\\n      \\\"ERC20Token: cannot approve to 0x0 address\\\"\\n    );\\n\\n    allowances[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _mint(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot mint to 0x0 address\\\"\\n    );\\n    require(\\n      value > 0,\\n      \\\"ERC20Token: cannot mint 0 value\\\"\\n    );\\n\\n    balances[owner] = balances[owner].add(value);\\n    totalSupply = totalSupply.add(value);\\n\\n    emit Transfer(address(0), owner, value);\\n  }\\n\\n  function _burn(\\n    address owner,\\n    uint256 value\\n  )\\n    virtual\\n    internal\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC20Token: cannot burn from 0x0 address\\\"\\n    );\\n\\n    balances[owner] = balances[owner].sub(\\n      value,\\n      \\\"ERC20Token: burn value exceeds balance\\\"\\n    );\\n\\n    totalSupply = totalSupply.sub(value);\\n\\n    emit Transfer(owner, address(0), value);\\n  }\\n\\n  // internal functions (views)\\n\\n  function _getSender()\\n    virtual\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return msg.sender;\\n  }\\n}\\n\",\"keccak256\":\"0x6f2b0bd08da549c6c1f5ceee85766832d587dde62c56bebc3a14bd9ea407e03d\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/external/ExternalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BlockLib.sol\\\";\\n\\n\\n/**\\n * @title External account registry\\n *\\n * @notice Global registry for keys and external (outside of the platform) contract based wallets\\n *\\n * @dev An account can call the registry to add (`addAccountOwner`) or remove (`removeAccountOwner`) its own owners.\\n * When the owner has been added, information about that fact will live in the registry forever.\\n * Removing an owner only affects the future blocks (until the owner is re-added).\\n *\\n * Given the fact, there is no way to sign the data using a contract based wallet,\\n * we created a registry to store signed by the key wallet proofs.\\n * ERC-1271 allows removing a signer after the signature was created. Thus store the signature for the later use\\n * doesn't guarantee the signer is still has access to that smart account.\\n * Because of that, the ERC1271's `isValidSignature()` cannot be used in e.g. `PaymentRegistry`.*\\n *\\n * An account can call the registry to add (`addAccountProof`) or remove (`removeAccountProof`) proof hash.\\n * When the proof has been added, information about that fact will live in the registry forever.\\n * Removing a proof only affects the future blocks (until the proof is re-added).\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ExternalAccountRegistry {\\n  using BlockLib for BlockLib.BlockRelated;\\n\\n  struct Account {\\n    mapping(address => BlockLib.BlockRelated) owners;\\n    mapping(bytes32 => BlockLib.BlockRelated) proofs;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the new proof is added\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofAdded(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing proof is removed\\n   * @param account account address\\n   * @param hash proof hash\\n   */\\n  event AccountProofRemoved(\\n    address account,\\n    bytes32 hash\\n  );\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ExternalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].added = true;\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account owner\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address owner\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].owners[owner].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      msg.sender,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Adds a new account proof\\n   * @param hash proof hash\\n   */\\n  function addAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      !accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof already exists\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].added = true;\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = 0;\\n\\n    emit AccountProofAdded(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account proof\\n   * @param hash proof hash\\n   */\\n  function removeAccountProof(\\n    bytes32 hash\\n  )\\n    external\\n  {\\n    require(\\n      accounts[msg.sender].proofs[hash].verifyAtCurrentBlock(),\\n      \\\"ExternalAccountRegistry: proof doesn't exist\\\"\\n    );\\n\\n    accounts[msg.sender].proofs[hash].removedAtBlockNumber = block.number;\\n\\n    emit AccountProofRemoved(\\n      msg.sender,\\n      hash\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Verifies the owner of the account at current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at current block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProof(\\n    address account,\\n    bytes32 hash\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtCurrentBlock();\\n  }\\n\\n  /**\\n   * @notice Verifies the proof of the account at specific block\\n   * @param account account address\\n   * @param hash proof hash\\n   * @param blockNumber block number to verify\\n   * @return true on correct account proof\\n   */\\n  function verifyAccountProofAtBlock(\\n    address account,\\n    bytes32 hash,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].proofs[hash].verifyAtBlock(blockNumber);\\n  }\\n}\\n\",\"keccak256\":\"0x8067b1fae41b73949f8d871a835533cbdd94b9ca3faa93b91f595c37e632ccdb\",\"license\":\"MIT\"},\"src/gateway/Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/libs/SignatureLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../external/ExternalAccountRegistry.sol\\\";\\nimport \\\"../personal/PersonalAccountRegistry.sol\\\";\\n\\n\\n/**\\n * @title Gateway\\n *\\n * @notice GSN replacement\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Gateway is Initializable, TypedDataContainer {\\n  using SafeMathLib for uint256;\\n  using SignatureLib for bytes32;\\n\\n  struct DelegatedBatch {\\n    uint256 nonce;\\n    address[] to;\\n    bytes[] data;\\n  }\\n\\n  struct DelegatedBatchWithGasPrice {\\n    uint256 nonce;\\n    address[] to;\\n    bytes[] data;\\n    uint256 gasPrice;\\n  }\\n\\n  bytes32 private constant DELEGATED_BATCH_TYPE_HASH = keccak256(\\n    \\\"DelegatedBatch(uint256 nonce,address[] to,bytes[] data)\\\"\\n  );\\n\\n  bytes32 private constant DELEGATED_BATCH_TYPE_HASH_WITH_GAS_PRICE = keccak256(\\n    \\\"DelegatedBatchWithGasPrice(uint256 nonce,address[] to,bytes[] data,uint256 gasPrice)\\\"\\n  );\\n\\n  ExternalAccountRegistry public externalAccountRegistry;\\n  PersonalAccountRegistry public personalAccountRegistry;\\n\\n  mapping(address => uint256) private accountNonce;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the single batch is delegated\\n   * @param sender sender address\\n   * @param batch batch\\n   * @param succeeded if succeeded\\n   */\\n  event BatchDelegated(\\n    address sender,\\n    bytes batch,\\n    bool succeeded\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `Gateway` contract\\n   * @param externalAccountRegistry_ `ExternalAccountRegistry` contract address\\n   * @param personalAccountRegistry_ `PersonalAccountRegistry` contract address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ExternalAccountRegistry externalAccountRegistry_,\\n    PersonalAccountRegistry personalAccountRegistry_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    externalAccountRegistry = externalAccountRegistry_;\\n    personalAccountRegistry = personalAccountRegistry_;\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  // public functions\\n\\n  /**\\n   * @notice Sends batch\\n   * @dev `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `msg.sender`\\n   * `_getContextSender` will return `msg.sender`\\n   *\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   */\\n  function sendBatch(\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    public\\n  {\\n    _sendBatch(\\n      msg.sender,\\n      msg.sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Sends batch from the account\\n   * @dev `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return `msg.sender`\\n   *\\n   * @param account account address\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   */\\n  function sendBatchFromAccount(\\n    address account,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    public\\n  {\\n    _sendBatch(\\n      account,\\n      msg.sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates batch from the account\\n   * @dev Use `hashDelegatedBatch` to create sender message payload.\\n   *\\n   * `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return recovered address from `senderSignature` arg\\n   *\\n   * @param account account address\\n   * @param nonce next account nonce\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   * @param senderSignature sender signature\\n   */\\n  function delegateBatch(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    bytes memory senderSignature\\n  )\\n    public\\n  {\\n    require(\\n      nonce > accountNonce[account],\\n      \\\"Gateway: nonce is lower than current account nonce\\\"\\n    );\\n\\n    address sender = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        nonce,\\n        to,\\n        data\\n      )\\n    ).recoverAddress(senderSignature);\\n\\n    accountNonce[account] = nonce;\\n\\n    _sendBatch(\\n      account,\\n      sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates batch from the account (with gas price)\\n   *\\n   * @dev Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice)\\n   *\\n   * `GatewayRecipient` context api:\\n   * `_getContextAccount` will return `account` arg\\n   * `_getContextSender` will return recovered address from `senderSignature` arg\\n   *\\n   * @param account account address\\n   * @param nonce next account nonce\\n   * @param to array of batch recipients contracts\\n   * @param data array of batch data\\n   * @param senderSignature sender signature\\n   */\\n  function delegateBatchWithGasPrice(\\n    address account,\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    bytes memory senderSignature\\n  )\\n    public\\n  {\\n    require(\\n      nonce > accountNonce[account],\\n      \\\"Gateway: nonce is lower than current account nonce\\\"\\n    );\\n\\n    address sender = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        nonce,\\n        to,\\n        data,\\n        tx.gasprice\\n      )\\n    ).recoverAddress(senderSignature);\\n\\n    accountNonce[account] = nonce;\\n\\n    _sendBatch(\\n      account,\\n      sender,\\n      to,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @notice Delegates multiple batches\\n   * @dev It will revert when all batches fail\\n   * @param batches array of batches\\n   * @param revertOnFailure reverts on any error\\n   */\\n  function delegateBatches(\\n    bytes[] memory batches,\\n    bool revertOnFailure\\n  )\\n    public\\n  {\\n    require(\\n      batches.length > 0,\\n      \\\"Gateway: cannot delegate empty batches\\\"\\n    );\\n\\n    bool anySucceeded;\\n\\n    for (uint256 i = 0; i < batches.length; i++) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool succeeded,) = address(this).call(batches[i]);\\n\\n      if (revertOnFailure) {\\n        require(\\n          succeeded,\\n          \\\"Gateway: batch reverted\\\"\\n        );\\n      } else if (succeeded && !anySucceeded) {\\n        anySucceeded = true;\\n      }\\n\\n      emit BatchDelegated(\\n        msg.sender,\\n        batches[i],\\n        succeeded\\n      );\\n    }\\n\\n    if (!anySucceeded) {\\n      revert(\\\"Gateway: all batches reverted\\\");\\n    }\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `DelegatedBatch` typed data\\n   * @param delegatedBatch struct\\n   * @return hash\\n   */\\n  function hashDelegatedBatch(\\n    DelegatedBatch memory delegatedBatch\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        delegatedBatch.nonce,\\n        delegatedBatch.to,\\n        delegatedBatch.data\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Hashes `DelegatedBatchWithGasPrice` typed data\\n   * @param delegatedBatch struct\\n   * @return hash\\n   */\\n  function hashDelegatedBatchWithGasPrice(\\n    DelegatedBatchWithGasPrice memory delegatedBatch\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        delegatedBatch.nonce,\\n        delegatedBatch.to,\\n        delegatedBatch.data,\\n        delegatedBatch.gasPrice\\n      )\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Gets next account nonce\\n   * @param account account address\\n   * @return next nonce\\n   */\\n  function getAccountNextNonce(\\n    address account\\n  )\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return accountNonce[account].add(1);\\n  }\\n\\n  // private functions\\n\\n  function _sendBatch(\\n    address account,\\n    address sender,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    private\\n  {\\n    require(\\n      account != address(0),\\n      \\\"Gateway: cannot send from 0x0 account\\\"\\n    );\\n    require(\\n      to.length > 0,\\n      \\\"Gateway: cannot send empty batch\\\"\\n    );\\n    require(\\n      data.length == to.length,\\n      \\\"Gateway: invalid batch\\\"\\n    );\\n\\n    if (account != sender) {\\n      require(\\n        personalAccountRegistry.verifyAccountOwner(account, sender) ||\\n        externalAccountRegistry.verifyAccountOwner(account, sender),\\n        \\\"Gateway: sender is not the account owner\\\"\\n      );\\n    }\\n\\n    bool succeeded;\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      require(\\n        to[i] != address(0),\\n        \\\"Gateway: cannot send to 0x0\\\"\\n      );\\n\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (succeeded,) = to[i].call(abi.encodePacked(data[i], account, sender));\\n\\n      require(\\n        succeeded,\\n        \\\"Gateway: batch transaction reverted\\\"\\n      );\\n    }\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes32[] memory dataHashes = new bytes32[](data.length);\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      dataHashes[i] = keccak256(data[i]);\\n    }\\n\\n    return keccak256(abi.encode(\\n      DELEGATED_BATCH_TYPE_HASH,\\n      nonce,\\n      keccak256(abi.encodePacked(to)),\\n      keccak256(abi.encodePacked(dataHashes))\\n    ));\\n  }\\n\\n  function _hashTypedData(\\n    uint256 nonce,\\n    address[] memory to,\\n    bytes[] memory data,\\n    uint256 gasPrice\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    bytes32[] memory dataHashes = new bytes32[](data.length);\\n\\n    for (uint256 i = 0; i < data.length; i++) {\\n      dataHashes[i] = keccak256(data[i]);\\n    }\\n\\n    return keccak256(abi.encode(\\n        DELEGATED_BATCH_TYPE_HASH_WITH_GAS_PRICE,\\n        nonce,\\n        keccak256(abi.encodePacked(to)),\\n        keccak256(abi.encodePacked(dataHashes)),\\n        gasPrice\\n      ));\\n  }\\n}\\n\",\"keccak256\":\"0x5f44a988f8f640503847703c9f1a4a2de18a9e8323acd0967fc5de4d3ef8c6b3\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"},\"src/personal/PersonalAccountRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/account/AccountController.sol\\\";\\nimport \\\"../common/libs/BlockLib.sol\\\";\\nimport \\\"../common/libs/SafeMathLib.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/token/ERC20Token.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\n\\n\\n/**\\n * @title Personal account registry\\n *\\n * @notice A registry for personal (controlled by owners) account management\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract PersonalAccountRegistry is AccountController, Initializable, GatewayRecipient {\\n  using BlockLib for BlockLib.BlockRelated;\\n  using SafeMathLib for uint256;\\n\\n  struct Account {\\n    bool deployed;\\n    bytes32 salt;\\n    mapping(address => BlockLib.BlockRelated) owners;\\n  }\\n\\n  mapping(address => Account) private accounts;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the account is deployed\\n   * @param account account address\\n   */\\n  event AccountDeployed(\\n    address account\\n  );\\n\\n  /**\\n   * @dev Emitted when the new owner is added\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerAdded(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is removed\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  event AccountOwnerRemoved(\\n    address account,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the transaction is executed\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   * @param response response\\n   */\\n  event AccountTransactionExecuted(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes data,\\n    bytes response\\n  );\\n\\n  /**\\n   * @dev Emitted when the call is refunded\\n   * @param account account address\\n   * @param beneficiary beneficiary address\\n   * @param token token address\\n   * @param value value\\n   */\\n  event AccountCallRefunded(\\n    address account,\\n    address beneficiary,\\n    address token,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initialize `PersonalAccountRegistry` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function initialize(\\n    address gateway_\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n  }\\n\\n  /**\\n   * @notice Adds a new account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function addAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    require(\\n      owner != address(0),\\n      \\\"PersonalAccountRegistry: cannot add 0x0 owner\\\"\\n    );\\n\\n    require(\\n      !accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner already exists\\\"\\n    );\\n\\n    accounts[account].owners[owner].added = true;\\n    accounts[account].owners[owner].removedAtBlockNumber = 0;\\n\\n    emit AccountOwnerAdded(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Removes existing account owner\\n   * @param account account address\\n   * @param owner owner address\\n   */\\n  function removeAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n  {\\n    address sender = _verifySender(account);\\n\\n    require(\\n      owner != sender,\\n      \\\"PersonalAccountRegistry: cannot remove self\\\"\\n    );\\n\\n    require(\\n      accounts[account].owners[owner].verifyAtCurrentBlock(),\\n      \\\"PersonalAccountRegistry: owner doesn't exist\\\"\\n    );\\n\\n    accounts[account].owners[owner].removedAtBlockNumber = block.number;\\n\\n    emit AccountOwnerRemoved(\\n      account,\\n      owner\\n    );\\n  }\\n\\n  /**\\n   * @notice Executes account transaction\\n   * @param account account address\\n   * @param to to address\\n   * @param value value\\n   * @param data data\\n   */\\n  function executeAccountTransaction(\\n    address account,\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    bytes memory response = _executeAccountTransaction(\\n      account,\\n      to,\\n      value,\\n      data\\n    );\\n\\n    emit AccountTransactionExecuted(\\n      account,\\n      to,\\n      value,\\n      data,\\n      response\\n    );\\n  }\\n\\n  /**\\n   * @notice Refunds account call\\n   * @param account account address\\n   * @param token token address\\n   * @param value value\\n   */\\n  function refundAccountCall(\\n    address account,\\n    address token,\\n    uint256 value\\n  )\\n    external\\n  {\\n    _verifySender(account);\\n\\n    _deployAccount(account);\\n\\n    /* solhint-disable avoid-tx-origin */\\n\\n    if (token == address(0)) {\\n      _executeAccountTransaction(\\n        account,\\n        tx.origin,\\n        value,\\n        new bytes(0)\\n      );\\n    } else {\\n      bytes memory response = _executeAccountTransaction(\\n        account,\\n        token,\\n        0,\\n        abi.encodeWithSelector(\\n          ERC20Token(token).transfer.selector,\\n          tx.origin,\\n          value\\n        )\\n      );\\n\\n      if (response.length > 0) {\\n        require(\\n          abi.decode(response, (bool)),\\n          \\\"PersonalAccountRegistry: ERC20Token transfer reverted\\\"\\n        );\\n      }\\n    }\\n\\n    emit AccountCallRefunded(\\n      account,\\n      tx.origin,\\n      token,\\n      value\\n    );\\n\\n    /* solhint-enable avoid-tx-origin */\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Computes account address\\n   * @param saltOwner salt owner address\\n   * @return account address\\n   */\\n  function computeAccountAddress(\\n    address saltOwner\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return _computeAccountAddress(saltOwner);\\n  }\\n\\n  /**\\n   * @notice Checks if account is deployed\\n   * @param account account address\\n   * @return true when account is deployed\\n   */\\n  function isAccountDeployed(\\n    address account\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return accounts[account].deployed;\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at current block\\n   * @param account account address\\n   * @param owner owner address\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyAccountOwner(account, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies the owner of the account at specific block\\n   * @param account account address\\n   * @param owner owner address\\n   * @param blockNumber block number to verify\\n   * @return true on correct account owner\\n   */\\n  function verifyAccountOwnerAtBlock(\\n    address account,\\n    address owner,\\n    uint256 blockNumber\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    bool result = false;\\n\\n    if (_verifyAccountOwner(account, owner)) {\\n      result = true;\\n    } else {\\n      result = accounts[account].owners[owner].verifyAtBlock(blockNumber);\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions\\n\\n  function _verifySender(\\n    address account\\n  )\\n    private\\n    returns (address)\\n  {\\n    address sender = _getContextSender();\\n\\n    if (accounts[account].owners[sender].added) {\\n      require(\\n        accounts[account].owners[sender].removedAtBlockNumber == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n    } else {\\n      require(\\n        accounts[account].salt == 0,\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      bytes32 salt = keccak256(\\n        abi.encodePacked(sender)\\n      );\\n\\n      require(\\n        account == _computeAccountAddress(salt),\\n        \\\"PersonalAccountRegistry: sender is not the account owner\\\"\\n      );\\n\\n      accounts[account].salt = salt;\\n      accounts[account].owners[sender].added = true;\\n\\n      emit AccountOwnerAdded(\\n        account,\\n        sender\\n      );\\n    }\\n\\n    return sender;\\n  }\\n\\n  function _deployAccount(\\n    address account\\n  )\\n    internal\\n  {\\n    if (!accounts[account].deployed) {\\n      _deployAccount(\\n        accounts[account].salt\\n      );\\n\\n      accounts[account].deployed = true;\\n\\n      emit AccountDeployed(\\n        account\\n      );\\n    }\\n  }\\n\\n  // private functions (views)\\n\\n  function _computeAccountAddress(\\n    address saltOwner\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    bytes32 salt = keccak256(\\n      abi.encodePacked(saltOwner)\\n    );\\n\\n    return _computeAccountAddress(salt);\\n  }\\n\\n  function _verifyAccountOwner(\\n    address account,\\n    address owner\\n  )\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (accounts[account].owners[owner].added) {\\n      result = accounts[account].owners[owner].removedAtBlockNumber == 0;\\n    } else if (accounts[account].salt == 0) {\\n      result = account == _computeAccountAddress(owner);\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x0da4af6f32b87f2152105b4f3c4e78373ab6aafbf3c69bee772b91a64768e5c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506126c7806100606000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806387d313131161008c578063b5021b1611610066578063b5021b16146101fc578063bd106a0214610218578063d2c83b9a14610236578063f92c5f7c14610254576100cf565b806387d31313146101a6578063984bd28f146101c45780639f255626146101e0576100cf565b8063231badaf146100d4578063235f8a44146100f0578063392e53cd146101205780635afaa7bb1461013e5780636d482cfb1461015a578063867519c61461018a575b600080fd5b6100ee60048036038101906100e991906115f6565b610284565b005b61010a60048036038101906101059190611815565b610386565b604051610117919061201a565b60405180910390f35b6101286103b3565b6040516101359190611fff565b60405180910390f35b61015860048036038101906101539190611721565b610409565b005b610174600480360381019061016f9190611856565b6105e1565b604051610181919061201a565b60405180910390f35b6101a4600480360381019061019f9190611577565b610609565b005b6101ae61061a565b6040516101bb919061218e565b60405180910390f35b6101de60048036038101906101d9919061179e565b610640565b005b6101fa60048036038101906101f591906116b5565b6107da565b005b610216600480360381019061021191906115f6565b6107ea565b005b6102206108ed565b60405161022d919061201a565b60405180910390f35b61023e6108f3565b60405161024b9190612173565b60405180910390f35b61026e6004803603810190610269919061154e565b610919565b60405161027b9190612329565b60405180910390f35b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc90612209565b60405180910390fd5b600061032c8261031e610319888888610975565b610ab3565b610b1e90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061037e86828686610bd9565b505050505050565b60006103ac6103a78360000151846020015185604001518660600151611044565b610ab3565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600082511161044d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612249565b60405180910390fd5b600080600090505b835181101561059b5760003073ffffffffffffffffffffffffffffffffffffffff1685838151811061048357fe5b60200260200101516040516104989190611ef4565b6000604051808303816000865af19150503d80600081146104d5576040519150601f19603f3d011682016040523d82523d6000602084013e6104da565b606091505b5050905083156105295780610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b906121e9565b60405180910390fd5b61053f565b808015610534575082155b1561053e57600192505b5b7f361c14722cc344132c73396113f7164232448b09c544a149f09048648b43d8723386848151811061056d57fe5b60200260200101518360405161058593929190611f98565b60405180910390a1508080600101915050610455565b50806105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612309565b60405180910390fd5b505050565b60006106026105fd836000015184602001518560400151610975565b610ab3565b9050919050565b61061583338484610bd9565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c5906121c9565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061079c838383611185565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107cb9190611f7d565b60405180910390a15050505050565b6107e633338484610bd9565b5050565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841161086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290612209565b60405180910390fd5b6000610893826108856108808888883a611044565b610ab3565b610b1e90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108e586828686610bd9565b505050505050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061096e6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e790919063ffffffff16565b9050919050565b60006060825167ffffffffffffffff8111801561099157600080fd5b506040519080825280602002602001820160405280156109c05781602001602082028036833780820191505090505b50905060005b8351811015610a0f578381815181106109db57fe5b6020026020010151805190602001208282815181106109f657fe5b60200260200101818152505080806001019150506109c6565b507f4dc0a39234edc20669002d7daeb6a39b3af6a6a56073618b70893384c405c8498585604051602001610a439190611ec6565b6040516020818303038152906040528051906020012083604051602001610a6a9190611edd565b60405160208183030381529060405280519060200120604051602001610a939493929190612096565b604051602081830303815290604052805190602001209150509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060015483604051602001610b0193929190611f44565b604051602081830303815290604052805190602001209050919050565b60008060009050604183511415610bcf5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015610b5f57601b810190505b601b8160ff161480610b745750601c8160ff16145b15610bcb5760018782858560405160008152602001604052604051610b9c949392919061212e565b6020604051602081039080840390855afa158015610bbe573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090612229565b60405180910390fd5b6000825111610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c84906122e9565b60405180910390fd5b8151815114610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc890612289565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610ea557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610d61929190611fd6565b60206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190611775565b80610e655750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610e14929190611fd6565b60206040518083038186803b158015610e2c57600080fd5b505afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190611775565b5b610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90612269565b60405180910390fd5b5b600080600090505b825181101561103c57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610eda57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f30906121a9565b60405180910390fd5b838181518110610f4557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610f6f57fe5b60200260200101518787604051602001610f8b93929190611f0b565b604051602081830303815290604052604051610fa79190611ef4565b6000604051808303816000865af19150503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5050809250508161102f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611026906122a9565b60405180910390fd5b8080600101915050610ead565b505050505050565b60006060835167ffffffffffffffff8111801561106057600080fd5b5060405190808252806020026020018201604052801561108f5781602001602082028036833780820191505090505b50905060005b84518110156110de578481815181106110aa57fe5b6020026020010151805190602001208282815181106110c557fe5b6020026020010181815250508080600101915050611095565b507f75a27a7ebaa6d94f2ad4eecbc98a424b9a0516c245c680308385c79d2ad6af2a86866040516020016111129190611ec6565b60405160208183030381529060405280519060200120836040516020016111399190611edd565b60405160208183030381529060405280519060200120866040516020016111649594939291906120db565b60405160208183030381529060405280519060200120915050949350505050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016111c596959493929190612035565b6040516020818303038152906040528051906020012060018190555050505050565b600080828401905083811015611232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611229906122c9565b60405180910390fd5b8091505092915050565b60008135905061124b81612630565b92915050565b600082601f83011261126257600080fd5b813561127561127082612371565b612344565b9150818183526020840193506020810190508385602084028201111561129a57600080fd5b60005b838110156112ca57816112b0888261123c565b84526020840193506020830192505060018101905061129d565b5050505092915050565b600082601f8301126112e557600080fd5b81356112f86112f382612399565b612344565b9150818183526020840193506020810190508360005b8381101561133e57813586016113248882611387565b84526020840193506020830192505060018101905061130e565b5050505092915050565b60008135905061135781612647565b92915050565b60008151905061136c81612647565b92915050565b6000813590506113818161265e565b92915050565b600082601f83011261139857600080fd5b81356113ab6113a6826123c1565b612344565b915080825260208301602083018583830111156113c757600080fd5b6113d28382846125a2565b50505092915050565b6000813590506113ea81612675565b92915050565b6000813590506113ff8161268c565b92915050565b60006080828403121561141757600080fd5b6114216080612344565b9050600061143184828501611539565b600083015250602082013567ffffffffffffffff81111561145157600080fd5b61145d84828501611251565b602083015250604082013567ffffffffffffffff81111561147d57600080fd5b611489848285016112d4565b604083015250606061149d84828501611539565b60608301525092915050565b6000606082840312156114bb57600080fd5b6114c56060612344565b905060006114d584828501611539565b600083015250602082013567ffffffffffffffff8111156114f557600080fd5b61150184828501611251565b602083015250604082013567ffffffffffffffff81111561152157600080fd5b61152d848285016112d4565b60408301525092915050565b600081359050611548816126a3565b92915050565b60006020828403121561156057600080fd5b600061156e8482850161123c565b91505092915050565b60008060006060848603121561158c57600080fd5b600061159a8682870161123c565b935050602084013567ffffffffffffffff8111156115b757600080fd5b6115c386828701611251565b925050604084013567ffffffffffffffff8111156115e057600080fd5b6115ec868287016112d4565b9150509250925092565b600080600080600060a0868803121561160e57600080fd5b600061161c8882890161123c565b955050602061162d88828901611539565b945050604086013567ffffffffffffffff81111561164a57600080fd5b61165688828901611251565b935050606086013567ffffffffffffffff81111561167357600080fd5b61167f888289016112d4565b925050608086013567ffffffffffffffff81111561169c57600080fd5b6116a888828901611387565b9150509295509295909350565b600080604083850312156116c857600080fd5b600083013567ffffffffffffffff8111156116e257600080fd5b6116ee85828601611251565b925050602083013567ffffffffffffffff81111561170b57600080fd5b611717858286016112d4565b9150509250929050565b6000806040838503121561173457600080fd5b600083013567ffffffffffffffff81111561174e57600080fd5b61175a858286016112d4565b925050602061176b85828601611348565b9150509250929050565b60006020828403121561178757600080fd5b60006117958482850161135d565b91505092915050565b600080600080600060a086880312156117b657600080fd5b60006117c4888289016113db565b95505060206117d5888289016113f0565b94505060406117e688828901611372565b93505060606117f788828901611372565b925050608061180888828901611372565b9150509295509295909350565b60006020828403121561182757600080fd5b600082013567ffffffffffffffff81111561184157600080fd5b61184d84828501611405565b91505092915050565b60006020828403121561186857600080fd5b600082013567ffffffffffffffff81111561188257600080fd5b61188e848285016114a9565b91505092915050565b60006118a383836118e5565b60208301905092915050565b60006118bb83836119e5565b60208301905092915050565b6118d081612524565b82525050565b6118df816124a1565b82525050565b6118ee816124a1565b82525050565b611905611900826124a1565b6125e4565b82525050565b60006119168261240d565b6119208185612453565b935061192b836123ed565b8060005b8381101561195c5781516119438882611897565b975061194e83612439565b92505060018101905061192f565b5085935050505092915050565b600061197482612418565b61197e818561245e565b9350611989836123fd565b8060005b838110156119ba5781516119a188826118af565b97506119ac83612446565b92505060018101905061198d565b5085935050505092915050565b6119d0816124b3565b82525050565b6119df816124bf565b82525050565b6119ee816124bf565b82525050565b611a05611a00826124bf565b6125f6565b82525050565b6000611a1682612423565b611a208185612469565b9350611a308185602086016125b1565b611a3981612612565b840191505092915050565b6000611a4f82612423565b611a59818561247a565b9350611a698185602086016125b1565b80840191505092915050565b611a7e81612536565b82525050565b611a8d8161255a565b82525050565b6000611a9e8261242e565b611aa88185612496565b9350611ab88185602086016125b1565b80840191505092915050565b6000611ad1601b83612485565b91507f476174657761793a2063616e6e6f742073656e6420746f2030783000000000006000830152602082019050919050565b6000611b11602f83612485565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000611b77601783612485565b91507f476174657761793a2062617463682072657665727465640000000000000000006000830152602082019050919050565b6000611bb7603283612485565b91507f476174657761793a206e6f6e6365206973206c6f776572207468616e2063757260008301527f72656e74206163636f756e74206e6f6e636500000000000000000000000000006020830152604082019050919050565b6000611c1d602583612485565b91507f476174657761793a2063616e6e6f742073656e642066726f6d2030783020616360008301527f636f756e740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c83602683612485565b91507f476174657761793a2063616e6e6f742064656c656761746520656d707479206260008301527f61746368657300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611ce9602883612485565b91507f476174657761793a2073656e646572206973206e6f7420746865206163636f7560008301527f6e74206f776e65720000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d4f601683612485565b91507f476174657761793a20696e76616c6964206261746368000000000000000000006000830152602082019050919050565b6000611d8f602383612485565b91507f476174657761793a206261746368207472616e73616374696f6e20726576657260008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611df5601e83612485565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000611e35602083612485565b91507f476174657761793a2063616e6e6f742073656e6420656d7074792062617463686000830152602082019050919050565b6000611e75601d83612485565b91507f476174657761793a20616c6c20626174636865732072657665727465640000006000830152602082019050919050565b611eb18161250d565b82525050565b611ec081612517565b82525050565b6000611ed2828461190b565b915081905092915050565b6000611ee98284611969565b915081905092915050565b6000611f008284611a44565b915081905092915050565b6000611f178286611a44565b9150611f2382856118f4565b601482019150611f3382846118f4565b601482019150819050949350505050565b6000611f508286611a93565b9150611f5c82856119f4565b602082019150611f6c82846119f4565b602082019150819050949350505050565b6000602082019050611f9260008301846118c7565b92915050565b6000606082019050611fad60008301866118c7565b8181036020830152611fbf8185611a0b565b9050611fce60408301846119c7565b949350505050565b6000604082019050611feb60008301856118d6565b611ff860208301846118d6565b9392505050565b600060208201905061201460008301846119c7565b92915050565b600060208201905061202f60008301846119d6565b92915050565b600060c08201905061204a60008301896119d6565b61205760208301886119d6565b61206460408301876119d6565b6120716060830186611ea8565b61207e60808301856118d6565b61208b60a08301846119d6565b979650505050505050565b60006080820190506120ab60008301876119d6565b6120b86020830186611ea8565b6120c560408301856119d6565b6120d260608301846119d6565b95945050505050565b600060a0820190506120f060008301886119d6565b6120fd6020830187611ea8565b61210a60408301866119d6565b61211760608301856119d6565b6121246080830184611ea8565b9695505050505050565b600060808201905061214360008301876119d6565b6121506020830186611eb7565b61215d60408301856119d6565b61216a60608301846119d6565b95945050505050565b60006020820190506121886000830184611a75565b92915050565b60006020820190506121a36000830184611a84565b92915050565b600060208201905081810360008301526121c281611ac4565b9050919050565b600060208201905081810360008301526121e281611b04565b9050919050565b6000602082019050818103600083015261220281611b6a565b9050919050565b6000602082019050818103600083015261222281611baa565b9050919050565b6000602082019050818103600083015261224281611c10565b9050919050565b6000602082019050818103600083015261226281611c76565b9050919050565b6000602082019050818103600083015261228281611cdc565b9050919050565b600060208201905081810360008301526122a281611d42565b9050919050565b600060208201905081810360008301526122c281611d82565b9050919050565b600060208201905081810360008301526122e281611de8565b9050919050565b6000602082019050818103600083015261230281611e28565b9050919050565b6000602082019050818103600083015261232281611e68565b9050919050565b600060208201905061233e6000830184611ea8565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561236757600080fd5b8060405250919050565b600067ffffffffffffffff82111561238857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123b057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123d857600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006124ac826124ed565b9050919050565b60008115159050919050565b6000819050919050565b60006124d4826124a1565b9050919050565b60006124e6826124a1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061252f8261257e565b9050919050565b600061254182612548565b9050919050565b6000612553826124ed565b9050919050565b60006125658261256c565b9050919050565b6000612577826124ed565b9050919050565b600061258982612590565b9050919050565b600061259b826124ed565b9050919050565b82818337600083830152505050565b60005b838110156125cf5780820151818401526020810190506125b4565b838111156125de576000848401525b50505050565b60006125ef82612600565b9050919050565b6000819050919050565b600061260b82612623565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b612639816124a1565b811461264457600080fd5b50565b612650816124b3565b811461265b57600080fd5b50565b612667816124bf565b811461267257600080fd5b50565b61267e816124c9565b811461268957600080fd5b50565b612695816124db565b81146126a057600080fd5b50565b6126ac8161250d565b81146126b757600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806387d313131161008c578063b5021b1611610066578063b5021b16146101fc578063bd106a0214610218578063d2c83b9a14610236578063f92c5f7c14610254576100cf565b806387d31313146101a6578063984bd28f146101c45780639f255626146101e0576100cf565b8063231badaf146100d4578063235f8a44146100f0578063392e53cd146101205780635afaa7bb1461013e5780636d482cfb1461015a578063867519c61461018a575b600080fd5b6100ee60048036038101906100e991906115f6565b610284565b005b61010a60048036038101906101059190611815565b610386565b604051610117919061201a565b60405180910390f35b6101286103b3565b6040516101359190611fff565b60405180910390f35b61015860048036038101906101539190611721565b610409565b005b610174600480360381019061016f9190611856565b6105e1565b604051610181919061201a565b60405180910390f35b6101a4600480360381019061019f9190611577565b610609565b005b6101ae61061a565b6040516101bb919061218e565b60405180910390f35b6101de60048036038101906101d9919061179e565b610640565b005b6101fa60048036038101906101f591906116b5565b6107da565b005b610216600480360381019061021191906115f6565b6107ea565b005b6102206108ed565b60405161022d919061201a565b60405180910390f35b61023e6108f3565b60405161024b9190612173565b60405180910390f35b61026e6004803603810190610269919061154e565b610919565b60405161027b9190612329565b60405180910390f35b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548411610305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fc90612209565b60405180910390fd5b600061032c8261031e610319888888610975565b610ab3565b610b1e90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061037e86828686610bd9565b505050505050565b60006103ac6103a78360000151846020015185604001518660600151611044565b610ab3565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b600082511161044d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044490612249565b60405180910390fd5b600080600090505b835181101561059b5760003073ffffffffffffffffffffffffffffffffffffffff1685838151811061048357fe5b60200260200101516040516104989190611ef4565b6000604051808303816000865af19150503d80600081146104d5576040519150601f19603f3d011682016040523d82523d6000602084013e6104da565b606091505b5050905083156105295780610524576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051b906121e9565b60405180910390fd5b61053f565b808015610534575082155b1561053e57600192505b5b7f361c14722cc344132c73396113f7164232448b09c544a149f09048648b43d8723386848151811061056d57fe5b60200260200101518360405161058593929190611f98565b60405180910390a1508080600101915050610455565b50806105dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d390612309565b60405180910390fd5b505050565b60006106026105fd836000015184602001518560400151610975565b610ab3565b9050919050565b61061583338484610bd9565b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c5906121c9565b60405180910390fd5b60008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061079c838383611185565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516107cb9190611f7d565b60405180910390a15050505050565b6107e633338484610bd9565b5050565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841161086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290612209565b60405180910390fd5b6000610893826108856108808888883a611044565b610ab3565b610b1e90919063ffffffff16565b905084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108e586828686610bd9565b505050505050565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061096e6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e790919063ffffffff16565b9050919050565b60006060825167ffffffffffffffff8111801561099157600080fd5b506040519080825280602002602001820160405280156109c05781602001602082028036833780820191505090505b50905060005b8351811015610a0f578381815181106109db57fe5b6020026020010151805190602001208282815181106109f657fe5b60200260200101818152505080806001019150506109c6565b507f4dc0a39234edc20669002d7daeb6a39b3af6a6a56073618b70893384c405c8498585604051602001610a439190611ec6565b6040516020818303038152906040528051906020012083604051602001610a6a9190611edd565b60405160208183030381529060405280519060200120604051602001610a939493929190612096565b604051602081830303815290604052805190602001209150509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060015483604051602001610b0193929190611f44565b604051602081830303815290604052805190602001209050919050565b60008060009050604183511415610bcf5760008060006020860151925060408601519150606086015160001a9050601b8160ff161015610b5f57601b810190505b601b8160ff161480610b745750601c8160ff16145b15610bcb5760018782858560405160008152602001604052604051610b9c949392919061212e565b6020604051602081039080840390855afa158015610bbe573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090612229565b60405180910390fd5b6000825111610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c84906122e9565b60405180910390fd5b8151815114610cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc890612289565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610ea557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610d61929190611fd6565b60206040518083038186803b158015610d7957600080fd5b505afa158015610d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db19190611775565b80610e655750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb890d3f85856040518363ffffffff1660e01b8152600401610e14929190611fd6565b60206040518083038186803b158015610e2c57600080fd5b505afa158015610e40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e649190611775565b5b610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b90612269565b60405180910390fd5b5b600080600090505b825181101561103c57600073ffffffffffffffffffffffffffffffffffffffff16848281518110610eda57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f30906121a9565b60405180910390fd5b838181518110610f4557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838281518110610f6f57fe5b60200260200101518787604051602001610f8b93929190611f0b565b604051602081830303815290604052604051610fa79190611ef4565b6000604051808303816000865af19150503d8060008114610fe4576040519150601f19603f3d011682016040523d82523d6000602084013e610fe9565b606091505b5050809250508161102f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611026906122a9565b60405180910390fd5b8080600101915050610ead565b505050505050565b60006060835167ffffffffffffffff8111801561106057600080fd5b5060405190808252806020026020018201604052801561108f5781602001602082028036833780820191505090505b50905060005b84518110156110de578481815181106110aa57fe5b6020026020010151805190602001208282815181106110c557fe5b6020026020010181815250508080600101915050611095565b507f75a27a7ebaa6d94f2ad4eecbc98a424b9a0516c245c680308385c79d2ad6af2a86866040516020016111129190611ec6565b60405160208183030381529060405280519060200120836040516020016111399190611edd565b60405160208183030381529060405280519060200120866040516020016111649594939291906120db565b60405160208183030381529060405280519060200120915050949350505050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016111c596959493929190612035565b6040516020818303038152906040528051906020012060018190555050505050565b600080828401905083811015611232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611229906122c9565b60405180910390fd5b8091505092915050565b60008135905061124b81612630565b92915050565b600082601f83011261126257600080fd5b813561127561127082612371565b612344565b9150818183526020840193506020810190508385602084028201111561129a57600080fd5b60005b838110156112ca57816112b0888261123c565b84526020840193506020830192505060018101905061129d565b5050505092915050565b600082601f8301126112e557600080fd5b81356112f86112f382612399565b612344565b9150818183526020840193506020810190508360005b8381101561133e57813586016113248882611387565b84526020840193506020830192505060018101905061130e565b5050505092915050565b60008135905061135781612647565b92915050565b60008151905061136c81612647565b92915050565b6000813590506113818161265e565b92915050565b600082601f83011261139857600080fd5b81356113ab6113a6826123c1565b612344565b915080825260208301602083018583830111156113c757600080fd5b6113d28382846125a2565b50505092915050565b6000813590506113ea81612675565b92915050565b6000813590506113ff8161268c565b92915050565b60006080828403121561141757600080fd5b6114216080612344565b9050600061143184828501611539565b600083015250602082013567ffffffffffffffff81111561145157600080fd5b61145d84828501611251565b602083015250604082013567ffffffffffffffff81111561147d57600080fd5b611489848285016112d4565b604083015250606061149d84828501611539565b60608301525092915050565b6000606082840312156114bb57600080fd5b6114c56060612344565b905060006114d584828501611539565b600083015250602082013567ffffffffffffffff8111156114f557600080fd5b61150184828501611251565b602083015250604082013567ffffffffffffffff81111561152157600080fd5b61152d848285016112d4565b60408301525092915050565b600081359050611548816126a3565b92915050565b60006020828403121561156057600080fd5b600061156e8482850161123c565b91505092915050565b60008060006060848603121561158c57600080fd5b600061159a8682870161123c565b935050602084013567ffffffffffffffff8111156115b757600080fd5b6115c386828701611251565b925050604084013567ffffffffffffffff8111156115e057600080fd5b6115ec868287016112d4565b9150509250925092565b600080600080600060a0868803121561160e57600080fd5b600061161c8882890161123c565b955050602061162d88828901611539565b945050604086013567ffffffffffffffff81111561164a57600080fd5b61165688828901611251565b935050606086013567ffffffffffffffff81111561167357600080fd5b61167f888289016112d4565b925050608086013567ffffffffffffffff81111561169c57600080fd5b6116a888828901611387565b9150509295509295909350565b600080604083850312156116c857600080fd5b600083013567ffffffffffffffff8111156116e257600080fd5b6116ee85828601611251565b925050602083013567ffffffffffffffff81111561170b57600080fd5b611717858286016112d4565b9150509250929050565b6000806040838503121561173457600080fd5b600083013567ffffffffffffffff81111561174e57600080fd5b61175a858286016112d4565b925050602061176b85828601611348565b9150509250929050565b60006020828403121561178757600080fd5b60006117958482850161135d565b91505092915050565b600080600080600060a086880312156117b657600080fd5b60006117c4888289016113db565b95505060206117d5888289016113f0565b94505060406117e688828901611372565b93505060606117f788828901611372565b925050608061180888828901611372565b9150509295509295909350565b60006020828403121561182757600080fd5b600082013567ffffffffffffffff81111561184157600080fd5b61184d84828501611405565b91505092915050565b60006020828403121561186857600080fd5b600082013567ffffffffffffffff81111561188257600080fd5b61188e848285016114a9565b91505092915050565b60006118a383836118e5565b60208301905092915050565b60006118bb83836119e5565b60208301905092915050565b6118d081612524565b82525050565b6118df816124a1565b82525050565b6118ee816124a1565b82525050565b611905611900826124a1565b6125e4565b82525050565b60006119168261240d565b6119208185612453565b935061192b836123ed565b8060005b8381101561195c5781516119438882611897565b975061194e83612439565b92505060018101905061192f565b5085935050505092915050565b600061197482612418565b61197e818561245e565b9350611989836123fd565b8060005b838110156119ba5781516119a188826118af565b97506119ac83612446565b92505060018101905061198d565b5085935050505092915050565b6119d0816124b3565b82525050565b6119df816124bf565b82525050565b6119ee816124bf565b82525050565b611a05611a00826124bf565b6125f6565b82525050565b6000611a1682612423565b611a208185612469565b9350611a308185602086016125b1565b611a3981612612565b840191505092915050565b6000611a4f82612423565b611a59818561247a565b9350611a698185602086016125b1565b80840191505092915050565b611a7e81612536565b82525050565b611a8d8161255a565b82525050565b6000611a9e8261242e565b611aa88185612496565b9350611ab88185602086016125b1565b80840191505092915050565b6000611ad1601b83612485565b91507f476174657761793a2063616e6e6f742073656e6420746f2030783000000000006000830152602082019050919050565b6000611b11602f83612485565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000611b77601783612485565b91507f476174657761793a2062617463682072657665727465640000000000000000006000830152602082019050919050565b6000611bb7603283612485565b91507f476174657761793a206e6f6e6365206973206c6f776572207468616e2063757260008301527f72656e74206163636f756e74206e6f6e636500000000000000000000000000006020830152604082019050919050565b6000611c1d602583612485565b91507f476174657761793a2063616e6e6f742073656e642066726f6d2030783020616360008301527f636f756e740000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611c83602683612485565b91507f476174657761793a2063616e6e6f742064656c656761746520656d707479206260008301527f61746368657300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611ce9602883612485565b91507f476174657761793a2073656e646572206973206e6f7420746865206163636f7560008301527f6e74206f776e65720000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611d4f601683612485565b91507f476174657761793a20696e76616c6964206261746368000000000000000000006000830152602082019050919050565b6000611d8f602383612485565b91507f476174657761793a206261746368207472616e73616374696f6e20726576657260008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611df5601e83612485565b91507f536166654d6174684c69623a206164646974696f6e206f766572666c6f7700006000830152602082019050919050565b6000611e35602083612485565b91507f476174657761793a2063616e6e6f742073656e6420656d7074792062617463686000830152602082019050919050565b6000611e75601d83612485565b91507f476174657761793a20616c6c20626174636865732072657665727465640000006000830152602082019050919050565b611eb18161250d565b82525050565b611ec081612517565b82525050565b6000611ed2828461190b565b915081905092915050565b6000611ee98284611969565b915081905092915050565b6000611f008284611a44565b915081905092915050565b6000611f178286611a44565b9150611f2382856118f4565b601482019150611f3382846118f4565b601482019150819050949350505050565b6000611f508286611a93565b9150611f5c82856119f4565b602082019150611f6c82846119f4565b602082019150819050949350505050565b6000602082019050611f9260008301846118c7565b92915050565b6000606082019050611fad60008301866118c7565b8181036020830152611fbf8185611a0b565b9050611fce60408301846119c7565b949350505050565b6000604082019050611feb60008301856118d6565b611ff860208301846118d6565b9392505050565b600060208201905061201460008301846119c7565b92915050565b600060208201905061202f60008301846119d6565b92915050565b600060c08201905061204a60008301896119d6565b61205760208301886119d6565b61206460408301876119d6565b6120716060830186611ea8565b61207e60808301856118d6565b61208b60a08301846119d6565b979650505050505050565b60006080820190506120ab60008301876119d6565b6120b86020830186611ea8565b6120c560408301856119d6565b6120d260608301846119d6565b95945050505050565b600060a0820190506120f060008301886119d6565b6120fd6020830187611ea8565b61210a60408301866119d6565b61211760608301856119d6565b6121246080830184611ea8565b9695505050505050565b600060808201905061214360008301876119d6565b6121506020830186611eb7565b61215d60408301856119d6565b61216a60608301846119d6565b95945050505050565b60006020820190506121886000830184611a75565b92915050565b60006020820190506121a36000830184611a84565b92915050565b600060208201905081810360008301526121c281611ac4565b9050919050565b600060208201905081810360008301526121e281611b04565b9050919050565b6000602082019050818103600083015261220281611b6a565b9050919050565b6000602082019050818103600083015261222281611baa565b9050919050565b6000602082019050818103600083015261224281611c10565b9050919050565b6000602082019050818103600083015261226281611c76565b9050919050565b6000602082019050818103600083015261228281611cdc565b9050919050565b600060208201905081810360008301526122a281611d42565b9050919050565b600060208201905081810360008301526122c281611d82565b9050919050565b600060208201905081810360008301526122e281611de8565b9050919050565b6000602082019050818103600083015261230281611e28565b9050919050565b6000602082019050818103600083015261232281611e68565b9050919050565b600060208201905061233e6000830184611ea8565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561236757600080fd5b8060405250919050565b600067ffffffffffffffff82111561238857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123b057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123d857600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006124ac826124ed565b9050919050565b60008115159050919050565b6000819050919050565b60006124d4826124a1565b9050919050565b60006124e6826124a1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061252f8261257e565b9050919050565b600061254182612548565b9050919050565b6000612553826124ed565b9050919050565b60006125658261256c565b9050919050565b6000612577826124ed565b9050919050565b600061258982612590565b9050919050565b600061259b826124ed565b9050919050565b82818337600083830152505050565b60005b838110156125cf5780820151818401526020810190506125b4565b838111156125de576000848401525b50505050565b60006125ef82612600565b9050919050565b6000819050919050565b600061260b82612623565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b612639816124a1565b811461264457600080fd5b50565b612650816124b3565b811461265b57600080fd5b50565b612667816124bf565b811461267257600080fd5b50565b61267e816124c9565b811461268957600080fd5b50565b612695816124db565b81146126a057600080fd5b50565b6126ac8161250d565b81146126b757600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "events": {
      "BatchDelegated(address,bytes,bool)": {
        "details": "Emitted when the single batch is delegated",
        "params": {
          "batch": "batch",
          "sender": "sender address",
          "succeeded": "if succeeded"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Public constructor"
      },
      "delegateBatch(address,uint256,address[],bytes[],bytes)": {
        "details": "Use `hashDelegatedBatch` to create sender message payload. `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "nonce": "next account nonce",
          "senderSignature": "sender signature",
          "to": "array of batch recipients contracts"
        }
      },
      "delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)": {
        "details": "Use `hashDelegatedBatchWithGasPrice` to create sender message payload (tx.gasprice as gasPrice) `GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return recovered address from `senderSignature` arg",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "nonce": "next account nonce",
          "senderSignature": "sender signature",
          "to": "array of batch recipients contracts"
        }
      },
      "delegateBatches(bytes[],bool)": {
        "details": "It will revert when all batches fail",
        "params": {
          "batches": "array of batches",
          "revertOnFailure": "reverts on any error"
        }
      },
      "getAccountNextNonce(address)": {
        "params": {
          "account": "account address"
        },
        "returns": {
          "_0": "next nonce"
        }
      },
      "hashDelegatedBatch((uint256,address[],bytes[]))": {
        "params": {
          "delegatedBatch": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "hashDelegatedBatchWithGasPrice((uint256,address[],bytes[],uint256))": {
        "params": {
          "delegatedBatch": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address,bytes32,bytes32,bytes32)": {
        "params": {
          "externalAccountRegistry_": "`ExternalAccountRegistry` contract address",
          "personalAccountRegistry_": "`PersonalAccountRegistry` contract address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "sendBatch(address[],bytes[])": {
        "details": "`GatewayRecipient` context api: `_getContextAccount` will return `msg.sender` `_getContextSender` will return `msg.sender`",
        "params": {
          "data": "array of batch data",
          "to": "array of batch recipients contracts"
        }
      },
      "sendBatchFromAccount(address,address[],bytes[])": {
        "details": "`GatewayRecipient` context api: `_getContextAccount` will return `account` arg `_getContextSender` will return `msg.sender`",
        "params": {
          "account": "account address",
          "data": "array of batch data",
          "to": "array of batch recipients contracts"
        }
      }
    },
    "title": "Gateway",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "delegateBatch(address,uint256,address[],bytes[],bytes)": {
        "notice": "Delegates batch from the account"
      },
      "delegateBatchWithGasPrice(address,uint256,address[],bytes[],bytes)": {
        "notice": "Delegates batch from the account (with gas price)"
      },
      "delegateBatches(bytes[],bool)": {
        "notice": "Delegates multiple batches"
      },
      "getAccountNextNonce(address)": {
        "notice": "Gets next account nonce"
      },
      "hashDelegatedBatch((uint256,address[],bytes[]))": {
        "notice": "Hashes `DelegatedBatch` typed data"
      },
      "hashDelegatedBatchWithGasPrice((uint256,address[],bytes[],uint256))": {
        "notice": "Hashes `DelegatedBatchWithGasPrice` typed data"
      },
      "initialize(address,address,bytes32,bytes32,bytes32)": {
        "notice": "Initializes `Gateway` contract"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "sendBatch(address[],bytes[])": {
        "notice": "Sends batch"
      },
      "sendBatchFromAccount(address,address[],bytes[])": {
        "notice": "Sends batch from the account"
      }
    },
    "notice": "GSN replacement",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 824,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "initializer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1252,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2473,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "externalAccountRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ExternalAccountRegistry)2421"
      },
      {
        "astId": 2475,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "personalAccountRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PersonalAccountRegistry)5133"
      },
      {
        "astId": 2479,
        "contract": "src/gateway/Gateway.sol:Gateway",
        "label": "accountNonce",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ExternalAccountRegistry)2421": {
        "encoding": "inplace",
        "label": "contract ExternalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(PersonalAccountRegistry)5133": {
        "encoding": "inplace",
        "label": "contract PersonalAccountRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}