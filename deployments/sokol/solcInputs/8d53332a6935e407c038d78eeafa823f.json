{
  "language": "Solidity",
  "sources": {
    "src/ens/ENSController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport \"../common/access/Guarded.sol\";\nimport \"../common/lifecycle/Initializable.sol\";\nimport \"../common/typedData/TypedDataContainer.sol\";\nimport \"../gateway/GatewayRecipient.sol\";\nimport \"./ENSRegistry.sol\";\n\n\n/**\n * @title ENS controller\n *\n * @notice ENS subnode registrar\n *\n * @dev The process of adding root node consists of 3 steps:\n * 1. `submitNode` - should be called from ENS node owner,\n * 2. Change ENS node owner in ENS registry to ENS controller,\n * 3. `verifyNode` - should be called from previous ENS node owner,\n *\n * To register sub node, `msg.sender` need to send valid signature from one of guardian key.\n * Once registration is complete `msg.sender` becoming both node owner and `addr` record value.\n *\n * After registration sub node cannot be replaced.\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient {\n  struct Node {\n    address addr;\n    address owner;\n  }\n\n  struct SubNodeRegistration {\n    address account;\n    bytes32 node;\n    bytes32 label;\n  }\n\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\n    \"SubNodeRegistration(address account,bytes32 node,bytes32 label)\"\n  );\n\n  ENSRegistry public registry;\n\n  mapping(bytes32 => Node) private nodes;\n\n  // events\n\n  /**\n   * @dev Emitted when the address field in node resolver is changed\n   * @param node node name hash\n   * @param addr new address\n   */\n  event AddrChanged(\n    bytes32 indexed node,\n    address addr\n  );\n\n  /**\n   * @dev Emitted when new node is submitted\n   * @param node node name hash\n   * @param owner owner address\n   */\n  event NodeSubmitted(\n    bytes32 node,\n    address owner\n  );\n\n  /**\n   * @dev Emitted when the existing owner is verified\n   * @param node node name hash\n   */\n  event NodeVerified(\n    bytes32 node\n  );\n\n  /**\n   * @dev Emitted when new node is released\n   * @param node node name hash\n   * @param owner owner address\n   */\n  event NodeReleased(\n    bytes32 node,\n    address owner\n  );\n\n  /**\n   * @dev Emitted when ENS registry address is changed\n   * @param registry registry address\n   */\n  event RegistryChanged(\n    address registry\n  );\n\n  /**\n   * @dev Public constructor\n   */\n  constructor() public Guarded() Initializable() {}\n\n  // external functions\n\n  /**\n   * @notice Initializes `ENSController` contract\n   * @param registry_ ENS registry address\n   * @param gateway_ gateway address\n   * @param typedDataDomainNameHash hash of a typed data domain name\n   * @param typedDataDomainVersionHash hash of a typed data domain version\n   * @param typedDataDomainSalt typed data salt\n   */\n  function initialize(\n    ENSRegistry registry_,\n    address[] calldata guardians_,\n    address gateway_,\n    bytes32 typedDataDomainNameHash,\n    bytes32 typedDataDomainVersionHash,\n    bytes32 typedDataDomainSalt\n  )\n    external\n    onlyInitializer\n  {\n    require(\n      address(registry_) != address(0),\n      \"ENSController: cannot set 0x0 registry\"\n    );\n\n    registry = registry_;\n\n    // Guarded\n    _initializeGuarded(guardians_);\n\n    // GatewayRecipient\n    _initializeGatewayRecipient(gateway_);\n\n    // TypedDataContainer\n    _initializeTypedDataContainer(\n      typedDataDomainNameHash,\n      typedDataDomainVersionHash,\n      typedDataDomainSalt\n    );\n  }\n\n  /**\n   * @notice Sets registry\n   * @param registry_ registry address\n   */\n  function setRegistry(\n    ENSRegistry registry_\n  )\n    external\n    onlyGuardian\n  {\n    require(\n      address(registry_) != address(0),\n      \"ENSController: cannot set 0x0 registry\"\n    );\n\n    require(\n      registry_ != registry,\n      \"ENSController: registry already set\"\n    );\n\n    registry = registry_;\n\n    emit RegistryChanged(\n      address(registry)\n    );\n  }\n\n  /**\n   * @notice Submits node\n   * @dev Should be called from the current ENS node owner\n   * @param node node name hash\n   */\n  function submitNode(\n    bytes32 node\n  )\n    external\n  {\n    address owner = _getContextAccount();\n\n    require(\n      nodes[node].addr == address(0),\n      \"ENSController: node already exists\"\n    );\n\n    require(\n      nodes[node].owner == address(0),\n      \"ENSController: node already submitted\"\n    );\n\n    require(\n      registry.owner(node) == owner,\n      \"ENSController: invalid ens node owner\"\n    );\n\n    nodes[node].owner = owner;\n\n    emit NodeSubmitted(node, owner);\n  }\n\n  /**\n   * @notice Verifies node\n   * @dev Should be called from the previous ENS node owner\n   * @param node node name hash\n   */\n  function verifyNode(\n    bytes32 node\n  )\n    external\n  {\n    address owner = _getContextAccount();\n\n    require(\n      nodes[node].addr == address(0),\n      \"ENSController: node already exists\"\n    );\n\n    require(\n      nodes[node].owner == owner,\n      \"ENSController: invalid node owner\"\n    );\n\n    require(\n      registry.owner(node) == address(this),\n      \"ENSController: invalid ens node owner\"\n    );\n\n    nodes[node].addr = address(this);\n\n    registry.setResolver(node, address(this));\n\n    emit NodeVerified(node);\n  }\n\n  /**\n   * @notice Releases node\n   * @dev Should be called from the previous ENS node owner\n   * @param node node name hash\n   */\n  function releaseNode(\n    bytes32 node\n  )\n    external\n  {\n    address owner = _getContextAccount();\n\n    require(\n      nodes[node].addr == address(this),\n      \"ENSController: node doesn't exist\"\n    );\n\n    require(\n      nodes[node].owner == owner,\n      \"ENSController: invalid node owner\"\n    );\n\n    registry.setOwner(node, owner);\n\n    delete nodes[node].addr;\n    delete nodes[node].owner;\n\n    emit NodeReleased(node, owner);\n  }\n\n  /**\n   * @notice Sets address\n   * @dev Used in address resolver\n   * @param node node name hash\n   * @param addr address\n   */\n  function setAddr(\n    bytes32 node,\n    address addr\n  )\n    external\n  {\n    require(\n      nodes[node].addr == _getContextAccount(),\n      \"ENSController: caller is not the node owner\"\n    );\n\n    nodes[node].addr = addr;\n\n    emit AddrChanged(node, addr);\n  }\n\n  /**\n   * @notice Sync address\n   * @param node node name hash\n   */\n  function syncAddr(\n    bytes32 node\n  )\n    external\n  {\n    address account = _getContextAccount();\n\n    require(\n      account == registry.owner(node),\n      \"ENSController: caller is not the node owner\"\n    );\n\n    require(\n      registry.resolver(node) == address(this),\n      \"ENSController: invalid node resolver\"\n    );\n\n    require(\n      nodes[node].addr == address(0),\n      \"ENSController: node already in sync\"\n    );\n\n    nodes[node].addr = account;\n\n    emit AddrChanged(node, account);\n  }\n\n  /**\n   * @notice Registers sub node\n   * @param node node name hash\n   * @param label label hash\n   * @param guardianSignature guardian signature\n   */\n  function registerSubNode(\n    bytes32 node,\n    bytes32 label,\n    bytes calldata guardianSignature\n  )\n    external\n  {\n    address account = _getContextAccount();\n\n    bytes32 messageHash = _hashPrimaryTypedData(\n      _hashTypedData(\n        account,\n        node,\n        label\n      )\n    );\n\n    require(\n      _verifyGuardianSignature(messageHash, guardianSignature),\n      \"ENSController: invalid guardian signature\"\n    );\n\n    bytes32 subNode = keccak256(\n      abi.encodePacked(\n        node,\n        label\n      )\n    );\n\n    require(\n      nodes[node].addr == address(this),\n      \"ENSController: invalid node\"\n    );\n\n    require(\n      nodes[subNode].addr == address(0),\n      \"ENSController: label already taken\"\n    );\n\n    nodes[subNode].addr = account;\n\n    registry.setSubnodeOwner(node, label, address(this));\n    registry.setResolver(subNode, address(this));\n    registry.setOwner(subNode, account);\n\n    emit AddrChanged(subNode, account);\n  }\n\n  // external functions (views)\n\n  /**\n   * @notice Gets address\n   * @dev Used in address resolver\n   * @param node node name hash\n   * @return node address\n   */\n  function addr(\n    bytes32 node\n  )\n    external\n    view\n    returns (address)\n  {\n    return nodes[node].addr;\n  }\n  /**\n   * @notice Gets node\n   * @param node node name hash\n   */\n  function getNode(\n    bytes32 node\n  )\n    external\n    view\n    returns (address nodeAddr, address nodeOwner)\n  {\n    return (nodes[node].addr, nodes[node].owner);\n  }\n\n  // external functions (pure)\n\n  /**\n   * @notice Checks if contract supports interface\n   * @param interfaceID method signature\n   * @return true when contract supports interface\n   */\n  function supportsInterface(\n    bytes4 interfaceID\n  )\n    external\n    pure\n    returns (bool)\n  {\n    return (\n      /// @dev bytes4(keccak256('supportsInterface(bytes4)'));\n      interfaceID == 0x01ffc9a7 ||\n      /// @dev bytes4(keccak256('addr(bytes32)'));\n      interfaceID == 0x3b3b57de\n    );\n  }\n\n  // public functions (views)\n\n  /**\n   * @notice Hashes `SubNodeRegistration` typed data\n   * @param subNodeRegistration struct\n   * @return hash\n   */\n  function hashSubNodeRegistration(\n    SubNodeRegistration memory subNodeRegistration\n  )\n    public\n    view\n    returns (bytes32)\n  {\n    return _hashPrimaryTypedData(\n      _hashTypedData(\n        subNodeRegistration.account,\n        subNodeRegistration.node,\n        subNodeRegistration.label\n      )\n    );\n  }\n\n  // private functions (pure)\n\n  function _hashTypedData(\n    address account,\n    bytes32 node,\n    bytes32 label\n  )\n    private\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encode(\n      SUB_NODE_REGISTRATION_TYPE_HASH,\n      account,\n      node,\n      label\n    ));\n  }\n}\n"
    },
    "src/common/access/Guarded.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"../libs/SignatureLib.sol\";\n\n\n/**\n * @title Guarded\n *\n * @dev Contract module which provides a guardian-type control mechanism.\n * It allows key accounts to have guardians and restricts specific methods to be accessible by guardians only.\n *\n * Each guardian account can remove other guardians\n *\n * Use `_initializeGuarded` to initialize the contract\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\ncontract Guarded {\n  using SignatureLib for bytes32;\n\n  mapping(address => bool) private guardians;\n\n  // events\n\n  /**\n   * @dev Emitted when a new guardian is added\n   * @param sender sender address\n   * @param guardian guardian address\n   */\n  event GuardianAdded(\n    address sender,\n    address guardian\n  );\n\n  /**\n   * @dev Emitted when the existing guardian is removed\n   * @param sender sender address\n   * @param guardian guardian address\n   */\n  event GuardianRemoved(\n    address sender,\n    address guardian\n  );\n\n  // modifiers\n\n  /**\n   * @dev Throws if tx.origin is not a guardian account\n   */\n  modifier onlyGuardian() {\n    require(\n      // solhint-disable-next-line avoid-tx-origin\n      guardians[tx.origin],\n      \"Guarded: tx.origin is not the guardian\"\n    );\n\n    _;\n  }\n\n  /**\n   * @dev Internal constructor\n   */\n  constructor() internal {}\n\n  // external functions\n\n  /**\n   * @notice Adds a new guardian\n   * @param guardian guardian address\n   */\n  function addGuardian(\n    address guardian\n  )\n    external\n    onlyGuardian\n  {\n    _addGuardian(guardian);\n  }\n\n  /**\n   * @notice Removes the existing guardian\n   * @param guardian guardian address\n   */\n  function removeGuardian(\n    address guardian\n  )\n    external\n    onlyGuardian\n  {\n    require(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin != guardian,\n      \"Guarded: cannot remove self\"\n    );\n\n    require(\n      guardians[guardian],\n      \"Guarded: guardian doesn't exist\"\n    );\n\n    guardians[guardian] = false;\n\n    emit GuardianRemoved(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin,\n      guardian\n    );\n  }\n\n  // external functions (views)\n\n  /**\n   * @notice Check if guardian exists\n   * @param guardian guardian address\n   * @return true when guardian exists\n   */\n  function isGuardian(\n    address guardian\n  )\n    external\n    view\n    returns (bool)\n  {\n    return guardians[guardian];\n  }\n\n  /**\n   * @notice Verifies guardian signature\n   * @param messageHash message hash\n   * @param signature signature\n   * @return true on correct guardian signature\n   */\n  function verifyGuardianSignature(\n    bytes32 messageHash,\n    bytes calldata signature\n  )\n    external\n    view\n    returns (bool)\n  {\n    return _verifyGuardianSignature(\n      messageHash,\n      signature\n    );\n  }\n\n  // internal functions\n\n  /**\n   * @notice Initializes `Guarded` contract\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\n   * @param guardians_ array of guardians addresses\n   */\n  function _initializeGuarded(\n    address[] memory guardians_\n  )\n    internal\n  {\n    if (guardians_.length == 0) {\n      // solhint-disable-next-line avoid-tx-origin\n      _addGuardian(tx.origin);\n    } else {\n      uint guardiansLen = guardians_.length;\n      for (uint i = 0; i < guardiansLen; i++) {\n        _addGuardian(guardians_[i]);\n      }\n    }\n  }\n\n\n  // internal functions (views)\n\n  function _verifyGuardianSignature(\n    bytes32 messageHash,\n    bytes memory signature\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address guardian = messageHash.recoverAddress(signature);\n\n    return guardians[guardian];\n  }\n\n  // private functions\n\n  function _addGuardian(\n    address guardian\n  )\n    private\n  {\n    require(\n      guardian != address(0),\n      \"Guarded: cannot add 0x0 guardian\"\n    );\n\n    require(\n      !guardians[guardian],\n      \"Guarded: guardian already exists\"\n    );\n\n    guardians[guardian] = true;\n\n    emit GuardianAdded(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin,\n      guardian\n    );\n  }\n}\n"
    },
    "src/common/lifecycle/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @title Initializable\n *\n * @dev Contract module which provides access control mechanism, where\n * there is the initializer account that can be granted exclusive access to\n * specific functions.\n *\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\n * Use `onlyInitializer` modifier on contract initialize process.\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\ncontract Initializable {\n  address private initializer;\n\n  // events\n\n  /**\n   * @dev Emitted after `onlyInitializer`\n   * @param initializer initializer address\n   */\n  event Initialized(\n    address initializer\n  );\n\n  // modifiers\n\n  /**\n   * @dev Throws if tx.origin is not the initializer\n   */\n  modifier onlyInitializer() {\n    require(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin == initializer,\n      \"Initializable: tx.origin is not the initializer\"\n    );\n\n    /// @dev removes initializer\n    initializer = address(0);\n\n    _;\n\n    emit Initialized(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin\n    );\n  }\n\n  /**\n   * @dev Internal constructor\n   */\n  constructor()\n    internal\n  {\n    // solhint-disable-next-line avoid-tx-origin\n    initializer = tx.origin;\n  }\n\n   // external functions (views)\n\n  /**\n   * @notice Check if contract is initialized\n   * @return true when contract is initialized\n   */\n  function isInitialized()\n    external\n    view\n    returns (bool)\n  {\n    return initializer == address(0);\n  }\n}\n"
    },
    "src/common/typedData/TypedDataContainer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @title Typed data container\n *\n * @dev EIP-712 is used across whole repository.\n *\n * Use `_initializeTypedDataContainer` to initialize the contract\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\ncontract TypedDataContainer {\n  string private constant TYPED_DATA_PREFIX = \"\\x19\\x01\";\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\"\n  );\n\n  bytes32 public typedDataDomainSeparator;\n\n  /**\n   * @dev internal constructor\n   */\n  constructor() internal {}\n\n  // internal functions\n\n  /**\n   * @notice Initializes `TypedDataContainer` contract\n   * @param domainNameHash hash of a domain name\n   * @param domainVersionHash hash of a domain version\n   * @param domainSalt domain salt\n   */\n  function _initializeTypedDataContainer(\n    bytes32 domainNameHash,\n    bytes32 domainVersionHash,\n    bytes32 domainSalt\n  )\n    internal\n  {\n    uint256 chainId;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      chainId := chainid()\n    }\n\n    typedDataDomainSeparator = keccak256(abi.encode(\n        TYPED_DATA_DOMAIN_TYPE_HASH,\n        domainNameHash,\n        domainVersionHash,\n        chainId,\n        address(this),\n        domainSalt\n    ));\n  }\n\n  // internal functions (views)\n\n  /**\n   * @notice Hashes primary typed data\n   * @param dataHash hash of the data\n   */\n  function _hashPrimaryTypedData(\n    bytes32 dataHash\n  )\n    internal\n    view\n    returns (bytes32)\n  {\n    return keccak256(abi.encodePacked(\n      TYPED_DATA_PREFIX,\n      typedDataDomainSeparator,\n      dataHash\n    ));\n  }\n}\n"
    },
    "src/gateway/GatewayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\nimport \"../common/libs/BytesLib.sol\";\n\n\n/**\n * @title Gateway recipient\n *\n * @notice Gateway target contract\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\ncontract GatewayRecipient {\n  using BytesLib for bytes;\n\n  address public gateway;\n\n  /**\n   * @dev internal constructor\n   */\n  constructor() internal {}\n\n  // internal functions\n\n  /**\n   * @notice Initializes `GatewayRecipient` contract\n   * @param gateway_ `Gateway` contract address\n   */\n  function _initializeGatewayRecipient(\n    address gateway_\n  )\n    internal\n  {\n    gateway = gateway_;\n  }\n\n  // internal functions (views)\n\n  /**\n   * @notice Gets gateway context account\n   * @return context account address\n   */\n  function _getContextAccount()\n    internal\n    view\n    returns (address)\n  {\n    return _getContextAddress(40);\n  }\n\n  /**\n   * @notice Gets gateway context sender\n   * @return context sender address\n   */\n  function _getContextSender()\n    internal\n    view\n    returns (address)\n  {\n    return _getContextAddress(20);\n  }\n\n  /**\n   * @notice Gets gateway context data\n   * @return context data\n   */\n  function _getContextData()\n    internal\n    view\n    returns (bytes calldata)\n  {\n    bytes calldata result;\n\n    if (_isGatewaySender()) {\n      result = msg.data[:msg.data.length - 40];\n    } else {\n      result = msg.data;\n    }\n\n    return result;\n  }\n\n  // private functions (views)\n\n  function _getContextAddress(\n    uint256 offset\n  )\n    private\n    view\n    returns (address)\n  {\n    address result = address(0);\n\n    if (_isGatewaySender()) {\n      uint from = msg.data.length - offset;\n      result = bytes(msg.data[from:from + 20]).toAddress();\n    } else {\n      result = msg.sender;\n    }\n\n    return result;\n  }\n\n  function _isGatewaySender()\n    private\n    view\n    returns (bool)\n  {\n    bool result;\n\n    if (msg.sender == gateway) {\n      require(\n        msg.data.length >= 44,\n        \"GatewayRecipient: invalid msg.data\"\n      );\n\n      result = true;\n    }\n\n    return result;\n  }\n}\n"
    },
    "src/ens/ENSRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @title ENS registry\n *\n * @dev Base on https://github.com/ensdomains/ens/blob/v0.2.2/contracts/ENSRegistry.sol\n */\ncontract ENSRegistry {\n  struct Record {\n    address owner;\n    address resolver;\n    uint64 ttl;\n  }\n\n  mapping(bytes32 => Record) private records;\n\n  // events\n\n  event NewOwner(\n    bytes32 indexed node,\n    bytes32 indexed label,\n    address owner\n  );\n\n  event Transfer(\n    bytes32 indexed node,\n    address owner\n  );\n\n  event NewResolver(\n    bytes32 indexed node,\n    address resolver\n  );\n\n  event NewTTL(\n    bytes32 indexed node,\n    uint64 ttl\n  );\n\n  // modifiers\n\n  modifier onlyNodeOwner(\n    bytes32 node\n  ) {\n    require(\n      records[node].owner == msg.sender,\n      \"ENSRegistry: msg.sender is not the node owner\"\n    );\n\n    _;\n  }\n\n  /**\n   * @dev public constructor\n   */\n  constructor()\n    public\n  {\n    records[0x0].owner = tx.origin;\n  }\n\n  // external functions\n\n  function setOwner(\n    bytes32 node,\n    address owner\n  )\n    external\n    onlyNodeOwner(node)\n  {\n    records[node].owner = owner;\n\n    emit Transfer(node, owner);\n  }\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  )\n    external\n    onlyNodeOwner(node)\n  {\n    bytes32 subNode = keccak256(\n      abi.encodePacked(\n        node,\n        label\n      )\n    );\n\n    records[subNode].owner = owner;\n\n    emit NewOwner(node, label, owner);\n  }\n\n  function setResolver(\n    bytes32 node,\n    address resolver\n  )\n    external\n    onlyNodeOwner(node)\n  {\n    records[node].resolver = resolver;\n\n    emit NewResolver(node, resolver);\n  }\n\n  function setTTL(\n    bytes32 node,\n    uint64 ttl\n  )\n    external\n    onlyNodeOwner(node)\n  {\n    records[node].ttl = ttl;\n\n    emit NewTTL(node, ttl);\n  }\n\n  // external functions (views)\n\n  function owner(\n    bytes32 node\n  )\n    external\n    view\n    returns (address)\n  {\n    return records[node].owner;\n  }\n\n  function resolver(\n    bytes32 node\n  )\n    external\n    view\n    returns (address)\n  {\n    return records[node].resolver;\n  }\n\n  function ttl(\n    bytes32 node\n  )\n    external\n    view\n    returns (uint64)\n  {\n    return records[node].ttl;\n  }\n}\n"
    },
    "src/common/libs/SignatureLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @title Signature library\n *\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\n */\nlibrary SignatureLib {\n  function recoverAddress(\n    bytes32 messageHash,\n    bytes memory signature\n  )\n    internal\n    pure\n    returns (address)\n  {\n    address result = address(0);\n\n    if (signature.length == 65) {\n      bytes32 r;\n      bytes32 s;\n      uint8 v;\n\n      // solhint-disable-next-line no-inline-assembly\n      assembly {\n        r := mload(add(signature, 0x20))\n        s := mload(add(signature, 0x40))\n        v := byte(0, mload(add(signature, 0x60)))\n      }\n\n      if (v < 27) {\n        v += 27;\n      }\n\n      if (v == 27 || v == 28) {\n        result = ecrecover(messageHash, v, r, s);\n      }\n    }\n\n    return result;\n  }\n}\n"
    },
    "src/common/libs/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.12;\n\n/**\n * @title Bytes library\n *\n * @author Stanisław Głogowski <stan@pillarproject.io>\n */\nlibrary BytesLib {\n  /**\n   * @notice Converts bytes to address\n   * @param data data\n   * @return address\n   */\n  function toAddress(\n    bytes memory data\n  )\n    internal\n    pure\n    returns (address)\n  {\n    address result;\n\n    require(\n      data.length == 20,\n      \"BytesLib: invalid data length\"\n    );\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\n    }\n\n    return result;\n  }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}