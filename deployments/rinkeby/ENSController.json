{
  "address": "0xEAC5f4733A2CF6d0230342fDF62ed608e2993926",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "NodeVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "getNode",
      "outputs": [
        {
          "internalType": "address",
          "name": "nodeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nodeOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "label",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ENSController.SubNodeRegistration",
          "name": "subNodeRegistration",
          "type": "tuple"
        }
      ],
      "name": "hashSubNodeRegistration",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "guardians_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "registerSubNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "releaseNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "submitNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "syncAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGuardianSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "verifyNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27603943959cc1e04668e8c16a64375c63d797fcc4724988ad3435e2f57b701a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x53fE9288897e254698175740aa359E19E26c10af",
    "contractAddress": null,
    "transactionIndex": 6,
    "gasUsed": "3233447",
    "logsBloom": "0x
    "blockHash": "0x2e3a74d8954ad24f5601ae93a3fb56a203d209970393444dec67cb927ec71c34",
    "transactionHash": "0x27603943959cc1e04668e8c16a64375c63d797fcc4724988ad3435e2f57b701a",
    "logs": [],
    "blockNumber": 8129469,
    "cumulativeGasUsed": "3800836",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5693ffe2ea8a788842d34a9464a5efc5",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"NodeVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"getNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nodeOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"internalType\":\"struct ENSController.SubNodeRegistration\",\"name\":\"subNodeRegistration\",\"type\":\"tuple\"}],\"name\":\"hashSubNodeRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardians_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"registerSubNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"releaseNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"submitNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"syncAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGuardianSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"verifyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"details\":\"The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.\",\"events\":{\"AddrChanged(bytes32,address)\":{\"details\":\"Emitted when the address field in node resolver is changed\",\"params\":{\"addr\":\"new address\",\"node\":\"node name hash\"}},\"NodeReleased(bytes32,address)\":{\"details\":\"Emitted when new node is released\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeSubmitted(bytes32,address)\":{\"details\":\"Emitted when new node is submitted\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeVerified(bytes32)\":{\"details\":\"Emitted when the existing owner is verified\",\"params\":{\"node\":\"node name hash\"}},\"RegistryChanged(address)\":{\"details\":\"Emitted when ENS registry address is changed\",\"params\":{\"registry\":\"registry address\"}}},\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"addr(bytes32)\":{\"details\":\"Used in address resolver\",\"params\":{\"node\":\"node name hash\"},\"returns\":{\"_0\":\"node address\"}},\"constructor\":{\"details\":\"Public constructor\"},\"getNode(bytes32)\":{\"params\":{\"node\":\"node name hash\"}},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"params\":{\"subNodeRegistration\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"params\":{\"gateway_\":\"gateway address\",\"registry_\":\"ENS registry address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"},\"returns\":{\"_0\":\"true when guardian exists\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"registerSubNode(bytes32,bytes32,bytes)\":{\"params\":{\"guardianSignature\":\"guardian signature\",\"label\":\"label hash\",\"node\":\"node name hash\"}},\"releaseNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"removeGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"setAddr(bytes32,address)\":{\"details\":\"Used in address resolver\",\"params\":{\"addr\":\"address\",\"node\":\"node name hash\"}},\"setRegistry(address)\":{\"params\":{\"registry_\":\"registry address\"}},\"submitNode(bytes32)\":{\"details\":\"Should be called from the current ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceID\":\"method signature\"},\"returns\":{\"_0\":\"true when contract supports interface\"}},\"syncAddr(bytes32)\":{\"params\":{\"node\":\"node name hash\"}},\"verifyGuardianSignature(bytes32,bytes)\":{\"params\":{\"messageHash\":\"message hash\",\"signature\":\"signature\"},\"returns\":{\"_0\":\"true on correct guardian signature\"}},\"verifyNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}}},\"title\":\"ENS controller\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Adds a new guardian\"},\"addr(bytes32)\":{\"notice\":\"Gets address\"},\"getNode(bytes32)\":{\"notice\":\"Gets node\"},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"notice\":\"Hashes `SubNodeRegistration` typed data\"},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initializes `ENSController` contract\"},\"isGuardian(address)\":{\"notice\":\"Check if guardian exists\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"registerSubNode(bytes32,bytes32,bytes)\":{\"notice\":\"Registers sub node\"},\"releaseNode(bytes32)\":{\"notice\":\"Releases node\"},\"removeGuardian(address)\":{\"notice\":\"Removes the existing guardian\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets address\"},\"setRegistry(address)\":{\"notice\":\"Sets registry\"},\"submitNode(bytes32)\":{\"notice\":\"Submits node\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if contract supports interface\"},\"syncAddr(bytes32)\":{\"notice\":\"Sync address\"},\"verifyGuardianSignature(bytes32,bytes)\":{\"notice\":\"Verifies guardian signature\"},\"verifyNode(bytes32)\":{\"notice\":\"Verifies node\"}},\"notice\":\"ENS subnode registrar\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ens/ENSController.sol\":\"ENSController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n *\\n * @dev Contract module which provides a guardian-type control mechanism.\\n * It allows key accounts to have guardians and restricts specific methods to be accessible by guardians only.\\n *\\n * Each guardian account can remove other guardians\\n *\\n * Use `_initializeGuarded` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when a new guardian is added\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianAdded(\\n    address sender,\\n    address guardian\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing guardian is removed\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianRemoved(\\n    address sender,\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not a guardian account\\n   */\\n  modifier onlyGuardian() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      guardians[tx.origin],\\n      \\\"Guarded: tx.origin is not the guardian\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new guardian\\n   * @param guardian guardian address\\n   */\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  /**\\n   * @notice Removes the existing guardian\\n   * @param guardian guardian address\\n   */\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin != guardian,\\n      \\\"Guarded: cannot remove self\\\"\\n    );\\n\\n    require(\\n      guardians[guardian],\\n      \\\"Guarded: guardian doesn't exist\\\"\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Check if guardian exists\\n   * @param guardian guardian address\\n   * @return true when guardian exists\\n   */\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  /**\\n   * @notice Verifies guardian signature\\n   * @param messageHash message hash\\n   * @param signature signature\\n   * @return true on correct guardian signature\\n   */\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `Guarded` contract\\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\\n   * @param guardians_ array of guardians addresses\\n   */\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _addGuardian(tx.origin);\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0),\\n      \\\"Guarded: cannot add 0x0 guardian\\\"\\n    );\\n\\n    require(\\n      !guardians[guardian],\\n      \\\"Guarded: guardian already exists\\\"\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x8f2e314e77e258f9ff75a55f031472ece62af57c60dbd718463d961282f7bd65\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/utils/Strings.sol#L12\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  function toEthereumSignedMessageHash(\\n    bytes memory message\\n  )\\n    internal\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n      _uintToString(message.length),\\n      abi.encodePacked(message)\\n    ));\\n  }\\n\\n  function _uintToString(\\n    uint num\\n  )\\n    private\\n    pure\\n    returns (string memory)\\n  {\\n    if (num == 0) {\\n      return \\\"0\\\";\\n    } else if (num == 32) {\\n      return \\\"32\\\";\\n    }\\n\\n    uint i = num;\\n    uint j = num;\\n\\n    uint len;\\n\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n\\n    bytes memory result = new bytes(len);\\n\\n    uint k = len - 1;\\n\\n    while (i != 0) {\\n      result[k--] = byte(uint8(48 + i % 10));\\n      i /= 10;\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\",\"keccak256\":\"0x142d97534c2f5a8d69c4a1e1d1e83fc268beb36dc7ce65335aebfc4f81c71531\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/ens/ENSController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\nimport \\\"./ENSRegistry.sol\\\";\\n\\n\\n/**\\n * @title ENS controller\\n *\\n * @notice ENS subnode registrar\\n *\\n * @dev The process of adding root node consists of 3 steps:\\n * 1. `submitNode` - should be called from ENS node owner,\\n * 2. Change ENS node owner in ENS registry to ENS controller,\\n * 3. `verifyNode` - should be called from previous ENS node owner,\\n *\\n * To register sub node, `msg.sender` need to send valid signature from one of guardian key.\\n * Once registration is complete `msg.sender` becoming both node owner and `addr` record value.\\n *\\n * After registration sub node cannot be replaced.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient {\\n  struct Node {\\n    address addr;\\n    address owner;\\n  }\\n\\n  struct SubNodeRegistration {\\n    address account;\\n    bytes32 node;\\n    bytes32 label;\\n  }\\n\\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\\n    \\\"SubNodeRegistration(address account,bytes32 node,bytes32 label)\\\"\\n  );\\n\\n  ENSRegistry public registry;\\n\\n  mapping(bytes32 => Node) private nodes;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the address field in node resolver is changed\\n   * @param node node name hash\\n   * @param addr new address\\n   */\\n  event AddrChanged(\\n    bytes32 indexed node,\\n    address addr\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is submitted\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeSubmitted(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is verified\\n   * @param node node name hash\\n   */\\n  event NodeVerified(\\n    bytes32 node\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is released\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeReleased(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when ENS registry address is changed\\n   * @param registry registry address\\n   */\\n  event RegistryChanged(\\n    address registry\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ENSController` contract\\n   * @param registry_ ENS registry address\\n   * @param gateway_ gateway address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ENSRegistry registry_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets registry\\n   * @param registry_ registry address\\n   */\\n  function setRegistry(\\n    ENSRegistry registry_\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    require(\\n      registry_ != registry,\\n      \\\"ENSController: registry already set\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    emit RegistryChanged(\\n      address(registry)\\n    );\\n  }\\n\\n  /**\\n   * @notice Submits node\\n   * @dev Should be called from the current ENS node owner\\n   * @param node node name hash\\n   */\\n  function submitNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == address(0),\\n      \\\"ENSController: node already submitted\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == owner,\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].owner = owner;\\n\\n    emit NodeSubmitted(node, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function verifyNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == address(this),\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].addr = address(this);\\n\\n    registry.setResolver(node, address(this));\\n\\n    emit NodeVerified(node);\\n  }\\n\\n  /**\\n   * @notice Releases node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function releaseNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: node doesn't exist\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    registry.setOwner(node, owner);\\n\\n    delete nodes[node].addr;\\n    delete nodes[node].owner;\\n\\n    emit NodeReleased(node, owner);\\n  }\\n\\n  /**\\n   * @notice Sets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   * @param addr address\\n   */\\n  function setAddr(\\n    bytes32 node,\\n    address addr\\n  )\\n    external\\n  {\\n    require(\\n      nodes[node].addr == _getContextAccount(),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    nodes[node].addr = addr;\\n\\n    emit AddrChanged(node, addr);\\n  }\\n\\n  /**\\n   * @notice Sync address\\n   * @param node node name hash\\n   */\\n  function syncAddr(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    require(\\n      account == registry.owner(node),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    require(\\n      registry.resolver(node) == address(this),\\n      \\\"ENSController: invalid node resolver\\\"\\n    );\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already in sync\\\"\\n    );\\n\\n    nodes[node].addr = account;\\n\\n    emit AddrChanged(node, account);\\n  }\\n\\n  /**\\n   * @notice Registers sub node\\n   * @param node node name hash\\n   * @param label label hash\\n   * @param guardianSignature guardian signature\\n   */\\n  function registerSubNode(\\n    bytes32 node,\\n    bytes32 label,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"ENSController: invalid guardian signature\\\"\\n    );\\n\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: invalid node\\\"\\n    );\\n\\n    require(\\n      nodes[subNode].addr == address(0),\\n      \\\"ENSController: label already taken\\\"\\n    );\\n\\n    nodes[subNode].addr = account;\\n\\n    registry.setSubnodeOwner(node, label, address(this));\\n    registry.setResolver(subNode, address(this));\\n    registry.setOwner(subNode, account);\\n\\n    emit AddrChanged(subNode, account);\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Gets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   * @return node address\\n   */\\n  function addr(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return nodes[node].addr;\\n  }\\n  /**\\n   * @notice Gets node\\n   * @param node node name hash\\n   */\\n  function getNode(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address nodeAddr, address nodeOwner)\\n  {\\n    return (nodes[node].addr, nodes[node].owner);\\n  }\\n\\n  // external functions (pure)\\n\\n  /**\\n   * @notice Checks if contract supports interface\\n   * @param interfaceID method signature\\n   * @return true when contract supports interface\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  )\\n    external\\n    pure\\n    returns (bool)\\n  {\\n    return (\\n      /// @dev bytes4(keccak256('supportsInterface(bytes4)'));\\n      interfaceID == 0x01ffc9a7 ||\\n      /// @dev bytes4(keccak256('addr(bytes32)'));\\n      interfaceID == 0x3b3b57de\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `SubNodeRegistration` typed data\\n   * @param subNodeRegistration struct\\n   * @return hash\\n   */\\n  function hashSubNodeRegistration(\\n    SubNodeRegistration memory subNodeRegistration\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        subNodeRegistration.account,\\n        subNodeRegistration.node,\\n        subNodeRegistration.label\\n      )\\n    );\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    bytes32 node,\\n    bytes32 label\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      SUB_NODE_REGISTRATION_TYPE_HASH,\\n      account,\\n      node,\\n      label\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x3efde23c967a7cc7c7d047feb367cf58f42d30596c6640cb075437ea74a051ba\",\"license\":\"MIT\"},\"src/ens/ENSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ENS registry\\n *\\n * @dev Base on https://github.com/ensdomains/ens/blob/v0.2.2/contracts/ENSRegistry.sol\\n */\\ncontract ENSRegistry {\\n  struct Record {\\n    address owner;\\n    address resolver;\\n    uint64 ttl;\\n  }\\n\\n  mapping(bytes32 => Record) private records;\\n\\n  // events\\n\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n  // modifiers\\n\\n  modifier onlyNodeOwner(\\n    bytes32 node\\n  ) {\\n    require(\\n      records[node].owner == msg.sender,\\n      \\\"ENSRegistry: msg.sender is not the node owner\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    records[0x0].owner = tx.origin;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].owner = owner;\\n\\n    emit Transfer(node, owner);\\n  }\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    records[subNode].owner = owner;\\n\\n    emit NewOwner(node, label, owner);\\n  }\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].resolver = resolver;\\n\\n    emit NewResolver(node, resolver);\\n  }\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].ttl = ttl;\\n\\n    emit NewTTL(node, ttl);\\n  }\\n\\n  // external functions (views)\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].owner;\\n  }\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].resolver;\\n  }\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (uint64)\\n  {\\n    return records[node].ttl;\\n  }\\n}\\n\",\"keccak256\":\"0xc76da69836cf4607b45cb1ca879bc557d762415fa9b4f535239d344ae5395514\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5032600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613951806100616000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636df0cf42116100ad578063a91ee0dc11610071578063a91ee0dc14610340578063bd106a021461035c578063c8cc2aee1461037a578063d0f710d614610396578063d5fa2b00146103c65761012c565b80636df0cf421461029e57806371404156146102ce5780637b103999146102ea5780637d0e0e7e14610308578063a526d83b146103245761012c565b80633b3b57de116100f45780633b3b57de146101e957806346386f731461021957806350c946fe1461023557806355800f87146102665780635773fd1d146102825761012c565b806301ffc9a7146101315780630c68ba2114610161578063116191b61461019157806329ae6a7e146101af578063392e53cd146101cb575b600080fd5b61014b600480360381019061014691906128b7565b6103e2565b60405161015891906132f1565b60405180910390f35b61017b6004803603810190610176919061273c565b610444565b60405161018891906132f1565b60405180910390f35b610199610499565b6040516101a69190613269565b60405180910390f35b6101c960048036038101906101c4919061278e565b6104bf565b005b6101d3610751565b6040516101e091906132f1565b60405180910390f35b61020360048036038101906101fe919061278e565b6107a9565b6040516102109190613269565b60405180910390f35b610233600480360381019061022e91906127f3565b6107e9565b005b61024f600480360381019061024a919061278e565b610c54565b60405161025d9291906132c8565b60405180910390f35b610280600480360381019061027b919061278e565b610cce565b005b61029c60048036038101906102979190612909565b611040565b005b6102b860048036038101906102b391906129b0565b611261565b6040516102c5919061330c565b60405180910390f35b6102e860048036038101906102e3919061273c565b611289565b005b6102f26114a1565b6040516102ff9190613472565b60405180910390f35b610322600480360381019061031d919061278e565b6114c7565b005b61033e6004803603810190610339919061273c565b6117c7565b005b61035a600480360381019061035591906128e0565b61185e565b005b610364611a87565b604051610371919061330c565b60405180910390f35b610394600480360381019061038f919061278e565b611a8d565b005b6103b060048036038101906103ab919061285f565b611e19565b6040516103bd91906132f1565b60405180910390f35b6103e060048036038101906103db91906127b7565b611e72565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061043d5750633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104c9611fae565b90503073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461056f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105669061356d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906134ad565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b8152600401610670929190613327565b600060405180830381600087803b15801561068a57600080fd5b505af115801561069e573d6000803e3d6000fd5b505050506005600083815260200190815260200160002060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005600083815260200190815260200160002060010160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d38282604051610745929190613327565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107f3611fae565b9050600061080a610805838888611fbf565b612017565b905061085a8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612082565b610899576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610890906134cd565b60405180910390fd5b600086866040516020016108ae929190613204565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff166005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461096a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109619061354d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a06906134ed565b60405180910390fd5b826005600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238888306040518463ffffffff1660e01b8152600401610ac393929190613395565b600060405180830381600087803b158015610add57600080fd5b505af1158015610af1573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401610b52929190613327565b600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610be1929190613327565b600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b50505050807f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd284604051610c439190613269565b60405180910390a250505050505050565b6000806005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150915091565b6000610cd8611fae565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b8152600401610d35919061330c565b60206040518083038186803b158015610d4d57600080fd5b505afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190612765565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de9906135ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b8152600401610e64919061330c565b60206040518083038186803b158015610e7c57600080fd5b505afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612765565b73ffffffffffffffffffffffffffffffffffffffff1614610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f019061348d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa69061364d565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2826040516110349190613269565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79061352d565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906135ed565b60405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061120d868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506120ef565b61121684612147565b61122183838361218b565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516112509190613284565b60405180910390a150505050505050565b600061128261127d836000015184602001518560400151611fbf565b612017565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b906135cd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137a906136cd565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661140e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114059061366d565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b328260405161149692919061329f565b60405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006114d1611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f9061362d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461161d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116149061360d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b815260040161168f919061330c565b60206040518083038186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612765565b73ffffffffffffffffffffffffffffffffffffffff1614611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c9061368d565b60405180910390fd5b806005600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae3682826040516117bb929190613327565b60405180910390a15050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611849906135cd565b60405180910390fd5b61185b816121ed565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e0906135cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611950906135ed565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e19061370d565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611a7c9190613269565b60405180910390a150565b60025481565b6000611a97611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b359061362d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd9906134ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401611c54919061330c565b60206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190612765565b73ffffffffffffffffffffffffffffffffffffffff1614611cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf19061368d565b60405180910390fd5b306005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b8152600401611dac929190613327565b600060405180830381600087803b158015611dc657600080fd5b505af1158015611dda573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f20082604051611e0d919061330c565b60405180910390a15050565b6000611e698484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612082565b90509392505050565b611e7a611fae565b73ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f14906135ad565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051611fa29190613269565b60405180910390a25050565b6000611fba602861237c565b905090565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed848484604051602001611ff89493929190613350565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f19010000000000000000000000000000000000000000000000000000000000008152506002548360405160200161206593929190613230565b604051602081830303815290604052805190602001209050919050565b600080612098838561241190919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60008151141561210757612102326121ed565b612144565b60008151905060005b818110156121415761213483828151811061212757fe5b60200260200101516121ed565b8080600101915050612110565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016121cb969594939291906133cc565b6040516020818303038152906040528051906020012060028190555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561225d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122549061350d565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156122e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e0906136ad565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a328260405161237192919061329f565b60405180910390a150565b6000806000905061238b6124cc565b156124045760008360003690500390506123fc600036839060148501926123b493929190613781565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612579565b915050612408565b3390505b80915050919050565b600080600090506041835114156124c25760008060006020860151925060408601519150606086015160001a9050601b8160ff16101561245257601b810190505b601b8160ff1614806124675750601c8160ff16145b156124be576001878285856040516000815260200160405260405161248f949392919061342d565b6020604051602081039080840390855afa1580156124b1573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561257257602c6000369050101561256d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125649061358d565b60405180910390fd5b600190505b8091505090565b60008060148351146125c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b7906136ed565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b6000813590506125ee816138e8565b92915050565b600081519050612603816138e8565b92915050565b60008083601f84011261261b57600080fd5b8235905067ffffffffffffffff81111561263457600080fd5b60208301915083602082028301111561264c57600080fd5b9250929050565b600081359050612662816138ff565b92915050565b60008135905061267781613916565b92915050565b60008083601f84011261268f57600080fd5b8235905067ffffffffffffffff8111156126a857600080fd5b6020830191508360018202830111156126c057600080fd5b9250929050565b6000813590506126d68161392d565b92915050565b6000606082840312156126ee57600080fd5b6126f8606061372d565b90506000612708848285016125df565b600083015250602061271c84828501612653565b602083015250604061273084828501612653565b60408301525092915050565b60006020828403121561274e57600080fd5b600061275c848285016125df565b91505092915050565b60006020828403121561277757600080fd5b6000612785848285016125f4565b91505092915050565b6000602082840312156127a057600080fd5b60006127ae84828501612653565b91505092915050565b600080604083850312156127ca57600080fd5b60006127d885828601612653565b92505060206127e9858286016125df565b9150509250929050565b6000806000806060858703121561280957600080fd5b600061281787828801612653565b945050602061282887828801612653565b935050604085013567ffffffffffffffff81111561284557600080fd5b6128518782880161267d565b925092505092959194509250565b60008060006040848603121561287457600080fd5b600061288286828701612653565b935050602084013567ffffffffffffffff81111561289f57600080fd5b6128ab8682870161267d565b92509250509250925092565b6000602082840312156128c957600080fd5b60006128d784828501612668565b91505092915050565b6000602082840312156128f257600080fd5b6000612900848285016126c7565b91505092915050565b600080600080600080600060c0888a03121561292457600080fd5b60006129328a828b016126c7565b975050602088013567ffffffffffffffff81111561294f57600080fd5b61295b8a828b01612609565b9650965050604061296e8a828b016125df565b945050606061297f8a828b01612653565b93505060806129908a828b01612653565b92505060a06129a18a828b01612653565b91505092959891949750929550565b6000606082840312156129c257600080fd5b60006129d0848285016126dc565b91505092915050565b6129e281613851565b82525050565b6129f1816137b4565b82525050565b612a00816137c6565b82525050565b612a0f816137d2565b82525050565b612a26612a21826137d2565b6138de565b82525050565b612a3581613863565b82525050565b6000612a468261375a565b612a508185613776565b9350612a608185602086016138ab565b80840191505092915050565b6000612a79602483613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465207265736f60008301527f6c766572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612adf602183613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b45602983613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000612bab602283613765565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c11602083613765565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b6000612c51602f83613765565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000612cb7601b83613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b6000612cf7602183613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612d5d602283613765565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612dc3602b83613765565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b6000612e29602683613765565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e8f602683613765565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ef5602583613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f5b602283613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612fc1602383613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c726561647920696e207360008301527f796e6300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613027601f83613765565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613067602583613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006130cd602083613765565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b600061310d601b83613765565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b600061314d601d83613765565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b600061318d602383613765565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6131ef8161383a565b82525050565b6131fe81613844565b82525050565b60006132108285612a15565b6020820191506132208284612a15565b6020820191508190509392505050565b600061323c8286612a3b565b91506132488285612a15565b6020820191506132588284612a15565b602082019150819050949350505050565b600060208201905061327e60008301846129e8565b92915050565b600060208201905061329960008301846129d9565b92915050565b60006040820190506132b460008301856129d9565b6132c160208301846129e8565b9392505050565b60006040820190506132dd60008301856129e8565b6132ea60208301846129e8565b9392505050565b600060208201905061330660008301846129f7565b92915050565b60006020820190506133216000830184612a06565b92915050565b600060408201905061333c6000830185612a06565b61334960208301846129e8565b9392505050565b60006080820190506133656000830187612a06565b61337260208301866129e8565b61337f6040830185612a06565b61338c6060830184612a06565b95945050505050565b60006060820190506133aa6000830186612a06565b6133b76020830185612a06565b6133c460408301846129e8565b949350505050565b600060c0820190506133e16000830189612a06565b6133ee6020830188612a06565b6133fb6040830187612a06565b61340860608301866131e6565b61341560808301856129e8565b61342260a0830184612a06565b979650505050505050565b60006080820190506134426000830187612a06565b61344f60208301866131f5565b61345c6040830185612a06565b6134696060830184612a06565b95945050505050565b60006020820190506134876000830184612a2c565b92915050565b600060208201905081810360008301526134a681612a6c565b9050919050565b600060208201905081810360008301526134c681612ad2565b9050919050565b600060208201905081810360008301526134e681612b38565b9050919050565b6000602082019050818103600083015261350681612b9e565b9050919050565b6000602082019050818103600083015261352681612c04565b9050919050565b6000602082019050818103600083015261354681612c44565b9050919050565b6000602082019050818103600083015261356681612caa565b9050919050565b6000602082019050818103600083015261358681612cea565b9050919050565b600060208201905081810360008301526135a681612d50565b9050919050565b600060208201905081810360008301526135c681612db6565b9050919050565b600060208201905081810360008301526135e681612e1c565b9050919050565b6000602082019050818103600083015261360681612e82565b9050919050565b6000602082019050818103600083015261362681612ee8565b9050919050565b6000602082019050818103600083015261364681612f4e565b9050919050565b6000602082019050818103600083015261366681612fb4565b9050919050565b600060208201905081810360008301526136868161301a565b9050919050565b600060208201905081810360008301526136a68161305a565b9050919050565b600060208201905081810360008301526136c6816130c0565b9050919050565b600060208201905081810360008301526136e681613100565b9050919050565b6000602082019050818103600083015261370681613140565b9050919050565b6000602082019050818103600083015261372681613180565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561375057600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000808585111561379157600080fd5b8386111561379e57600080fd5b6001850283019150848603905094509492505050565b60006137bf8261381a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000613813826137b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061385c82613887565b9050919050565b600061386e82613875565b9050919050565b60006138808261381a565b9050919050565b600061389282613899565b9050919050565b60006138a48261381a565b9050919050565b60005b838110156138c95780820151818401526020810190506138ae565b838111156138d8576000848401525b50505050565b6000819050919050565b6138f1816137b4565b81146138fc57600080fd5b50565b613908816137d2565b811461391357600080fd5b50565b61391f816137dc565b811461392a57600080fd5b50565b61393681613808565b811461394157600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636df0cf42116100ad578063a91ee0dc11610071578063a91ee0dc14610340578063bd106a021461035c578063c8cc2aee1461037a578063d0f710d614610396578063d5fa2b00146103c65761012c565b80636df0cf421461029e57806371404156146102ce5780637b103999146102ea5780637d0e0e7e14610308578063a526d83b146103245761012c565b80633b3b57de116100f45780633b3b57de146101e957806346386f731461021957806350c946fe1461023557806355800f87146102665780635773fd1d146102825761012c565b806301ffc9a7146101315780630c68ba2114610161578063116191b61461019157806329ae6a7e146101af578063392e53cd146101cb575b600080fd5b61014b600480360381019061014691906128b7565b6103e2565b60405161015891906132f1565b60405180910390f35b61017b6004803603810190610176919061273c565b610444565b60405161018891906132f1565b60405180910390f35b610199610499565b6040516101a69190613269565b60405180910390f35b6101c960048036038101906101c4919061278e565b6104bf565b005b6101d3610751565b6040516101e091906132f1565b60405180910390f35b61020360048036038101906101fe919061278e565b6107a9565b6040516102109190613269565b60405180910390f35b610233600480360381019061022e91906127f3565b6107e9565b005b61024f600480360381019061024a919061278e565b610c54565b60405161025d9291906132c8565b60405180910390f35b610280600480360381019061027b919061278e565b610cce565b005b61029c60048036038101906102979190612909565b611040565b005b6102b860048036038101906102b391906129b0565b611261565b6040516102c5919061330c565b60405180910390f35b6102e860048036038101906102e3919061273c565b611289565b005b6102f26114a1565b6040516102ff9190613472565b60405180910390f35b610322600480360381019061031d919061278e565b6114c7565b005b61033e6004803603810190610339919061273c565b6117c7565b005b61035a600480360381019061035591906128e0565b61185e565b005b610364611a87565b604051610371919061330c565b60405180910390f35b610394600480360381019061038f919061278e565b611a8d565b005b6103b060048036038101906103ab919061285f565b611e19565b6040516103bd91906132f1565b60405180910390f35b6103e060048036038101906103db91906127b7565b611e72565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061043d5750633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006104c9611fae565b90503073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461056f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105669061356d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060a906134ad565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b8152600401610670929190613327565b600060405180830381600087803b15801561068a57600080fd5b505af115801561069e573d6000803e3d6000fd5b505050506005600083815260200190815260200160002060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005600083815260200190815260200160002060010160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d38282604051610745929190613327565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107f3611fae565b9050600061080a610805838888611fbf565b612017565b905061085a8185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612082565b610899576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610890906134cd565b60405180910390fd5b600086866040516020016108ae929190613204565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff166005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461096a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109619061354d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a06906134ed565b60405180910390fd5b826005600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238888306040518463ffffffff1660e01b8152600401610ac393929190613395565b600060405180830381600087803b158015610add57600080fd5b505af1158015610af1573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401610b52929190613327565b600060405180830381600087803b158015610b6c57600080fd5b505af1158015610b80573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610be1929190613327565b600060405180830381600087803b158015610bfb57600080fd5b505af1158015610c0f573d6000803e3d6000fd5b50505050807f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd284604051610c439190613269565b60405180910390a250505050505050565b6000806005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166005600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150915091565b6000610cd8611fae565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b8152600401610d35919061330c565b60206040518083038186803b158015610d4d57600080fd5b505afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190612765565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610df2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de9906135ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf846040518263ffffffff1660e01b8152600401610e64919061330c565b60206040518083038186803b158015610e7c57600080fd5b505afa158015610e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb49190612765565b73ffffffffffffffffffffffffffffffffffffffff1614610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f019061348d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa69061364d565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2826040516110349190613269565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79061352d565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611182576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611179906135ed565b60405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061120d868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506120ef565b61121684612147565b61122183838361218b565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e6326040516112509190613284565b60405180910390a150505050505050565b600061128261127d836000015184602001518560400151611fbf565b612017565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b906135cd565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415611383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137a906136cd565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661140e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114059061366d565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b328260405161149692919061329f565b60405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006114d1611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f9061362d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461161d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116149061360d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b815260040161168f919061330c565b60206040518083038186803b1580156116a757600080fd5b505afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612765565b73ffffffffffffffffffffffffffffffffffffffff1614611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c9061368d565b60405180910390fd5b806005600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae3682826040516117bb929190613327565b60405180910390a15050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611849906135cd565b60405180910390fd5b61185b816121ed565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166118e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e0906135cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611950906135ed565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e19061370d565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611a7c9190613269565b60405180910390a150565b60025481565b6000611a97611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b359061362d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd9906134ad565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b8152600401611c54919061330c565b60206040518083038186803b158015611c6c57600080fd5b505afa158015611c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca49190612765565b73ffffffffffffffffffffffffffffffffffffffff1614611cfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf19061368d565b60405180910390fd5b306005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b8152600401611dac929190613327565b600060405180830381600087803b158015611dc657600080fd5b505af1158015611dda573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f20082604051611e0d919061330c565b60405180910390a15050565b6000611e698484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612082565b90509392505050565b611e7a611fae565b73ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f14906135ad565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051611fa29190613269565b60405180910390a25050565b6000611fba602861237c565b905090565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed848484604051602001611ff89493929190613350565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f19010000000000000000000000000000000000000000000000000000000000008152506002548360405160200161206593929190613230565b604051602081830303815290604052805190602001209050919050565b600080612098838561241190919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b60008151141561210757612102326121ed565b612144565b60008151905060005b818110156121415761213483828151811061212757fe5b60200260200101516121ed565b8080600101915050612110565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac5647284848330866040516020016121cb969594939291906133cc565b6040516020818303038152906040528051906020012060028190555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561225d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122549061350d565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156122e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e0906136ad565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a328260405161237192919061329f565b60405180910390a150565b6000806000905061238b6124cc565b156124045760008360003690500390506123fc600036839060148501926123b493929190613781565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612579565b915050612408565b3390505b80915050919050565b600080600090506041835114156124c25760008060006020860151925060408601519150606086015160001a9050601b8160ff16101561245257601b810190505b601b8160ff1614806124675750601c8160ff16145b156124be576001878285856040516000815260200160405260405161248f949392919061342d565b6020604051602081039080840390855afa1580156124b1573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561257257602c6000369050101561256d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125649061358d565b60405180910390fd5b600190505b8091505090565b60008060148351146125c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b7906136ed565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b6000813590506125ee816138e8565b92915050565b600081519050612603816138e8565b92915050565b60008083601f84011261261b57600080fd5b8235905067ffffffffffffffff81111561263457600080fd5b60208301915083602082028301111561264c57600080fd5b9250929050565b600081359050612662816138ff565b92915050565b60008135905061267781613916565b92915050565b60008083601f84011261268f57600080fd5b8235905067ffffffffffffffff8111156126a857600080fd5b6020830191508360018202830111156126c057600080fd5b9250929050565b6000813590506126d68161392d565b92915050565b6000606082840312156126ee57600080fd5b6126f8606061372d565b90506000612708848285016125df565b600083015250602061271c84828501612653565b602083015250604061273084828501612653565b60408301525092915050565b60006020828403121561274e57600080fd5b600061275c848285016125df565b91505092915050565b60006020828403121561277757600080fd5b6000612785848285016125f4565b91505092915050565b6000602082840312156127a057600080fd5b60006127ae84828501612653565b91505092915050565b600080604083850312156127ca57600080fd5b60006127d885828601612653565b92505060206127e9858286016125df565b9150509250929050565b6000806000806060858703121561280957600080fd5b600061281787828801612653565b945050602061282887828801612653565b935050604085013567ffffffffffffffff81111561284557600080fd5b6128518782880161267d565b925092505092959194509250565b60008060006040848603121561287457600080fd5b600061288286828701612653565b935050602084013567ffffffffffffffff81111561289f57600080fd5b6128ab8682870161267d565b92509250509250925092565b6000602082840312156128c957600080fd5b60006128d784828501612668565b91505092915050565b6000602082840312156128f257600080fd5b6000612900848285016126c7565b91505092915050565b600080600080600080600060c0888a03121561292457600080fd5b60006129328a828b016126c7565b975050602088013567ffffffffffffffff81111561294f57600080fd5b61295b8a828b01612609565b9650965050604061296e8a828b016125df565b945050606061297f8a828b01612653565b93505060806129908a828b01612653565b92505060a06129a18a828b01612653565b91505092959891949750929550565b6000606082840312156129c257600080fd5b60006129d0848285016126dc565b91505092915050565b6129e281613851565b82525050565b6129f1816137b4565b82525050565b612a00816137c6565b82525050565b612a0f816137d2565b82525050565b612a26612a21826137d2565b6138de565b82525050565b612a3581613863565b82525050565b6000612a468261375a565b612a508185613776565b9350612a608185602086016138ab565b80840191505092915050565b6000612a79602483613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465207265736f60008301527f6c766572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612adf602183613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b45602983613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b6000612bab602283613765565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c11602083613765565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b6000612c51602f83613765565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000612cb7601b83613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b6000612cf7602183613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612d5d602283613765565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612dc3602b83613765565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b6000612e29602683613765565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e8f602683613765565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ef5602583613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612f5b602283613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612fc1602383613765565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c726561647920696e207360008301527f796e6300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613027601f83613765565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000613067602583613765565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006130cd602083613765565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b600061310d601b83613765565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b600061314d601d83613765565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b600061318d602383613765565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6131ef8161383a565b82525050565b6131fe81613844565b82525050565b60006132108285612a15565b6020820191506132208284612a15565b6020820191508190509392505050565b600061323c8286612a3b565b91506132488285612a15565b6020820191506132588284612a15565b602082019150819050949350505050565b600060208201905061327e60008301846129e8565b92915050565b600060208201905061329960008301846129d9565b92915050565b60006040820190506132b460008301856129d9565b6132c160208301846129e8565b9392505050565b60006040820190506132dd60008301856129e8565b6132ea60208301846129e8565b9392505050565b600060208201905061330660008301846129f7565b92915050565b60006020820190506133216000830184612a06565b92915050565b600060408201905061333c6000830185612a06565b61334960208301846129e8565b9392505050565b60006080820190506133656000830187612a06565b61337260208301866129e8565b61337f6040830185612a06565b61338c6060830184612a06565b95945050505050565b60006060820190506133aa6000830186612a06565b6133b76020830185612a06565b6133c460408301846129e8565b949350505050565b600060c0820190506133e16000830189612a06565b6133ee6020830188612a06565b6133fb6040830187612a06565b61340860608301866131e6565b61341560808301856129e8565b61342260a0830184612a06565b979650505050505050565b60006080820190506134426000830187612a06565b61344f60208301866131f5565b61345c6040830185612a06565b6134696060830184612a06565b95945050505050565b60006020820190506134876000830184612a2c565b92915050565b600060208201905081810360008301526134a681612a6c565b9050919050565b600060208201905081810360008301526134c681612ad2565b9050919050565b600060208201905081810360008301526134e681612b38565b9050919050565b6000602082019050818103600083015261350681612b9e565b9050919050565b6000602082019050818103600083015261352681612c04565b9050919050565b6000602082019050818103600083015261354681612c44565b9050919050565b6000602082019050818103600083015261356681612caa565b9050919050565b6000602082019050818103600083015261358681612cea565b9050919050565b600060208201905081810360008301526135a681612d50565b9050919050565b600060208201905081810360008301526135c681612db6565b9050919050565b600060208201905081810360008301526135e681612e1c565b9050919050565b6000602082019050818103600083015261360681612e82565b9050919050565b6000602082019050818103600083015261362681612ee8565b9050919050565b6000602082019050818103600083015261364681612f4e565b9050919050565b6000602082019050818103600083015261366681612fb4565b9050919050565b600060208201905081810360008301526136868161301a565b9050919050565b600060208201905081810360008301526136a68161305a565b9050919050565b600060208201905081810360008301526136c6816130c0565b9050919050565b600060208201905081810360008301526136e681613100565b9050919050565b6000602082019050818103600083015261370681613140565b9050919050565b6000602082019050818103600083015261372681613180565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561375057600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000808585111561379157600080fd5b8386111561379e57600080fd5b6001850283019150848603905094509492505050565b60006137bf8261381a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000613813826137b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061385c82613887565b9050919050565b600061386e82613875565b9050919050565b60006138808261381a565b9050919050565b600061389282613899565b9050919050565b60006138a48261381a565b9050919050565b60005b838110156138c95780820151818401526020810190506138ae565b838111156138d8576000848401525b50505050565b6000819050919050565b6138f1816137b4565b81146138fc57600080fd5b50565b613908816137d2565b811461391357600080fd5b50565b61391f816137dc565b811461392a57600080fd5b50565b61393681613808565b811461394157600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "details": "The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.",
    "events": {
      "AddrChanged(bytes32,address)": {
        "details": "Emitted when the address field in node resolver is changed",
        "params": {
          "addr": "new address",
          "node": "node name hash"
        }
      },
      "NodeReleased(bytes32,address)": {
        "details": "Emitted when new node is released",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeSubmitted(bytes32,address)": {
        "details": "Emitted when new node is submitted",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeVerified(bytes32)": {
        "details": "Emitted when the existing owner is verified",
        "params": {
          "node": "node name hash"
        }
      },
      "RegistryChanged(address)": {
        "details": "Emitted when ENS registry address is changed",
        "params": {
          "registry": "registry address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "addr(bytes32)": {
        "details": "Used in address resolver",
        "params": {
          "node": "node name hash"
        },
        "returns": {
          "_0": "node address"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "getNode(bytes32)": {
        "params": {
          "node": "node name hash"
        }
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "params": {
          "subNodeRegistration": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "params": {
          "gateway_": "gateway address",
          "registry_": "ENS registry address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        },
        "returns": {
          "_0": "true when guardian exists"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "params": {
          "guardianSignature": "guardian signature",
          "label": "label hash",
          "node": "node name hash"
        }
      },
      "releaseNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "removeGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "setAddr(bytes32,address)": {
        "details": "Used in address resolver",
        "params": {
          "addr": "address",
          "node": "node name hash"
        }
      },
      "setRegistry(address)": {
        "params": {
          "registry_": "registry address"
        }
      },
      "submitNode(bytes32)": {
        "details": "Should be called from the current ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceID": "method signature"
        },
        "returns": {
          "_0": "true when contract supports interface"
        }
      },
      "syncAddr(bytes32)": {
        "params": {
          "node": "node name hash"
        }
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "params": {
          "messageHash": "message hash",
          "signature": "signature"
        },
        "returns": {
          "_0": "true on correct guardian signature"
        }
      },
      "verifyNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      }
    },
    "title": "ENS controller",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Adds a new guardian"
      },
      "addr(bytes32)": {
        "notice": "Gets address"
      },
      "getNode(bytes32)": {
        "notice": "Gets node"
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "notice": "Hashes `SubNodeRegistration` typed data"
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "notice": "Initializes `ENSController` contract"
      },
      "isGuardian(address)": {
        "notice": "Check if guardian exists"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "notice": "Registers sub node"
      },
      "releaseNode(bytes32)": {
        "notice": "Releases node"
      },
      "removeGuardian(address)": {
        "notice": "Removes the existing guardian"
      },
      "setAddr(bytes32,address)": {
        "notice": "Sets address"
      },
      "setRegistry(address)": {
        "notice": "Sets registry"
      },
      "submitNode(bytes32)": {
        "notice": "Submits node"
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if contract supports interface"
      },
      "syncAddr(bytes32)": {
        "notice": "Sync address"
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "notice": "Verifies guardian signature"
      },
      "verifyNode(bytes32)": {
        "notice": "Verifies node"
      }
    },
    "notice": "ENS subnode registrar",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "guardians",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1667,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2095,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4014,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "gateway",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2187,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ENSRegistry)3026"
      },
      {
        "astId": 2191,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Node)2173_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSRegistry)3026": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Node)2173_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSController.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)2173_storage"
      },
      "t_struct(Node)2173_storage": {
        "encoding": "inplace",
        "label": "struct ENSController.Node",
        "members": [
          {
            "astId": 2170,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2172,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}