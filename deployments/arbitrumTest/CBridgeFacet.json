{
  "address": "0x3054F79f18AecC4aAe249fd9C8ca23D93d635504",
  "abi": [
    {
      "inputs": [],
      "name": "CannotBridgeToSameNetwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeValueWithERC",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTransferToNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddrIsNotAValidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddrIsNotAnERC20Token",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cBridge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "CBridgeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "bridgeUsed",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainIdTo",
          "type": "uint256"
        }
      ],
      "name": "TransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedCBridgeAddress",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "maxSlippage",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "dstChainId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct CBridgeFacet.CBridgeData",
          "name": "_cBridgeData",
          "type": "tuple"
        }
      ],
      "name": "bridgeTokensCBridge",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cBridge",
          "type": "address"
        }
      ],
      "name": "initializeCBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "updateBridgeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f86af2c932ee60d7350a2c1c24240b1e1df337f686013f3d7bd2d9cb02e62f8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x326b2D4f29E19C7089D038EA5E06f090Afa6FB7f",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "11377110",
    "logsBloom": "0x
    "blockHash": "0x820949c34f9e7c2f69a9b92f9008270fc1b8cc6a7f3d789c7e37429200d72424",
    "transactionHash": "0x4f86af2c932ee60d7350a2c1c24240b1e1df337f686013f3d7bd2d9cb02e62f8",
    "logs": [],
    "blockNumber": 13317988,
    "cumulativeGasUsed": "206930",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2701b0e385f997e81fc33a1d36beba45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotBridgeToSameNetwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeValueWithERC\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTransferToNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAValidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAnERC20Token\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cBridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"CBridgeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bridgeUsed\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainIdTo\",\"type\":\"uint256\"}],\"name\":\"TransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdatedCBridgeAddress\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct CBridgeFacet.CBridgeData\",\"name\":\"_cBridgeData\",\"type\":\"tuple\"}],\"name\":\"bridgeTokensCBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBridge\",\"type\":\"address\"}],\"name\":\"initializeCBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridgeTokensCBridge((uint32,uint64,uint64,uint256,address,address))\":{\"params\":{\"_cBridgeData\":\": provides necessary data for cBridge transfer\"}},\"initializeCBridge(address)\":{\"params\":{\"_cBridge\":\"address of the CBridge router contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridgeTokensCBridge((uint32,uint64,uint64,uint256,address,address))\":{\"notice\":\"initiates token bridging\"},\"initializeCBridge(address)\":{\"notice\":\"initializes state variables for the cBridge facet\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/bridges/facets/CBridgeFacet.sol\":\"CBridgeFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"src/bridges/errors/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line\\npragma solidity 0.8.4;\\n\\nerror InvalidAmount();\\nerror TokenAddressIsZero();\\nerror CannotBridgeToSameNetwork();\\nerror ZeroPostSwapBalance();\\nerror InvalidBridgeConfigLength();\\nerror NoSwapDataProvided();\\nerror NativeValueWithERC();\\nerror ContractCallNotAllowed();\\nerror NullAddrIsNotAValidSpender();\\nerror NullAddrIsNotAnERC20Token();\\nerror NoTransferToNullAddress();\\nerror NativeAssetTransferFailed();\\nerror InvalidContract();\\nerror InvalidConfig();\\n\",\"keccak256\":\"0x428005532c28e5c7ab8caf0683f3df926d36d9e4c4d2d84ada50961bbbafc946\",\"license\":\"MIT\"},\"src/bridges/facets/CBridgeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line\\npragma solidity 0.8.4;\\n\\n/// @title CBridgeFacet\\n/// @author Luke Wickens <luke@pillarproject.io>\\n/// @notice cBridge intergration for bridging tokens\\n\\nimport {LibAsset} from \\\"../libs/LibAsset.sol\\\";\\nimport {ICBridge} from \\\"../interfaces/ICBridge.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {CannotBridgeToSameNetwork, InvalidAmount, InvalidConfig} from \\\"../errors/GenericErrors.sol\\\";\\nimport {LibDiamond} from \\\"../libs/LibDiamond.sol\\\";\\n\\ncontract CBridgeFacet is ReentrancyGuard {\\n    //////////////////////////////////////////////////////////////\\n    /////////////////////////// Events ///////////////////////////\\n    //////////////////////////////////////////////////////////////\\n    event CBridgeInitialized(address cBridge, uint256 chainId);\\n    event TransferStarted(\\n        string bridgeUsed,\\n        address tokenAddress,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 chainIdTo\\n    );\\n    event UpdatedCBridgeAddress(address newAddress);\\n\\n    //////////////////////////////////////////////////////////////\\n    ////////////////////////// Structs ///////////////////////////\\n    //////////////////////////////////////////////////////////////\\n\\n    struct CBridgeData {\\n        uint32 maxSlippage;\\n        uint64 dstChainId;\\n        uint64 nonce;\\n        uint256 amount;\\n        address receiver;\\n        address token;\\n    }\\n    //////////////////////////////////////////////////////////////\\n    ////////////////////// State Variables ///////////////////////\\n    //////////////////////////////////////////////////////////////\\n\\n    address public cBridge;\\n\\n    /// @notice initializes state variables for the cBridge facet\\n    /// @param _cBridge address of the CBridge router contract\\n    function initializeCBridge(address _cBridge) external {\\n        LibDiamond.enforceIsContractOwner();\\n        if (_cBridge == address(0)) revert InvalidConfig();\\n        cBridge = _cBridge;\\n        emit CBridgeInitialized(_cBridge, block.chainid);\\n    }\\n\\n    /// @notice initiates token bridging\\n    /// @param _cBridgeData: provides necessary data for cBridge transfer\\n\\n    function bridgeTokensCBridge(CBridgeData calldata _cBridgeData)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        LibAsset.depositAsset(_cBridgeData.token, _cBridgeData.amount);\\n        _startBridge(_cBridgeData);\\n\\n        emit TransferStarted(\\n            \\\"cBridge\\\",\\n            _cBridgeData.token,\\n            msg.sender,\\n            _cBridgeData.receiver,\\n            _cBridgeData.amount,\\n            _cBridgeData.dstChainId\\n        );\\n    }\\n\\n    function updateBridgeAddress(address _newAddress) external {\\n        LibDiamond.enforceIsContractOwner();\\n        if (_newAddress == address(0)) revert InvalidConfig();\\n        cBridge = _newAddress;\\n        emit UpdatedCBridgeAddress(_newAddress);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    ////////////////////// Private Functions /////////////////////\\n    //////////////////////////////////////////////////////////////\\n\\n    function _startBridge(CBridgeData memory _cBridgeData) private {\\n        if (block.chainid == _cBridgeData.dstChainId)\\n            revert CannotBridgeToSameNetwork();\\n\\n        LibAsset.maxApproveERC20(\\n            IERC20(_cBridgeData.token),\\n            cBridge,\\n            _cBridgeData.amount\\n        );\\n        // solhint-disable check-send-result\\n        ICBridge(cBridge).send(\\n            _cBridgeData.receiver,\\n            _cBridgeData.token,\\n            _cBridgeData.amount,\\n            _cBridgeData.dstChainId,\\n            _cBridgeData.nonce,\\n            _cBridgeData.maxSlippage\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x372ed0b4b6d8bbf559f43764ad6ffef9a2a2d615b63d9504bfa3ca9b19176844\",\"license\":\"MIT\"},\"src/bridges/interfaces/ICBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line\\npragma solidity 0.8.4;\\n\\ninterface ICBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChinId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChinId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external payable;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1d9e1f4ef38e6d8f810869d4e4126af4d3c5b70cf23ae0f61abb63151ef1c43c\",\"license\":\"MIT\"},\"src/bridges/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xaf48c483d94cb8dfb055c3d55d353619dbaecad1ccb1244457eac2b6e4ca83fe\",\"license\":\"MIT\"},\"src/bridges/libs/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// solhint-disable-next-line\\npragma solidity 0.8.4;\\nimport {NullAddrIsNotAnERC20Token, NullAddrIsNotAValidSpender, NoTransferToNullAddress, InvalidAmount, NativeValueWithERC, NativeAssetTransferFailed} from \\\"../errors/GenericErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of assets, including accounting for the native asset `assetId`\\n///         conventions and any noncompliant ERC20 transfers\\nlibrary LibAsset {\\n    uint256 private constant MAX_INT = type(uint256).max;\\n\\n    address internal constant NULL_ADDRESS =\\n        0x0000000000000000000000000000000000000000; //address(0)\\n\\n    /// @dev All native assets use the empty address for their asset id\\n    ///      by convention\\n\\n    address internal constant NATIVE_ASSETID = NULL_ADDRESS; //address(0)\\n\\n    /// @notice Gets the balance of the inheriting contract for the given asset\\n    /// @param assetId The asset identifier to get the balance of\\n    /// @return Balance held by contracts using this library\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            assetId == NATIVE_ASSETID\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /// @notice Transfers ether from the inheriting contract to a given\\n    ///         recipient\\n    /// @param recipient Address to send ether to\\n    /// @param amount Amount to send to given recipient\\n    function transferNativeAsset(address payable recipient, uint256 amount)\\n        private\\n    {\\n        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) revert NativeAssetTransferFailed();\\n    }\\n\\n    /// @notice Gives MAX approval for another address to spend tokens\\n    /// @param assetId Token address to transfer\\n    /// @param spender Address to give spend approval to\\n    /// @param amount Amount to approve for spending\\n    function maxApproveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(assetId) == NATIVE_ASSETID) return;\\n        if (spender == NULL_ADDRESS) revert NullAddrIsNotAValidSpender();\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance < amount)\\n            SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);\\n    }\\n\\n    /// @notice Transfers tokens from the inheriting contract to a given\\n    ///         recipient\\n    /// @param assetId Token address to transfer\\n    /// @param recipient Address to send token to\\n    /// @param amount Amount to send to given recipient\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        if (isNativeAsset(assetId)) revert NullAddrIsNotAnERC20Token();\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /// @notice Transfers tokens from a sender to a given recipient\\n    /// @param assetId Token address to transfer\\n    /// @param from Address of sender/owner\\n    /// @param to Address of recipient/spender\\n    /// @param amount Amount to transfer from owner to spender\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (assetId == NATIVE_ASSETID) revert NullAddrIsNotAnERC20Token();\\n        if (to == NULL_ADDRESS) revert NoTransferToNullAddress();\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /// @notice Deposits an asset into the contract and performs checks to avoid NativeValueWithERC\\n    /// @param tokenId Token to deposit\\n    /// @param amount Amount to deposit\\n    /// @param isNative Wether the token is native or ERC20\\n    function depositAsset(\\n        address tokenId,\\n        uint256 amount,\\n        bool isNative\\n    ) internal {\\n        if (amount == 0) revert InvalidAmount();\\n        if (isNative) {\\n            if (msg.value != amount) revert InvalidAmount();\\n        } else {\\n            if (msg.value != 0) revert NativeValueWithERC();\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(tokenId);\\n            LibAsset.transferFromERC20(\\n                tokenId,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            if (LibAsset.getOwnBalance(tokenId) - _fromTokenBalance != amount)\\n                revert InvalidAmount();\\n        }\\n    }\\n\\n    /// @notice Overload for depositAsset(address tokenId, uint256 amount, bool isNative)\\n    /// @param tokenId Token to deposit\\n    /// @param amount Amount to deposit\\n    function depositAsset(address tokenId, uint256 amount) internal {\\n        return depositAsset(tokenId, amount, tokenId == NATIVE_ASSETID);\\n    }\\n\\n    /// @notice Determines whether the given assetId is the native asset\\n    /// @param assetId The asset identifier to evaluate\\n    /// @return Boolean indicating if the asset is the native asset\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\\n    ///         some recipient. Should handle all non-compliant return value\\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\\n    /// @param assetId Asset id for transfer (address(0) for native asset,\\n    ///                token address for erc20s)\\n    /// @param recipient Address to send asset to\\n    /// @param amount Amount to send to given recipient\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        (assetId == NATIVE_ASSETID)\\n            ? transferNativeAsset(recipient, amount)\\n            : transferERC20(assetId, recipient, amount);\\n    }\\n\\n    /// @dev Checks whether the given address is a contract and contains code\\n    function isContract(address _contractAddr) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_contractAddr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x35924399a060d86e97962eee65bc86a7f46a78e6c43d2ab342f9d2d400948666\",\"license\":\"UNLICENSED\"},\"src/bridges/libs/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"LibDiamondCut: _init address has no code\\\"\\n                );\\n            }\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x6b8a56169bf9dc723e535e6cdfa2e087f84dbbec2b236cf13944053382085b99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550611904806100286000396000f3fe60806040526004361061003f5760003560e01c80631124bcf91461004457806336d4b75f1461006d5780635277cbc714610098578063645c8a4b146100b4575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610fed565b6100dd565b005b34801561007957600080fd5b506100826101c9565b60405161008f91906112a4565b60405180910390f35b6100b260048036038101906100ad919061103f565b6101ef565b005b3480156100c057600080fd5b506100db60048036038101906100d69190610fed565b6102fa565b005b6100e56103e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561014c576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5b114a545b5a08e3628017ac6e1af1f29e3f593dde50a4a93ab76f2a2220cd3881466040516101be929190611380565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415610235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022c906114b1565b60405180910390fd5b600260008190555061025d8160a00160208101906102539190610fed565b826060013561047f565b610276818036038101906102719190611068565b6104bd565b7f83bd4b75444b26482a091d91d32e43a65722f9fd8267a590beadccd9e61539e88160a00160208101906102aa9190610fed565b338360800160208101906102be9190610fed565b84606001358560200160208101906102d691906110ba565b6040516102e795949392919061140b565b60405180910390a1600160008190555050565b6103026103e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610369576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fef1a021f4afad10827a9f886313f92d00348a53d0b0df8d0aa270a0ac3379bc5816040516103d991906112a4565b60405180910390a150565b6103ec6105ec565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610474906113cb565b60405180910390fd5b565b6104b98282600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610619565b5050565b806020015167ffffffffffffffff16461415610505576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61053a8160a00151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836060015161073d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5977fbb82608001518360a0015184606001518560200151866040015187600001516040518763ffffffff1660e01b81526004016105b79695949392919061131f565b600060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b5050505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000821415610654576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561069857813414610693576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610738565b600034146106d1576040517e3f45b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106dc846108a8565b90506106ea84333086610974565b82816106f5866108a8565b6106ff9190611548565b14610736576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610777576108a3565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107de576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161081b9291906112bf565b60206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190611091565b9050818110156108a1576108a084847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a54565b5b505b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461096b578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091691906112a4565b60206040518083038186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190611091565b61096d565b475b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156109db576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a42576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a4e84848484610bb2565b50505050565b6000811480610aed575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610a9b9291906112bf565b60206040518083038186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190611091565b145b610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906114d1565b60405180910390fd5b610bad8363095ea7b360e01b8484604051602401610b4b929190611380565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c3b565b505050565b610c35846323b872dd60e01b858585604051602401610bd3939291906112e8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c3b565b50505050565b6000610c9d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d029092919063ffffffff16565b9050600081511115610cfd5780806020019051810190610cbd9190611016565b610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390611491565b60405180910390fd5b5b505050565b6060610d118484600085610d1a565b90509392505050565b606082471015610d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d56906113eb565b60405180910390fd5b610d6885610e2e565b610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e90611471565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610dd0919061128d565b60006040518083038185875af1925050503d8060008114610e0d576040519150601f19603f3d011682016040523d82523d6000602084013e610e12565b606091505b5091509150610e22828286610e51565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610e6157829050610eb1565b600083511115610e745782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea891906113a9565b60405180910390fd5b9392505050565b600081359050610ec781611884565b92915050565b600081519050610edc8161189b565b92915050565b600060c08284031215610ef457600080fd5b81905092915050565b600060c08284031215610f0f57600080fd5b610f1960c06114f1565b90506000610f2984828501610fc3565b6000830152506020610f3d84828501610fd8565b6020830152506040610f5184828501610fd8565b6040830152506060610f6584828501610f99565b6060830152506080610f7984828501610eb8565b60808301525060a0610f8d84828501610eb8565b60a08301525092915050565b600081359050610fa8816118b2565b92915050565b600081519050610fbd816118b2565b92915050565b600081359050610fd2816118c9565b92915050565b600081359050610fe7816118e0565b92915050565b600060208284031215610fff57600080fd5b600061100d84828501610eb8565b91505092915050565b60006020828403121561102857600080fd5b600061103684828501610ecd565b91505092915050565b600060c0828403121561105157600080fd5b600061105f84828501610ee2565b91505092915050565b600060c0828403121561107a57600080fd5b600061108884828501610efd565b91505092915050565b6000602082840312156110a357600080fd5b60006110b184828501610fae565b91505092915050565b6000602082840312156110cc57600080fd5b60006110da84828501610fd8565b91505092915050565b6110ec8161157c565b82525050565b60006110fd82611516565b611107818561152c565b93506111178185602086016115fa565b80840191505092915050565b600061112e82611521565b6111388185611537565b93506111488185602086016115fa565b611151816116bc565b840191505092915050565b6000611169602283611537565b9150611174826116cd565b604082019050919050565b600061118c602683611537565b91506111978261171c565b604082019050919050565b60006111af600783611537565b91506111ba8261176b565b602082019050919050565b60006111d2601d83611537565b91506111dd82611794565b602082019050919050565b60006111f5602a83611537565b9150611200826117bd565b604082019050919050565b6000611218601f83611537565b91506112238261180c565b602082019050919050565b600061123b603683611537565b915061124682611835565b604082019050919050565b61125a816115ba565b82525050565b611269816115c4565b82525050565b611278816115e8565b82525050565b611287816115d4565b82525050565b600061129982846110f2565b915081905092915050565b60006020820190506112b960008301846110e3565b92915050565b60006040820190506112d460008301856110e3565b6112e160208301846110e3565b9392505050565b60006060820190506112fd60008301866110e3565b61130a60208301856110e3565b6113176040830184611251565b949350505050565b600060c08201905061133460008301896110e3565b61134160208301886110e3565b61134e6040830187611251565b61135b606083018661127e565b611368608083018561127e565b61137560a0830184611260565b979650505050505050565b600060408201905061139560008301856110e3565b6113a26020830184611251565b9392505050565b600060208201905081810360008301526113c38184611123565b905092915050565b600060208201905081810360008301526113e48161115c565b9050919050565b600060208201905081810360008301526114048161117f565b9050919050565b600060c0820190508181036000830152611424816111a2565b905061143360208301886110e3565b61144060408301876110e3565b61144d60608301866110e3565b61145a6080830185611251565b61146760a083018461126f565b9695505050505050565b6000602082019050818103600083015261148a816111c5565b9050919050565b600060208201905081810360008301526114aa816111e8565b9050919050565b600060208201905081810360008301526114ca8161120b565b9050919050565b600060208201905081810360008301526114ea8161122e565b9050919050565b60006114fb61150c565b9050611507828261162d565b919050565b6000604051905090565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611553826115ba565b915061155e836115ba565b9250828210156115715761157061165e565b5b828203905092915050565b60006115878261159a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006115f3826115d4565b9050919050565b60005b838110156116185780820151818401526020810190506115fd565b83811115611627576000848401525b50505050565b611636826116bc565b810181811067ffffffffffffffff821117156116555761165461168d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6342726964676500000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61188d8161157c565b811461189857600080fd5b50565b6118a48161158e565b81146118af57600080fd5b50565b6118bb816115ba565b81146118c657600080fd5b50565b6118d2816115c4565b81146118dd57600080fd5b50565b6118e9816115d4565b81146118f457600080fd5b5056fea164736f6c6343000804000a",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80631124bcf91461004457806336d4b75f1461006d5780635277cbc714610098578063645c8a4b146100b4575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610fed565b6100dd565b005b34801561007957600080fd5b506100826101c9565b60405161008f91906112a4565b60405180910390f35b6100b260048036038101906100ad919061103f565b6101ef565b005b3480156100c057600080fd5b506100db60048036038101906100d69190610fed565b6102fa565b005b6100e56103e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561014c576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5b114a545b5a08e3628017ac6e1af1f29e3f593dde50a4a93ab76f2a2220cd3881466040516101be929190611380565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000541415610235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022c906114b1565b60405180910390fd5b600260008190555061025d8160a00160208101906102539190610fed565b826060013561047f565b610276818036038101906102719190611068565b6104bd565b7f83bd4b75444b26482a091d91d32e43a65722f9fd8267a590beadccd9e61539e88160a00160208101906102aa9190610fed565b338360800160208101906102be9190610fed565b84606001358560200160208101906102d691906110ba565b6040516102e795949392919061140b565b60405180910390a1600160008190555050565b6103026103e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610369576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fef1a021f4afad10827a9f886313f92d00348a53d0b0df8d0aa270a0ac3379bc5816040516103d991906112a4565b60405180910390a150565b6103ec6105ec565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461047d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610474906113cb565b60405180910390fd5b565b6104b98282600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610619565b5050565b806020015167ffffffffffffffff16461415610505576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61053a8160a00151600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836060015161073d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5977fbb82608001518360a0015184606001518560200151866040015187600001516040518763ffffffff1660e01b81526004016105b79695949392919061131f565b600060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b5050505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000821415610654576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b801561069857813414610693576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610738565b600034146106d1576040517e3f45b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106dc846108a8565b90506106ea84333086610974565b82816106f5866108a8565b6106ff9190611548565b14610736576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610777576108a3565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107de576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161081b9291906112bf565b60206040518083038186803b15801561083357600080fd5b505afa158015610847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086b9190611091565b9050818110156108a1576108a084847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a54565b5b505b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461096b578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161091691906112a4565b60206040518083038186803b15801561092e57600080fd5b505afa158015610942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109669190611091565b61096d565b475b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156109db576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a42576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a4e84848484610bb2565b50505050565b6000811480610aed575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610a9b9291906112bf565b60206040518083038186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190611091565b145b610b2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b23906114d1565b60405180910390fd5b610bad8363095ea7b360e01b8484604051602401610b4b929190611380565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c3b565b505050565b610c35846323b872dd60e01b858585604051602401610bd3939291906112e8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c3b565b50505050565b6000610c9d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d029092919063ffffffff16565b9050600081511115610cfd5780806020019051810190610cbd9190611016565b610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390611491565b60405180910390fd5b5b505050565b6060610d118484600085610d1a565b90509392505050565b606082471015610d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d56906113eb565b60405180910390fd5b610d6885610e2e565b610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e90611471565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610dd0919061128d565b60006040518083038185875af1925050503d8060008114610e0d576040519150601f19603f3d011682016040523d82523d6000602084013e610e12565b606091505b5091509150610e22828286610e51565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610e6157829050610eb1565b600083511115610e745782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea891906113a9565b60405180910390fd5b9392505050565b600081359050610ec781611884565b92915050565b600081519050610edc8161189b565b92915050565b600060c08284031215610ef457600080fd5b81905092915050565b600060c08284031215610f0f57600080fd5b610f1960c06114f1565b90506000610f2984828501610fc3565b6000830152506020610f3d84828501610fd8565b6020830152506040610f5184828501610fd8565b6040830152506060610f6584828501610f99565b6060830152506080610f7984828501610eb8565b60808301525060a0610f8d84828501610eb8565b60a08301525092915050565b600081359050610fa8816118b2565b92915050565b600081519050610fbd816118b2565b92915050565b600081359050610fd2816118c9565b92915050565b600081359050610fe7816118e0565b92915050565b600060208284031215610fff57600080fd5b600061100d84828501610eb8565b91505092915050565b60006020828403121561102857600080fd5b600061103684828501610ecd565b91505092915050565b600060c0828403121561105157600080fd5b600061105f84828501610ee2565b91505092915050565b600060c0828403121561107a57600080fd5b600061108884828501610efd565b91505092915050565b6000602082840312156110a357600080fd5b60006110b184828501610fae565b91505092915050565b6000602082840312156110cc57600080fd5b60006110da84828501610fd8565b91505092915050565b6110ec8161157c565b82525050565b60006110fd82611516565b611107818561152c565b93506111178185602086016115fa565b80840191505092915050565b600061112e82611521565b6111388185611537565b93506111488185602086016115fa565b611151816116bc565b840191505092915050565b6000611169602283611537565b9150611174826116cd565b604082019050919050565b600061118c602683611537565b91506111978261171c565b604082019050919050565b60006111af600783611537565b91506111ba8261176b565b602082019050919050565b60006111d2601d83611537565b91506111dd82611794565b602082019050919050565b60006111f5602a83611537565b9150611200826117bd565b604082019050919050565b6000611218601f83611537565b91506112238261180c565b602082019050919050565b600061123b603683611537565b915061124682611835565b604082019050919050565b61125a816115ba565b82525050565b611269816115c4565b82525050565b611278816115e8565b82525050565b611287816115d4565b82525050565b600061129982846110f2565b915081905092915050565b60006020820190506112b960008301846110e3565b92915050565b60006040820190506112d460008301856110e3565b6112e160208301846110e3565b9392505050565b60006060820190506112fd60008301866110e3565b61130a60208301856110e3565b6113176040830184611251565b949350505050565b600060c08201905061133460008301896110e3565b61134160208301886110e3565b61134e6040830187611251565b61135b606083018661127e565b611368608083018561127e565b61137560a0830184611260565b979650505050505050565b600060408201905061139560008301856110e3565b6113a26020830184611251565b9392505050565b600060208201905081810360008301526113c38184611123565b905092915050565b600060208201905081810360008301526113e48161115c565b9050919050565b600060208201905081810360008301526114048161117f565b9050919050565b600060c0820190508181036000830152611424816111a2565b905061143360208301886110e3565b61144060408301876110e3565b61144d60608301866110e3565b61145a6080830185611251565b61146760a083018461126f565b9695505050505050565b6000602082019050818103600083015261148a816111c5565b9050919050565b600060208201905081810360008301526114aa816111e8565b9050919050565b600060208201905081810360008301526114ca8161120b565b9050919050565b600060208201905081810360008301526114ea8161122e565b9050919050565b60006114fb61150c565b9050611507828261162d565b919050565b6000604051905090565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611553826115ba565b915061155e836115ba565b9250828210156115715761157061165e565b5b828203905092915050565b60006115878261159a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006115f3826115d4565b9050919050565b60005b838110156116185780820151818401526020810190506115fd565b83811115611627576000848401525b50505050565b611636826116bc565b810181811067ffffffffffffffff821117156116555761165461168d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f6342726964676500000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b61188d8161157c565b811461189857600080fd5b50565b6118a48161158e565b81146118af57600080fd5b50565b6118bb816115ba565b81146118c657600080fd5b50565b6118d2816115c4565b81146118dd57600080fd5b50565b6118e9816115d4565b81146118f457600080fd5b5056fea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bridgeTokensCBridge((uint32,uint64,uint64,uint256,address,address))": {
        "params": {
          "_cBridgeData": ": provides necessary data for cBridge transfer"
        }
      },
      "initializeCBridge(address)": {
        "params": {
          "_cBridge": "address of the CBridge router contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridgeTokensCBridge((uint32,uint64,uint64,uint256,address,address))": {
        "notice": "initiates token bridging"
      },
      "initializeCBridge(address)": {
        "notice": "initializes state variables for the cBridge facet"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "src/bridges/facets/CBridgeFacet.sol:CBridgeFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 723,
        "contract": "src/bridges/facets/CBridgeFacet.sol:CBridgeFacet",
        "label": "cBridge",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}