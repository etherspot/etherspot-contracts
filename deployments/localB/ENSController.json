{
  "address": "0x0CA8EC9f23938FA9c1766BE8A2d2Ce37ea1D4918",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "AddrChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "GuardianRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NodeSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "NodeVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "addGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "node",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "label",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ENSController.SubNodeRegistration",
          "name": "subNodeRegistration",
          "type": "tuple"
        }
      ],
      "name": "hashSubNodeRegistration",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "guardians_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainNameHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainVersionHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "typedDataDomainSalt",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "isGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "guardianSignature",
          "type": "bytes"
        }
      ],
      "name": "registerSubNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "releaseNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "removeGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ENSRegistry",
          "name": "registry_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "submitNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typedDataDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifyGuardianSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "verifyNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x92087de6533f2395ae6c220a8233f3213351404f1a95a6e50da51f9283e1a1e2",
  "receipt": {
    "to": null,
    "from": "0xae32631bdbb2474CC11594268427A2da3D6aBd6B",
    "contractAddress": "0x0CA8EC9f23938FA9c1766BE8A2d2Ce37ea1D4918",
    "transactionIndex": 0,
    "gasUsed": "2923795",
    "logsBloom": "0x
    "blockHash": "0xf6ef429f89a2d2eabcde366ccfd28c40cb8c2fd595c0cd5a3e90211ea6dfd55c",
    "transactionHash": "0x92087de6533f2395ae6c220a8233f3213351404f1a95a6e50da51f9283e1a1e2",
    "logs": [],
    "blockNumber": 27,
    "cumulativeGasUsed": "2923795",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ea35c89096a4158a540bab69cab65944",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"GuardianRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NodeSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"NodeVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"addGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"internalType\":\"struct ENSController.SubNodeRegistration\",\"name\":\"subNodeRegistration\",\"type\":\"tuple\"}],\"name\":\"hashSubNodeRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"guardians_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainVersionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"typedDataDomainSalt\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"guardianSignature\",\"type\":\"bytes\"}],\"name\":\"registerSubNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"releaseNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"removeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENSRegistry\",\"name\":\"registry_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"submitNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typedDataDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyGuardianSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"verifyNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\",\"details\":\"The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.\",\"events\":{\"AddrChanged(bytes32,address)\":{\"details\":\"Emitted when the address field in node resolver is changed\",\"params\":{\"addr\":\"new address\",\"node\":\"node name hash\"}},\"NodeReleased(bytes32,address)\":{\"details\":\"Emitted when new node is released\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeSubmitted(bytes32,address)\":{\"details\":\"Emitted when new node is submitted\",\"params\":{\"node\":\"node name hash\",\"owner\":\"owner address\"}},\"NodeVerified(bytes32)\":{\"details\":\"Emitted when the existing owner is verified\",\"params\":{\"node\":\"node name hash\"}},\"RegistryChanged(address)\":{\"details\":\"Emitted when ENS registry address is changed\",\"params\":{\"registry\":\"registry address\"}}},\"kind\":\"dev\",\"methods\":{\"addGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"addr(bytes32)\":{\"details\":\"Used in address resolver\",\"params\":{\"node\":\"node name hash\"}},\"constructor\":{\"details\":\"Public constructor\"},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"params\":{\"subNodeRegistration\":\"struct\"},\"returns\":{\"_0\":\"hash\"}},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"params\":{\"gateway_\":\"gateway address\",\"registry_\":\"ENS registry address\",\"typedDataDomainNameHash\":\"hash of a typed data domain name\",\"typedDataDomainSalt\":\"typed data salt\",\"typedDataDomainVersionHash\":\"hash of a typed data domain version\"}},\"isGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"},\"returns\":{\"_0\":\"true when guardian exists\"}},\"isInitialized()\":{\"returns\":{\"_0\":\"true when contract is initialized\"}},\"registerSubNode(bytes32,bytes32,bytes)\":{\"params\":{\"guardianSignature\":\"guardian signature\",\"label\":\"label hash\",\"node\":\"node name hash\"}},\"releaseNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"removeGuardian(address)\":{\"params\":{\"guardian\":\"guardian address\"}},\"setAddr(bytes32,address)\":{\"details\":\"Used in address resolver\",\"params\":{\"addr\":\"address\",\"node\":\"node name hash\"}},\"setRegistry(address)\":{\"params\":{\"registry_\":\"registry address\"}},\"submitNode(bytes32)\":{\"details\":\"Should be called from the current ENS node owner\",\"params\":{\"node\":\"node name hash\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceID\":\"method signature\"},\"returns\":{\"_0\":\"true when contract supports interface\"}},\"verifyGuardianSignature(bytes32,bytes)\":{\"params\":{\"messageHash\":\"message hash\",\"signature\":\"signature\"},\"returns\":{\"_0\":\"true on correct guardian signature\"}},\"verifyNode(bytes32)\":{\"details\":\"Should be called from the previous ENS node owner\",\"params\":{\"node\":\"node name hash\"}}},\"title\":\"ENS controller\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGuardian(address)\":{\"notice\":\"Adds a new guardian\"},\"addr(bytes32)\":{\"notice\":\"Gets address\"},\"hashSubNodeRegistration((address,bytes32,bytes32))\":{\"notice\":\"Hashes `SubNodeRegistration` typed data\"},\"initialize(address,address[],address,bytes32,bytes32,bytes32)\":{\"notice\":\"Initializes `ENSController` contract\"},\"isGuardian(address)\":{\"notice\":\"Check if guardian exists\"},\"isInitialized()\":{\"notice\":\"Check if contract is initialized\"},\"registerSubNode(bytes32,bytes32,bytes)\":{\"notice\":\"Registers sub node\"},\"releaseNode(bytes32)\":{\"notice\":\"Releases node\"},\"removeGuardian(address)\":{\"notice\":\"Removes existing guardian\"},\"setAddr(bytes32,address)\":{\"notice\":\"Sets address\"},\"setRegistry(address)\":{\"notice\":\"Sets registry\"},\"submitNode(bytes32)\":{\"notice\":\"Submits node\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if contract supports interface\"},\"verifyGuardianSignature(bytes32,bytes)\":{\"notice\":\"Verifies guardian signature\"},\"verifyNode(bytes32)\":{\"notice\":\"Verifies node\"}},\"notice\":\"ENS subnode registrar\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ens/ENSController.sol\":\"ENSController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/common/access/Guarded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n\\n/**\\n * @title Guarded\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is guardians key accounts that can be granted exclusive access to\\n * specific functions.\\n *\\n * Each guardian account can remove other guardians\\n *\\n * Use `_initializeGuarded` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Guarded {\\n  using SignatureLib for bytes32;\\n\\n  mapping(address => bool) private guardians;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the new guardian is added\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianAdded(\\n    address sender,\\n    address guardian\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing guardian is removed\\n   * @param sender sender address\\n   * @param guardian guardian address\\n   */\\n  event GuardianRemoved(\\n    address sender,\\n    address guardian\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the guardian account\\n   */\\n  modifier onlyGuardian() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      guardians[tx.origin],\\n      \\\"Guarded: tx.origin is not the guardian\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Adds a new guardian\\n   * @param guardian guardian address\\n   */\\n  function addGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    _addGuardian(guardian);\\n  }\\n\\n  /**\\n   * @notice Removes existing guardian\\n   * @param guardian guardian address\\n   */\\n  function removeGuardian(\\n    address guardian\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin != guardian,\\n      \\\"Guarded: cannot remove self\\\"\\n    );\\n\\n    require(\\n      guardians[guardian],\\n      \\\"Guarded: guardian doesn't exist\\\"\\n    );\\n\\n    guardians[guardian] = false;\\n\\n    emit GuardianRemoved(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Check if guardian exists\\n   * @param guardian guardian address\\n   * @return true when guardian exists\\n   */\\n  function isGuardian(\\n    address guardian\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return guardians[guardian];\\n  }\\n\\n  /**\\n   * @notice Verifies guardian signature\\n   * @param messageHash message hash\\n   * @param signature signature\\n   * @return true on correct guardian signature\\n   */\\n  function verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes calldata signature\\n  )\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _verifyGuardianSignature(\\n      messageHash,\\n      signature\\n    );\\n  }\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `Guarded` contract\\n   * @dev If `guardians_` array is empty `tx.origin` is added as guardian account\\n   * @param guardians_ array of guardians addresses\\n   */\\n  function _initializeGuarded(\\n    address[] memory guardians_\\n  )\\n    internal\\n  {\\n    if (guardians_.length == 0) {\\n      // solhint-disable-next-line avoid-tx-origin\\n      _addGuardian(tx.origin);\\n    } else {\\n      uint guardiansLen = guardians_.length;\\n      for (uint i = 0; i < guardiansLen; i++) {\\n        _addGuardian(guardians_[i]);\\n      }\\n    }\\n  }\\n\\n\\n  // internal functions (views)\\n\\n  function _verifyGuardianSignature(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address guardian = messageHash.recoverAddress(signature);\\n\\n    return guardians[guardian];\\n  }\\n\\n  // private functions\\n\\n  function _addGuardian(\\n    address guardian\\n  )\\n    private\\n  {\\n    require(\\n      guardian != address(0),\\n      \\\"Guarded: cannot add 0x0 guardian\\\"\\n    );\\n\\n    require(\\n      !guardians[guardian],\\n      \\\"Guarded: guardian already exists\\\"\\n    );\\n\\n    guardians[guardian] = true;\\n\\n    emit GuardianAdded(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin,\\n      guardian\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb1142e8589c51ccac398ae2b373262e7040643cab26263a75493f541465c30f3\",\"license\":\"MIT\"},\"src/common/libs/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Bytes library\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\nlibrary BytesLib {\\n  /**\\n   * @notice Converts bytes to address\\n   * @param data data\\n   * @return address\\n   */\\n  function toAddress(\\n    bytes memory data\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result;\\n\\n    require(\\n      data.length == 20,\\n      \\\"BytesLib: invalid data length\\\"\\n    );\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      result := div(mload(add(data, 0x20)), 0x1000000000000000000000000)\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x64c84964ea91bfb1f2d859eea6c57fe5b4a6f269951a4adf5f58d306c54c7f76\",\"license\":\"MIT\"},\"src/common/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Signature library\\n *\\n * @dev Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.3.0/contracts/cryptography/ECDSA.sol#L26\\n */\\nlibrary SignatureLib {\\n  function recoverAddress(\\n    bytes32 messageHash,\\n    bytes memory signature\\n  )\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n\\n      // solhint-disable-next-line no-inline-assembly\\n      assembly {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n\\n      if (v < 27) {\\n        v += 27;\\n      }\\n\\n      if (v == 27 || v == 28) {\\n        result = ecrecover(messageHash, v, r, s);\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x51799826023958716dc49e0e4fef4a912363d3434e03b044f556c40078469fc4\",\"license\":\"MIT\"},\"src/common/lifecycle/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Contract module which provides access control mechanism, where\\n * there is the initializer account that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initializer account will be tx.origin during contract deployment and will be removed on first use.\\n * Use `onlyInitializer` modifier on contract initialize process.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract Initializable {\\n  address private initializer;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted after `onlyInitializer`\\n   * @param initializer initializer address\\n   */\\n  event Initialized(\\n    address initializer\\n  );\\n\\n  // modifiers\\n\\n  /**\\n   * @dev Throws if tx.origin is not the initializer\\n   */\\n  modifier onlyInitializer() {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == initializer,\\n      \\\"Initializable: tx.origin is not the initializer\\\"\\n    );\\n\\n    /// @dev removes initializer\\n    initializer = address(0);\\n\\n    _;\\n\\n    emit Initialized(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal constructor\\n   */\\n  constructor()\\n    internal\\n  {\\n    // solhint-disable-next-line avoid-tx-origin\\n    initializer = tx.origin;\\n  }\\n\\n   // external functions (views)\\n\\n  /**\\n   * @notice Check if contract is initialized\\n   * @return true when contract is initialized\\n   */\\n  function isInitialized()\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return initializer == address(0);\\n  }\\n}\\n\",\"keccak256\":\"0x3d47b2864dde5bde245917f7ac416a9e9715cdf1d226897e49838eb3186ee067\",\"license\":\"MIT\"},\"src/common/typedData/TypedDataContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title Typed data container\\n *\\n * @dev EIP-712 is used across whole repository.\\n *\\n * Use `_initializeTypedDataContainer` to initialize the contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract TypedDataContainer {\\n  string private constant TYPED_DATA_PREFIX = \\\"\\\\x19\\\\x01\\\";\\n  bytes32 private constant TYPED_DATA_DOMAIN_TYPE_HASH = keccak256(\\n    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n  );\\n\\n  bytes32 public typedDataDomainSeparator;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `TypedDataContainer` contract\\n   * @param domainNameHash hash of a domain name\\n   * @param domainVersionHash hash of a domain version\\n   * @param domainSalt domain salt\\n   */\\n  function _initializeTypedDataContainer(\\n    bytes32 domainNameHash,\\n    bytes32 domainVersionHash,\\n    bytes32 domainSalt\\n  )\\n    internal\\n  {\\n    uint256 chainId;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    typedDataDomainSeparator = keccak256(abi.encode(\\n        TYPED_DATA_DOMAIN_TYPE_HASH,\\n        domainNameHash,\\n        domainVersionHash,\\n        chainId,\\n        address(this),\\n        domainSalt\\n    ));\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Hashes primary typed data\\n   * @param dataHash hash of the data\\n   */\\n  function _hashPrimaryTypedData(\\n    bytes32 dataHash\\n  )\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encodePacked(\\n      TYPED_DATA_PREFIX,\\n      typedDataDomainSeparator,\\n      dataHash\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0x31acc326983ec008dae87c208b9afc0eb2d41cf236cc4b64d0cbad98a3969c3d\",\"license\":\"MIT\"},\"src/ens/ENSController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../common/access/Guarded.sol\\\";\\nimport \\\"../common/lifecycle/Initializable.sol\\\";\\nimport \\\"../common/typedData/TypedDataContainer.sol\\\";\\nimport \\\"../gateway/GatewayRecipient.sol\\\";\\nimport \\\"./ENSRegistry.sol\\\";\\n\\n\\n/**\\n * @title ENS controller\\n *\\n * @notice ENS subnode registrar\\n *\\n * @dev The process of adding root node consists of 3 steps:\\n * 1. `submitNode` - should be called from ENS node owner,\\n * 2. Change ENS node owner in ENS registry to ENS controller,\\n * 3. `verifyNode` - should be called from previous ENS node owner,\\n *\\n * To register sub node, `msg.sender` need to send valid signature from one of guardian key.\\n * Once registration is complete `msg.sender` becoming both node owner and `addr` record value.\\n *\\n * After registration sub node cannot be replaced.\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract ENSController is Guarded, Initializable, TypedDataContainer, GatewayRecipient {\\n  struct Node {\\n    address addr;\\n    address owner;\\n  }\\n\\n  struct SubNodeRegistration {\\n    address account;\\n    bytes32 node;\\n    bytes32 label;\\n  }\\n\\n  bytes32 private constant SUB_NODE_REGISTRATION_TYPE_HASH = keccak256(\\n    \\\"SubNodeRegistration(address account,bytes32 node,bytes32 label)\\\"\\n  );\\n\\n  ENSRegistry public registry;\\n\\n  mapping(bytes32 => Node) private nodes;\\n\\n  // events\\n\\n  /**\\n   * @dev Emitted when the address field in node resolver is changed\\n   * @param node node name hash\\n   * @param addr new address\\n   */\\n  event AddrChanged(\\n    bytes32 indexed node,\\n    address addr\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is submitted\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeSubmitted(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when the existing owner is verified\\n   * @param node node name hash\\n   */\\n  event NodeVerified(\\n    bytes32 node\\n  );\\n\\n  /**\\n   * @dev Emitted when new node is released\\n   * @param node node name hash\\n   * @param owner owner address\\n   */\\n  event NodeReleased(\\n    bytes32 node,\\n    address owner\\n  );\\n\\n  /**\\n   * @dev Emitted when ENS registry address is changed\\n   * @param registry registry address\\n   */\\n  event RegistryChanged(\\n    address registry\\n  );\\n\\n  /**\\n   * @dev Public constructor\\n   */\\n  constructor() public Guarded() Initializable() {}\\n\\n  // external functions\\n\\n  /**\\n   * @notice Initializes `ENSController` contract\\n   * @param registry_ ENS registry address\\n   * @param gateway_ gateway address\\n   * @param typedDataDomainNameHash hash of a typed data domain name\\n   * @param typedDataDomainVersionHash hash of a typed data domain version\\n   * @param typedDataDomainSalt typed data salt\\n   */\\n  function initialize(\\n    ENSRegistry registry_,\\n    address[] calldata guardians_,\\n    address gateway_,\\n    bytes32 typedDataDomainNameHash,\\n    bytes32 typedDataDomainVersionHash,\\n    bytes32 typedDataDomainSalt\\n  )\\n    external\\n    onlyInitializer\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    // Guarded\\n    _initializeGuarded(guardians_);\\n\\n    // GatewayRecipient\\n    _initializeGatewayRecipient(gateway_);\\n\\n    // TypedDataContainer\\n    _initializeTypedDataContainer(\\n      typedDataDomainNameHash,\\n      typedDataDomainVersionHash,\\n      typedDataDomainSalt\\n    );\\n  }\\n\\n  /**\\n   * @notice Sets registry\\n   * @param registry_ registry address\\n   */\\n  function setRegistry(\\n    ENSRegistry registry_\\n  )\\n    external\\n    onlyGuardian\\n  {\\n    require(\\n      address(registry_) != address(0),\\n      \\\"ENSController: cannot set 0x0 registry\\\"\\n    );\\n\\n    require(\\n      registry_ != registry,\\n      \\\"ENSController: registry already set\\\"\\n    );\\n\\n    registry = registry_;\\n\\n    emit RegistryChanged(\\n      address(registry)\\n    );\\n  }\\n\\n  /**\\n   * @notice Submits node\\n   * @dev Should be called from the current ENS node owner\\n   * @param node node name hash\\n   */\\n  function submitNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == address(0),\\n      \\\"ENSController: node already submitted\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == owner,\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].owner = owner;\\n\\n    emit NodeSubmitted(node, owner);\\n  }\\n\\n  /**\\n   * @notice Verifies node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function verifyNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(0),\\n      \\\"ENSController: node already exists\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    require(\\n      registry.owner(node) == address(this),\\n      \\\"ENSController: invalid ens node owner\\\"\\n    );\\n\\n    nodes[node].addr = address(this);\\n\\n    registry.setResolver(node, address(this));\\n\\n    emit NodeVerified(node);\\n  }\\n\\n  /**\\n   * @notice Releases node\\n   * @dev Should be called from the previous ENS node owner\\n   * @param node node name hash\\n   */\\n  function releaseNode(\\n    bytes32 node\\n  )\\n    external\\n  {\\n    address owner = _getContextAccount();\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: node doesn't exist\\\"\\n    );\\n\\n    require(\\n      nodes[node].owner == owner,\\n      \\\"ENSController: invalid node owner\\\"\\n    );\\n\\n    registry.setOwner(node, owner);\\n\\n    delete nodes[node].addr;\\n    delete nodes[node].owner;\\n\\n    emit NodeReleased(node, owner);\\n  }\\n\\n  /**\\n   * @notice Sets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   * @param addr address\\n   */\\n  function setAddr(\\n    bytes32 node,\\n    address addr\\n  )\\n    external\\n  {\\n    require(\\n      nodes[node].addr == _getContextAccount(),\\n      \\\"ENSController: caller is not the node owner\\\"\\n    );\\n\\n    nodes[node].addr = addr;\\n\\n    emit AddrChanged(node, addr);\\n  }\\n\\n  /**\\n   * @notice Registers sub node\\n   * @param node node name hash\\n   * @param label label hash\\n   * @param guardianSignature guardian signature\\n   */\\n  function registerSubNode(\\n    bytes32 node,\\n    bytes32 label,\\n    bytes calldata guardianSignature\\n  )\\n    external\\n  {\\n    address account = _getContextAccount();\\n\\n    bytes32 messageHash = _hashPrimaryTypedData(\\n      _hashTypedData(\\n        account,\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      _verifyGuardianSignature(messageHash, guardianSignature),\\n      \\\"ENSController: invalid guardian signature\\\"\\n    );\\n\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    require(\\n      nodes[node].addr == address(this),\\n      \\\"ENSController: invalid node\\\"\\n    );\\n\\n    require(\\n      nodes[subNode].addr == address(0),\\n      \\\"ENSController: label already taken\\\"\\n    );\\n\\n    nodes[subNode].addr = account;\\n\\n    registry.setSubnodeOwner(node, label, address(this));\\n    registry.setResolver(subNode, address(this));\\n    registry.setOwner(subNode, account);\\n\\n    emit AddrChanged(subNode, account);\\n  }\\n\\n  // external functions (views)\\n\\n  /**\\n   * @notice Gets address\\n   * @dev Used in address resolver\\n   * @param node node name hash\\n   */\\n  function addr(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return nodes[node].addr;\\n  }\\n\\n  // external functions (pure)\\n\\n  /**\\n   * @notice Checks if contract supports interface\\n   * @param interfaceID method signature\\n   * @return true when contract supports interface\\n   */\\n  function supportsInterface(\\n    bytes4 interfaceID\\n  )\\n    external\\n    pure\\n    returns (bool)\\n  {\\n    return (\\n      /// @dev bytes4(keccak256('supportsInterface(bytes4)'));\\n      interfaceID == 0x01ffc9a7 ||\\n      /// @dev bytes4(keccak256('addr(bytes32)'));\\n      interfaceID == 0x3b3b57de\\n    );\\n  }\\n\\n  // public functions (views)\\n\\n  /**\\n   * @notice Hashes `SubNodeRegistration` typed data\\n   * @param subNodeRegistration struct\\n   * @return hash\\n   */\\n  function hashSubNodeRegistration(\\n    SubNodeRegistration memory subNodeRegistration\\n  )\\n    public\\n    view\\n    returns (bytes32)\\n  {\\n    return _hashPrimaryTypedData(\\n      _hashTypedData(\\n        subNodeRegistration.account,\\n        subNodeRegistration.node,\\n        subNodeRegistration.label\\n      )\\n    );\\n  }\\n\\n  // private functions (pure)\\n\\n  function _hashTypedData(\\n    address account,\\n    bytes32 node,\\n    bytes32 label\\n  )\\n    private\\n    pure\\n    returns (bytes32)\\n  {\\n    return keccak256(abi.encode(\\n      SUB_NODE_REGISTRATION_TYPE_HASH,\\n      account,\\n      node,\\n      label\\n    ));\\n  }\\n}\\n\",\"keccak256\":\"0xb2ef3d37c8c92b669195c09da1815693d32c9fbcc8bada1a1048339eb81f02a4\",\"license\":\"MIT\"},\"src/ens/ENSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @title ENS registry\\n *\\n * @dev Base on https://github.com/ensdomains/ens/blob/v0.2.2/contracts/ENSRegistry.sol\\n */\\ncontract ENSRegistry {\\n  struct Record {\\n    address owner;\\n    address resolver;\\n    uint64 ttl;\\n  }\\n\\n  mapping(bytes32 => Record) private records;\\n\\n  // events\\n\\n  event NewOwner(\\n    bytes32 indexed node,\\n    bytes32 indexed label,\\n    address owner\\n  );\\n\\n  event Transfer(\\n    bytes32 indexed node,\\n    address owner\\n  );\\n\\n  event NewResolver(\\n    bytes32 indexed node,\\n    address resolver\\n  );\\n\\n  event NewTTL(\\n    bytes32 indexed node,\\n    uint64 ttl\\n  );\\n\\n  // modifiers\\n\\n  modifier onlyNodeOwner(\\n    bytes32 node\\n  ) {\\n    require(\\n      records[node].owner == msg.sender,\\n      \\\"ENSRegistry: msg.sender is not the node owner\\\"\\n    );\\n\\n    _;\\n  }\\n\\n  /**\\n   * @dev public constructor\\n   */\\n  constructor()\\n    public\\n  {\\n    records[0x0].owner = msg.sender;\\n  }\\n\\n  // external functions\\n\\n  function setOwner(\\n    bytes32 node,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].owner = owner;\\n\\n    emit Transfer(node, owner);\\n  }\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    bytes32 subNode = keccak256(\\n      abi.encodePacked(\\n        node,\\n        label\\n      )\\n    );\\n\\n    records[subNode].owner = owner;\\n\\n    emit NewOwner(node, label, owner);\\n  }\\n\\n  function setResolver(\\n    bytes32 node,\\n    address resolver\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].resolver = resolver;\\n\\n    emit NewResolver(node, resolver);\\n  }\\n\\n  function setTTL(\\n    bytes32 node,\\n    uint64 ttl\\n  )\\n    external\\n    onlyNodeOwner(node)\\n  {\\n    records[node].ttl = ttl;\\n\\n    emit NewTTL(node, ttl);\\n  }\\n\\n  // external functions (views)\\n\\n  function owner(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].owner;\\n  }\\n\\n  function resolver(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (address)\\n  {\\n    return records[node].resolver;\\n  }\\n\\n  function ttl(\\n    bytes32 node\\n  )\\n    external\\n    view\\n    returns (uint64)\\n  {\\n    return records[node].ttl;\\n  }\\n}\\n\",\"keccak256\":\"0x7ddde9c4f4acd9e4d26a87636969cb6e27d018449026e99201808f951b9a0104\",\"license\":\"MIT\"},\"src/gateway/GatewayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"../common/libs/BytesLib.sol\\\";\\n\\n\\n/**\\n * @title Gateway recipient\\n *\\n * @notice Gateway target contract\\n *\\n * @author Stanis\\u0142aw G\\u0142ogowski <stan@pillarproject.io>\\n */\\ncontract GatewayRecipient {\\n  using BytesLib for bytes;\\n\\n  address public gateway;\\n\\n  /**\\n   * @dev internal constructor\\n   */\\n  constructor() internal {}\\n\\n  // internal functions\\n\\n  /**\\n   * @notice Initializes `GatewayRecipient` contract\\n   * @param gateway_ `Gateway` contract address\\n   */\\n  function _initializeGatewayRecipient(\\n    address gateway_\\n  )\\n    internal\\n  {\\n    gateway = gateway_;\\n  }\\n\\n  // internal functions (views)\\n\\n  /**\\n   * @notice Gets gateway context account\\n   * @return context account address\\n   */\\n  function _getContextAccount()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(40);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context sender\\n   * @return context sender address\\n   */\\n  function _getContextSender()\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return _getContextAddress(20);\\n  }\\n\\n  /**\\n   * @notice Gets gateway context data\\n   * @return context data\\n   */\\n  function _getContextData()\\n    internal\\n    view\\n    returns (bytes calldata)\\n  {\\n    bytes calldata result;\\n\\n    if (_isGatewaySender()) {\\n      result = msg.data[:msg.data.length - 40];\\n    } else {\\n      result = msg.data;\\n    }\\n\\n    return result;\\n  }\\n\\n  // private functions (views)\\n\\n  function _getContextAddress(\\n    uint256 offset\\n  )\\n    private\\n    view\\n    returns (address)\\n  {\\n    address result = address(0);\\n\\n    if (_isGatewaySender()) {\\n      uint from = msg.data.length - offset;\\n      result = bytes(msg.data[from:from + 20]).toAddress();\\n    } else {\\n      result = msg.sender;\\n    }\\n\\n    return result;\\n  }\\n\\n  function _isGatewaySender()\\n    private\\n    view\\n    returns (bool)\\n  {\\n    bool result;\\n\\n    if (msg.sender == gateway) {\\n      require(\\n        msg.data.length >= 44,\\n        \\\"GatewayRecipient: invalid msg.data\\\"\\n      );\\n\\n      result = true;\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xe3fd29479d748d67360c61a9cbaafc66eaca25f476e59a45e842472bcf5233fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5032600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506133cd806100616000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806371404156116100a2578063a91ee0dc11610071578063a91ee0dc146102dd578063bd106a02146102f9578063c8cc2aee14610317578063d0f710d614610333578063d5fa2b001461036357610116565b8063714041561461026b5780637b103999146102875780637d0e0e7e146102a5578063a526d83b146102c157610116565b8063392e53cd116100e9578063392e53cd146101b55780633b3b57de146101d357806346386f73146102035780635773fd1d1461021f5780636df0cf421461023b57610116565b806301ffc9a71461011b5780630c68ba211461014b578063116191b61461017b57806329ae6a7e14610199575b600080fd5b61013560048036038101906101309190612468565b61037f565b6040516101429190612dad565b60405180910390f35b610165600480360381019061016091906122ed565b6103e1565b6040516101729190612dad565b60405180910390f35b610183610436565b6040516101909190612d4e565b60405180910390f35b6101b360048036038101906101ae919061233f565b61045c565b005b6101bd6106ee565b6040516101ca9190612dad565b60405180910390f35b6101ed60048036038101906101e8919061233f565b610746565b6040516101fa9190612d4e565b60405180910390f35b61021d600480360381019061021891906123a4565b610786565b005b610239600480360381019061023491906124ba565b610bf1565b005b61025560048036038101906102509190612561565b610e12565b6040516102629190612dc8565b60405180910390f35b610285600480360381019061028091906122ed565b610e3a565b005b61028f611052565b60405161029c9190612f2e565b60405180910390f35b6102bf60048036038101906102ba919061233f565b611078565b005b6102db60048036038101906102d691906122ed565b611378565b005b6102f760048036038101906102f29190612491565b61140f565b005b610301611638565b60405161030e9190612dc8565b60405180910390f35b610331600480360381019061032c919061233f565b61163e565b005b61034d60048036038101906103489190612410565b6119ca565b60405161035a9190612dad565b60405180910390f35b61037d60048036038101906103789190612368565b611a23565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103da5750633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610466611b5f565b90503073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390613009565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790612f49565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b815260040161060d929190612de3565b600060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506005600083815260200190815260200160002060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005600083815260200190815260200160002060010160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d382826040516106e2929190612de3565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610790611b5f565b905060006107a76107a2838888611b70565b611bc8565b90506107f78185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c33565b610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90612f69565b60405180910390fd5b6000868660405160200161084b929190612ce9565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff166005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe90612fe9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390612f89565b60405180910390fd5b826005600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238888306040518463ffffffff1660e01b8152600401610a6093929190612e51565b600060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401610aef929190612de3565b600060405180830381600087803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610b7e929190612de3565b600060405180830381600087803b158015610b9857600080fd5b505af1158015610bac573d6000803e3d6000fd5b50505050807f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd284604051610be09190612d4e565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7890612fc9565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90613089565b60405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610dbe868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611ca0565b610dc784611cf8565b610dd2838383611d3c565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e632604051610e019190612d69565b60405180910390a150505050505050565b6000610e33610e2e836000015184602001518560400151611b70565b611bc8565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90613069565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b90613149565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb6906130e9565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b3282604051611047929190612d84565b60405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611082611b5f565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611129576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611120906130c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906130a9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016112409190612dc8565b60206040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190612316565b73ffffffffffffffffffffffffffffffffffffffff16146112e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dd90613109565b60405180910390fd5b806005600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae36828260405161136c929190612de3565b60405180910390a15050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90613069565b60405180910390fd5b61140c81611d9e565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661149a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149190613069565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561150a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150190613089565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290613189565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161162d9190612d4e565b60405180910390a150565b60025481565b6000611648611b5f565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e6906130c9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178a90612f49565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016118059190612dc8565b60206040518083038186803b15801561181d57600080fd5b505afa158015611831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118559190612316565b73ffffffffffffffffffffffffffffffffffffffff16146118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290613109565b60405180910390fd5b306005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b815260040161195d929190612de3565b600060405180830381600087803b15801561197757600080fd5b505af115801561198b573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f200826040516119be9190612dc8565b60405180910390a15050565b6000611a1a8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c33565b90509392505050565b611a2b611b5f565b73ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590613049565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051611b539190612d4e565b60405180910390a25050565b6000611b6b6028611f2d565b905090565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed848484604051602001611ba99493929190612e0c565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060025483604051602001611c1693929190612d15565b604051602081830303815290604052805190602001209050919050565b600080611c498385611fc290919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600081511415611cb857611cb332611d9e565b611cf5565b60008151905060005b81811015611cf257611ce5838281518110611cd857fe5b6020026020010151611d9e565b8080600101915050611cc1565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac564728484833086604051602001611d7c96959493929190612e88565b6040516020818303038152906040528051906020012060028190555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0590612fa9565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9190613129565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051611f22929190612d84565b60405180910390a150565b60008060009050611f3c61207d565b15611fb5576000836000369050039050611fad60003683906014850192611f65939291906131fd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061212a565b915050611fb9565b3390505b80915050919050565b600080600090506041835114156120735760008060006020860151925060408601519150606086015160001a9050601b8160ff16101561200357601b810190505b601b8160ff1614806120185750601c8160ff16145b1561206f57600187828585604051600081526020016040526040516120409493929190612ee9565b6020604051602081039080840390855afa158015612062573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561212357602c6000369050101561211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613029565b60405180910390fd5b600190505b8091505090565b6000806014835114612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216890613169565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b60008135905061219f81613364565b92915050565b6000815190506121b481613364565b92915050565b60008083601f8401126121cc57600080fd5b8235905067ffffffffffffffff8111156121e557600080fd5b6020830191508360208202830111156121fd57600080fd5b9250929050565b6000813590506122138161337b565b92915050565b60008135905061222881613392565b92915050565b60008083601f84011261224057600080fd5b8235905067ffffffffffffffff81111561225957600080fd5b60208301915083600182028301111561227157600080fd5b9250929050565b600081359050612287816133a9565b92915050565b60006060828403121561229f57600080fd5b6122a960606131a9565b905060006122b984828501612190565b60008301525060206122cd84828501612204565b60208301525060406122e184828501612204565b60408301525092915050565b6000602082840312156122ff57600080fd5b600061230d84828501612190565b91505092915050565b60006020828403121561232857600080fd5b6000612336848285016121a5565b91505092915050565b60006020828403121561235157600080fd5b600061235f84828501612204565b91505092915050565b6000806040838503121561237b57600080fd5b600061238985828601612204565b925050602061239a85828601612190565b9150509250929050565b600080600080606085870312156123ba57600080fd5b60006123c887828801612204565b94505060206123d987828801612204565b935050604085013567ffffffffffffffff8111156123f657600080fd5b6124028782880161222e565b925092505092959194509250565b60008060006040848603121561242557600080fd5b600061243386828701612204565b935050602084013567ffffffffffffffff81111561245057600080fd5b61245c8682870161222e565b92509250509250925092565b60006020828403121561247a57600080fd5b600061248884828501612219565b91505092915050565b6000602082840312156124a357600080fd5b60006124b184828501612278565b91505092915050565b600080600080600080600060c0888a0312156124d557600080fd5b60006124e38a828b01612278565b975050602088013567ffffffffffffffff81111561250057600080fd5b61250c8a828b016121ba565b9650965050604061251f8a828b01612190565b94505060606125308a828b01612204565b93505060806125418a828b01612204565b92505060a06125528a828b01612204565b91505092959891949750929550565b60006060828403121561257357600080fd5b60006125818482850161228d565b91505092915050565b612593816132cd565b82525050565b6125a281613230565b82525050565b6125b181613242565b82525050565b6125c08161324e565b82525050565b6125d76125d28261324e565b61335a565b82525050565b6125e6816132df565b82525050565b60006125f7826131d6565b61260181856131f2565b9350612611818560208601613327565b80840191505092915050565b600061262a6021836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126906029836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b60006126f66022836131e1565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061275c6020836131e1565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b600061279c602f836131e1565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000612802601b836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b60006128426021836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006128a86022836131e1565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061290e602b836131e1565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b60006129746026836131e1565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129da6026836131e1565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a406025836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612aa66022836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b0c601f836131e1565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000612b4c6025836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612bb26020836131e1565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000612bf2601b836131e1565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000612c32601d836131e1565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000612c726023836131e1565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b612cd4816132b6565b82525050565b612ce3816132c0565b82525050565b6000612cf582856125c6565b602082019150612d0582846125c6565b6020820191508190509392505050565b6000612d2182866125ec565b9150612d2d82856125c6565b602082019150612d3d82846125c6565b602082019150819050949350505050565b6000602082019050612d636000830184612599565b92915050565b6000602082019050612d7e600083018461258a565b92915050565b6000604082019050612d99600083018561258a565b612da66020830184612599565b9392505050565b6000602082019050612dc260008301846125a8565b92915050565b6000602082019050612ddd60008301846125b7565b92915050565b6000604082019050612df860008301856125b7565b612e056020830184612599565b9392505050565b6000608082019050612e2160008301876125b7565b612e2e6020830186612599565b612e3b60408301856125b7565b612e4860608301846125b7565b95945050505050565b6000606082019050612e6660008301866125b7565b612e7360208301856125b7565b612e806040830184612599565b949350505050565b600060c082019050612e9d60008301896125b7565b612eaa60208301886125b7565b612eb760408301876125b7565b612ec46060830186612ccb565b612ed16080830185612599565b612ede60a08301846125b7565b979650505050505050565b6000608082019050612efe60008301876125b7565b612f0b6020830186612cda565b612f1860408301856125b7565b612f2560608301846125b7565b95945050505050565b6000602082019050612f4360008301846125dd565b92915050565b60006020820190508181036000830152612f628161261d565b9050919050565b60006020820190508181036000830152612f8281612683565b9050919050565b60006020820190508181036000830152612fa2816126e9565b9050919050565b60006020820190508181036000830152612fc28161274f565b9050919050565b60006020820190508181036000830152612fe28161278f565b9050919050565b60006020820190508181036000830152613002816127f5565b9050919050565b6000602082019050818103600083015261302281612835565b9050919050565b600060208201905081810360008301526130428161289b565b9050919050565b6000602082019050818103600083015261306281612901565b9050919050565b6000602082019050818103600083015261308281612967565b9050919050565b600060208201905081810360008301526130a2816129cd565b9050919050565b600060208201905081810360008301526130c281612a33565b9050919050565b600060208201905081810360008301526130e281612a99565b9050919050565b6000602082019050818103600083015261310281612aff565b9050919050565b6000602082019050818103600083015261312281612b3f565b9050919050565b6000602082019050818103600083015261314281612ba5565b9050919050565b6000602082019050818103600083015261316281612be5565b9050919050565b6000602082019050818103600083015261318281612c25565b9050919050565b600060208201905081810360008301526131a281612c65565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156131cc57600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000808585111561320d57600080fd5b8386111561321a57600080fd5b6001850283019150848603905094509492505050565b600061323b82613296565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061328f82613230565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006132d882613303565b9050919050565b60006132ea826132f1565b9050919050565b60006132fc82613296565b9050919050565b600061330e82613315565b9050919050565b600061332082613296565b9050919050565b60005b8381101561334557808201518184015260208101905061332a565b83811115613354576000848401525b50505050565b6000819050919050565b61336d81613230565b811461337857600080fd5b50565b6133848161324e565b811461338f57600080fd5b50565b61339b81613258565b81146133a657600080fd5b50565b6133b281613284565b81146133bd57600080fd5b5056fea164736f6c634300060c000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806371404156116100a2578063a91ee0dc11610071578063a91ee0dc146102dd578063bd106a02146102f9578063c8cc2aee14610317578063d0f710d614610333578063d5fa2b001461036357610116565b8063714041561461026b5780637b103999146102875780637d0e0e7e146102a5578063a526d83b146102c157610116565b8063392e53cd116100e9578063392e53cd146101b55780633b3b57de146101d357806346386f73146102035780635773fd1d1461021f5780636df0cf421461023b57610116565b806301ffc9a71461011b5780630c68ba211461014b578063116191b61461017b57806329ae6a7e14610199575b600080fd5b61013560048036038101906101309190612468565b61037f565b6040516101429190612dad565b60405180910390f35b610165600480360381019061016091906122ed565b6103e1565b6040516101729190612dad565b60405180910390f35b610183610436565b6040516101909190612d4e565b60405180910390f35b6101b360048036038101906101ae919061233f565b61045c565b005b6101bd6106ee565b6040516101ca9190612dad565b60405180910390f35b6101ed60048036038101906101e8919061233f565b610746565b6040516101fa9190612d4e565b60405180910390f35b61021d600480360381019061021891906123a4565b610786565b005b610239600480360381019061023491906124ba565b610bf1565b005b61025560048036038101906102509190612561565b610e12565b6040516102629190612dc8565b60405180910390f35b610285600480360381019061028091906122ed565b610e3a565b005b61028f611052565b60405161029c9190612f2e565b60405180910390f35b6102bf60048036038101906102ba919061233f565b611078565b005b6102db60048036038101906102d691906122ed565b611378565b005b6102f760048036038101906102f29190612491565b61140f565b005b610301611638565b60405161030e9190612dc8565b60405180910390f35b610331600480360381019061032c919061233f565b61163e565b005b61034d60048036038101906103489190612410565b6119ca565b60405161035a9190612dad565b60405180910390f35b61037d60048036038101906103789190612368565b611a23565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103da5750633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610466611b5f565b90503073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390613009565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790612f49565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c383836040518363ffffffff1660e01b815260040161060d929190612de3565b600060405180830381600087803b15801561062757600080fd5b505af115801561063b573d6000803e3d6000fd5b505050506005600083815260200190815260200160002060000160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556005600083815260200190815260200160002060010160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557f7803a16d95f9ca635bdec561006625e7444d8a9f8463866643cc03af011779d382826040516106e2929190612de3565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610790611b5f565b905060006107a76107a2838888611b70565b611bc8565b90506107f78185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c33565b610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90612f69565b60405180910390fd5b6000868660405160200161084b929190612ce9565b6040516020818303038152906040528051906020012090503073ffffffffffffffffffffffffffffffffffffffff166005600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe90612fe9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a390612f89565b60405180910390fd5b826005600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59238888306040518463ffffffff1660e01b8152600401610a6093929190612e51565b600060405180830381600087803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a82306040518363ffffffff1660e01b8152600401610aef929190612de3565b600060405180830381600087803b158015610b0957600080fd5b505af1158015610b1d573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b0fc9c382856040518363ffffffff1660e01b8152600401610b7e929190612de3565b600060405180830381600087803b158015610b9857600080fd5b505af1158015610bac573d6000803e3d6000fd5b50505050807f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd284604051610be09190612d4e565b60405180910390a250505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7890612fc9565b60405180910390fd5b6000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90613089565b60405180910390fd5b86600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610dbe868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050611ca0565b610dc784611cf8565b610dd2838383611d3c565b7f908408e307fc569b417f6cbec5d5a06f44a0a505ac0479b47d421a4b2fd6a1e632604051610e019190612d69565b60405180910390a150505050505050565b6000610e33610e2e836000015184602001518560400151611b70565b611bc8565b9050919050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ec5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90613069565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b90613149565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb6906130e9565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fee943cdb81826d5909c559c6b1ae6908fcaf2dbc16c4b730346736b486283e8b3282604051611047929190612d84565b60405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611082611b5f565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611129576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611120906130c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c5906130a9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016112409190612dc8565b60206040518083038186803b15801561125857600080fd5b505afa15801561126c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112909190612316565b73ffffffffffffffffffffffffffffffffffffffff16146112e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dd90613109565b60405180910390fd5b806005600084815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc1e082a8c26f27c26e1bf5d0ce7ddd579ec7f6d7eb3ea90d8abd6c40991bae36828260405161136c929190612de3565b60405180910390a15050565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90613069565b60405180910390fd5b61140c81611d9e565b50565b6000803273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661149a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149190613069565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561150a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150190613089565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290613189565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb0239c63d4033dcdd21bd44f8dd479a03efbae12f6bbe27c0a5f923d26514cc600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161162d9190612d4e565b60405180910390a150565b60025481565b6000611648611b5f565b9050600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146116ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e6906130c9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611793576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178a90612f49565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3846040518263ffffffff1660e01b81526004016118059190612dc8565b60206040518083038186803b15801561181d57600080fd5b505afa158015611831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118559190612316565b73ffffffffffffffffffffffffffffffffffffffff16146118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a290613109565b60405180910390fd5b306005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83306040518363ffffffff1660e01b815260040161195d929190612de3565b600060405180830381600087803b15801561197757600080fd5b505af115801561198b573d6000803e3d6000fd5b505050507fcefbe9dbadcf675eef14e23810996ff38541fc26b4dd77cd6724b0eedc96f200826040516119be9190612dc8565b60405180910390a15050565b6000611a1a8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c33565b90509392505050565b611a2b611b5f565b73ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590613049565b60405180910390fd5b806005600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550817f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd282604051611b539190612d4e565b60405180910390a25050565b6000611b6b6028611f2d565b905090565b60007f621363c539a3aa1024c8837ca1dc095db03b7f9512b3a95ecb429aae7fd953ed848484604051602001611ba99493929190612e0c565b6040516020818303038152906040528051906020012090509392505050565b60006040518060400160405280600281526020017f190100000000000000000000000000000000000000000000000000000000000081525060025483604051602001611c1693929190612d15565b604051602081830303815290604052805190602001209050919050565b600080611c498385611fc290919063ffffffff16565b90506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600081511415611cb857611cb332611d9e565b611cf5565b60008151905060005b81811015611cf257611ce5838281518110611cd857fe5b6020026020010151611d9e565b8080600101915050611cc1565b50505b50565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60004690507fd87cd6ef79d4e2b95e15ce8abf732db51ec771f1ca2edccf22a46c729ac564728484833086604051602001611d7c96959493929190612e88565b6040516020818303038152906040528051906020012060028190555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0590612fa9565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611e9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9190613129565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fbc3292102fa77e083913064b282926717cdfaede4d35f553d66366c0a3da755a3282604051611f22929190612d84565b60405180910390a150565b60008060009050611f3c61207d565b15611fb5576000836000369050039050611fad60003683906014850192611f65939291906131fd565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061212a565b915050611fb9565b3390505b80915050919050565b600080600090506041835114156120735760008060006020860151925060408601519150606086015160001a9050601b8160ff16101561200357601b810190505b601b8160ff1614806120185750601c8160ff16145b1561206f57600187828585604051600081526020016040526040516120409493929190612ee9565b6020604051602081039080840390855afa158015612062573d6000803e3d6000fd5b5050506020604051035193505b5050505b8091505092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561212357602c6000369050101561211e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211590613029565b60405180910390fd5b600190505b8091505090565b6000806014835114612171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216890613169565b60405180910390fd5b6c01000000000000000000000000602084015104905080915050919050565b60008135905061219f81613364565b92915050565b6000815190506121b481613364565b92915050565b60008083601f8401126121cc57600080fd5b8235905067ffffffffffffffff8111156121e557600080fd5b6020830191508360208202830111156121fd57600080fd5b9250929050565b6000813590506122138161337b565b92915050565b60008135905061222881613392565b92915050565b60008083601f84011261224057600080fd5b8235905067ffffffffffffffff81111561225957600080fd5b60208301915083600182028301111561227157600080fd5b9250929050565b600081359050612287816133a9565b92915050565b60006060828403121561229f57600080fd5b6122a960606131a9565b905060006122b984828501612190565b60008301525060206122cd84828501612204565b60208301525060406122e184828501612204565b60408301525092915050565b6000602082840312156122ff57600080fd5b600061230d84828501612190565b91505092915050565b60006020828403121561232857600080fd5b6000612336848285016121a5565b91505092915050565b60006020828403121561235157600080fd5b600061235f84828501612204565b91505092915050565b6000806040838503121561237b57600080fd5b600061238985828601612204565b925050602061239a85828601612190565b9150509250929050565b600080600080606085870312156123ba57600080fd5b60006123c887828801612204565b94505060206123d987828801612204565b935050604085013567ffffffffffffffff8111156123f657600080fd5b6124028782880161222e565b925092505092959194509250565b60008060006040848603121561242557600080fd5b600061243386828701612204565b935050602084013567ffffffffffffffff81111561245057600080fd5b61245c8682870161222e565b92509250509250925092565b60006020828403121561247a57600080fd5b600061248884828501612219565b91505092915050565b6000602082840312156124a357600080fd5b60006124b184828501612278565b91505092915050565b600080600080600080600060c0888a0312156124d557600080fd5b60006124e38a828b01612278565b975050602088013567ffffffffffffffff81111561250057600080fd5b61250c8a828b016121ba565b9650965050604061251f8a828b01612190565b94505060606125308a828b01612204565b93505060806125418a828b01612204565b92505060a06125528a828b01612204565b91505092959891949750929550565b60006060828403121561257357600080fd5b60006125818482850161228d565b91505092915050565b612593816132cd565b82525050565b6125a281613230565b82525050565b6125b181613242565b82525050565b6125c08161324e565b82525050565b6125d76125d28261324e565b61335a565b82525050565b6125e6816132df565b82525050565b60006125f7826131d6565b61260181856131f2565b9350612611818560208601613327565b80840191505092915050565b600061262a6021836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f6465206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006126906029836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420677561726469616e2060008301527f7369676e617475726500000000000000000000000000000000000000000000006020830152604082019050919050565b60006126f66022836131e1565b91507f454e53436f6e74726f6c6c65723a206c6162656c20616c72656164792074616b60008301527f656e0000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061275c6020836131e1565b91507f477561726465643a2063616e6e6f74206164642030783020677561726469616e6000830152602082019050919050565b600061279c602f836131e1565b91507f496e697469616c697a61626c653a2074782e6f726967696e206973206e6f742060008301527f74686520696e697469616c697a657200000000000000000000000000000000006020830152604082019050919050565b6000612802601b836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c6964206e6f646500000000006000830152602082019050919050565b60006128426021836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520646f65736e2774206578697360008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006128a86022836131e1565b91507f47617465776179526563697069656e743a20696e76616c6964206d73672e646160008301527f74610000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061290e602b836131e1565b91507f454e53436f6e74726f6c6c65723a2063616c6c6572206973206e6f742074686560008301527f206e6f6465206f776e65720000000000000000000000000000000000000000006020830152604082019050919050565b60006129746026836131e1565b91507f477561726465643a2074782e6f726967696e206973206e6f742074686520677560008301527f61726469616e00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129da6026836131e1565b91507f454e53436f6e74726f6c6c65723a2063616e6e6f74207365742030783020726560008301527f67697374727900000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612a406025836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479207375626d60008301527f69747465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612aa66022836131e1565b91507f454e53436f6e74726f6c6c65723a206e6f646520616c7265616479206578697360008301527f74730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b0c601f836131e1565b91507f477561726465643a20677561726469616e20646f65736e2774206578697374006000830152602082019050919050565b6000612b4c6025836131e1565b91507f454e53436f6e74726f6c6c65723a20696e76616c696420656e73206e6f64652060008301527f6f776e65720000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612bb26020836131e1565b91507f477561726465643a20677561726469616e20616c7265616479206578697374736000830152602082019050919050565b6000612bf2601b836131e1565b91507f477561726465643a2063616e6e6f742072656d6f76652073656c6600000000006000830152602082019050919050565b6000612c32601d836131e1565b91507f42797465734c69623a20696e76616c69642064617461206c656e6774680000006000830152602082019050919050565b6000612c726023836131e1565b91507f454e53436f6e74726f6c6c65723a20726567697374727920616c72656164792060008301527f73657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b612cd4816132b6565b82525050565b612ce3816132c0565b82525050565b6000612cf582856125c6565b602082019150612d0582846125c6565b6020820191508190509392505050565b6000612d2182866125ec565b9150612d2d82856125c6565b602082019150612d3d82846125c6565b602082019150819050949350505050565b6000602082019050612d636000830184612599565b92915050565b6000602082019050612d7e600083018461258a565b92915050565b6000604082019050612d99600083018561258a565b612da66020830184612599565b9392505050565b6000602082019050612dc260008301846125a8565b92915050565b6000602082019050612ddd60008301846125b7565b92915050565b6000604082019050612df860008301856125b7565b612e056020830184612599565b9392505050565b6000608082019050612e2160008301876125b7565b612e2e6020830186612599565b612e3b60408301856125b7565b612e4860608301846125b7565b95945050505050565b6000606082019050612e6660008301866125b7565b612e7360208301856125b7565b612e806040830184612599565b949350505050565b600060c082019050612e9d60008301896125b7565b612eaa60208301886125b7565b612eb760408301876125b7565b612ec46060830186612ccb565b612ed16080830185612599565b612ede60a08301846125b7565b979650505050505050565b6000608082019050612efe60008301876125b7565b612f0b6020830186612cda565b612f1860408301856125b7565b612f2560608301846125b7565b95945050505050565b6000602082019050612f4360008301846125dd565b92915050565b60006020820190508181036000830152612f628161261d565b9050919050565b60006020820190508181036000830152612f8281612683565b9050919050565b60006020820190508181036000830152612fa2816126e9565b9050919050565b60006020820190508181036000830152612fc28161274f565b9050919050565b60006020820190508181036000830152612fe28161278f565b9050919050565b60006020820190508181036000830152613002816127f5565b9050919050565b6000602082019050818103600083015261302281612835565b9050919050565b600060208201905081810360008301526130428161289b565b9050919050565b6000602082019050818103600083015261306281612901565b9050919050565b6000602082019050818103600083015261308281612967565b9050919050565b600060208201905081810360008301526130a2816129cd565b9050919050565b600060208201905081810360008301526130c281612a33565b9050919050565b600060208201905081810360008301526130e281612a99565b9050919050565b6000602082019050818103600083015261310281612aff565b9050919050565b6000602082019050818103600083015261312281612b3f565b9050919050565b6000602082019050818103600083015261314281612ba5565b9050919050565b6000602082019050818103600083015261316281612be5565b9050919050565b6000602082019050818103600083015261318281612c25565b9050919050565b600060208201905081810360008301526131a281612c65565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156131cc57600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000808585111561320d57600080fd5b8386111561321a57600080fd5b6001850283019150848603905094509492505050565b600061323b82613296565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061328f82613230565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006132d882613303565b9050919050565b60006132ea826132f1565b9050919050565b60006132fc82613296565b9050919050565b600061330e82613315565b9050919050565b600061332082613296565b9050919050565b60005b8381101561334557808201518184015260208101905061332a565b83811115613354576000848401525b50505050565b6000819050919050565b61336d81613230565b811461337857600080fd5b50565b6133848161324e565b811461338f57600080fd5b50565b61339b81613258565b81146133a657600080fd5b50565b6133b281613284565b81146133bd57600080fd5b5056fea164736f6c634300060c000a",
  "devdoc": {
    "author": "Stanisław Głogowski <stan@pillarproject.io>",
    "details": "The process of adding root node consists of 3 steps: 1. `submitNode` - should be called from ENS node owner, 2. Change ENS node owner in ENS registry to ENS controller, 3. `verifyNode` - should be called from previous ENS node owner, To register sub node, `msg.sender` need to send valid signature from one of guardian key. Once registration is complete `msg.sender` becoming both node owner and `addr` record value. After registration sub node cannot be replaced.",
    "events": {
      "AddrChanged(bytes32,address)": {
        "details": "Emitted when the address field in node resolver is changed",
        "params": {
          "addr": "new address",
          "node": "node name hash"
        }
      },
      "NodeReleased(bytes32,address)": {
        "details": "Emitted when new node is released",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeSubmitted(bytes32,address)": {
        "details": "Emitted when new node is submitted",
        "params": {
          "node": "node name hash",
          "owner": "owner address"
        }
      },
      "NodeVerified(bytes32)": {
        "details": "Emitted when the existing owner is verified",
        "params": {
          "node": "node name hash"
        }
      },
      "RegistryChanged(address)": {
        "details": "Emitted when ENS registry address is changed",
        "params": {
          "registry": "registry address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "addr(bytes32)": {
        "details": "Used in address resolver",
        "params": {
          "node": "node name hash"
        }
      },
      "constructor": {
        "details": "Public constructor"
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "params": {
          "subNodeRegistration": "struct"
        },
        "returns": {
          "_0": "hash"
        }
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "params": {
          "gateway_": "gateway address",
          "registry_": "ENS registry address",
          "typedDataDomainNameHash": "hash of a typed data domain name",
          "typedDataDomainSalt": "typed data salt",
          "typedDataDomainVersionHash": "hash of a typed data domain version"
        }
      },
      "isGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        },
        "returns": {
          "_0": "true when guardian exists"
        }
      },
      "isInitialized()": {
        "returns": {
          "_0": "true when contract is initialized"
        }
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "params": {
          "guardianSignature": "guardian signature",
          "label": "label hash",
          "node": "node name hash"
        }
      },
      "releaseNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "removeGuardian(address)": {
        "params": {
          "guardian": "guardian address"
        }
      },
      "setAddr(bytes32,address)": {
        "details": "Used in address resolver",
        "params": {
          "addr": "address",
          "node": "node name hash"
        }
      },
      "setRegistry(address)": {
        "params": {
          "registry_": "registry address"
        }
      },
      "submitNode(bytes32)": {
        "details": "Should be called from the current ENS node owner",
        "params": {
          "node": "node name hash"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceID": "method signature"
        },
        "returns": {
          "_0": "true when contract supports interface"
        }
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "params": {
          "messageHash": "message hash",
          "signature": "signature"
        },
        "returns": {
          "_0": "true on correct guardian signature"
        }
      },
      "verifyNode(bytes32)": {
        "details": "Should be called from the previous ENS node owner",
        "params": {
          "node": "node name hash"
        }
      }
    },
    "title": "ENS controller",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGuardian(address)": {
        "notice": "Adds a new guardian"
      },
      "addr(bytes32)": {
        "notice": "Gets address"
      },
      "hashSubNodeRegistration((address,bytes32,bytes32))": {
        "notice": "Hashes `SubNodeRegistration` typed data"
      },
      "initialize(address,address[],address,bytes32,bytes32,bytes32)": {
        "notice": "Initializes `ENSController` contract"
      },
      "isGuardian(address)": {
        "notice": "Check if guardian exists"
      },
      "isInitialized()": {
        "notice": "Check if contract is initialized"
      },
      "registerSubNode(bytes32,bytes32,bytes)": {
        "notice": "Registers sub node"
      },
      "releaseNode(bytes32)": {
        "notice": "Releases node"
      },
      "removeGuardian(address)": {
        "notice": "Removes existing guardian"
      },
      "setAddr(bytes32,address)": {
        "notice": "Sets address"
      },
      "setRegistry(address)": {
        "notice": "Sets registry"
      },
      "submitNode(bytes32)": {
        "notice": "Submits node"
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if contract supports interface"
      },
      "verifyGuardianSignature(bytes32,bytes)": {
        "notice": "Verifies guardian signature"
      },
      "verifyNode(bytes32)": {
        "notice": "Verifies node"
      }
    },
    "notice": "ENS subnode registrar",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "guardians",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 824,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "initializer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1252,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "typedDataDomainSeparator",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3074,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "gateway",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1344,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ENSRegistry)2102"
      },
      {
        "astId": 1348,
        "contract": "src/ens/ENSController.sol:ENSController",
        "label": "nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Node)1330_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSRegistry)2102": {
        "encoding": "inplace",
        "label": "contract ENSRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Node)1330_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ENSController.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)1330_storage"
      },
      "t_struct(Node)1330_storage": {
        "encoding": "inplace",
        "label": "struct ENSController.Node",
        "members": [
          {
            "astId": 1327,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1329,
            "contract": "src/ens/ENSController.sol:ENSController",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}