// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.7;

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";

import "../interfaces/IDeBridgeTokenDeployer.sol";
import "../periphery/DeBridgeToken.sol";
import "../periphery/DeBridgeTokenProxy.sol";

/// @dev Deploys a deToken(DeBridgeTokenProxy) for an asset.
contract DeBridgeTokenDeployer is
    Initializable,
    AccessControlUpgradeable,
    IDeBridgeTokenDeployer
{

    /* ========== STATE VARIABLES ========== */

    /// @dev Address of deBridgeToken implementation
    address public tokenImplementation;
    /// @dev An addres to set as admin for any deployed deBridgeToken
    address public deBridgeTokenAdmin;
    /// @dev Debridge gate address
    address public debridgeAddress;
    /// @dev Maps debridge id to deBridgeToken address
    mapping(bytes32 => address) public getDeployedAssetAddress;
    /// @dev Maps debridge id to overridden token info (name, symbol). Used when autogenerated
    /// values for a token are not ideal.
    mapping(bytes32 => OverridedTokenInfo) public overridedTokens;

    /* ========== STRUCTS ========== */

    struct OverridedTokenInfo {
        bool accept;
        string name;
        string symbol;
    }

    /* ========== ERRORS ========== */

    error WrongArgument();
    error DeployedAlready();

    error AdminBadRole();
    error DeBridgeGateBadRole();


    /* ========== MODIFIERS ========== */

    modifier onlyAdmin() {
        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();
        _;
    }

    modifier onlyDeBridgeGate() {
        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();
        _;
    }


    /* ========== CONSTRUCTOR  ========== */

    /// @dev Constructor that initializes the most important configurations.
    /// @param _tokenImplementation Address of deBridgeToken implementation
    /// @param _deBridgeTokenAdmin Address to set as admin for any deployed deBridgeToken
    /// @param _debridgeAddress DeBridge gate address
    function initialize(
        address _tokenImplementation,
        address _deBridgeTokenAdmin,
        address _debridgeAddress
    ) public initializer {
        tokenImplementation = _tokenImplementation;
        deBridgeTokenAdmin = _deBridgeTokenAdmin;
        debridgeAddress = _debridgeAddress;

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }

    /// @dev Deploy a deToken for an asset
    /// @param _debridgeId Asset identifier
    /// @param _name Asset name
    /// @param _symbol Asset symbol
    /// @param _decimals Asset decimals
    function deployAsset(
        bytes32 _debridgeId,
        string memory _name,
        string memory _symbol,
        uint8 _decimals)
        external
        override
        onlyDeBridgeGate
        returns (address deBridgeTokenAddress)
    {
        if (getDeployedAssetAddress[_debridgeId] != address(0)) revert DeployedAlready();

        OverridedTokenInfo memory overridedToken = overridedTokens[_debridgeId];
        if (overridedToken.accept) {
            _name = overridedToken.name;
            _symbol = overridedToken.symbol;
        }

        address[] memory minters = new address[](1);
        minters[0] = debridgeAddress;

        // Initialize args
        bytes memory initialisationArgs = abi.encodeWithSelector(
            DeBridgeToken.initialize.selector,
            _name,
            _symbol,
            _decimals,
            deBridgeTokenAdmin,
            minters
        );

        // initialize Proxy
        bytes memory constructorArgs = abi.encode(address(this), initialisationArgs);

        // deployment code
        bytes memory bytecode = abi.encodePacked(type(DeBridgeTokenProxy).creationCode, constructorArgs);

        assembly {
            // debridgeId is a salt
            deBridgeTokenAddress := create2(0, add(bytecode, 0x20), mload(bytecode), _debridgeId)

            if iszero(extcodesize(deBridgeTokenAddress)) {
                revert(0, 0)
            }
        }

        getDeployedAssetAddress[_debridgeId] = deBridgeTokenAddress;
        emit DeBridgeTokenDeployed(
            deBridgeTokenAddress,
            _name,
            _symbol,
            _decimals
        );
    }

    /// @dev Beacon getter for the deBridgeToken contracts
    function implementation() public view returns (address) {
        return tokenImplementation;
    }


    /* ========== ADMIN ========== */

    /// @dev Set deBridgeToken implementation contract address
    /// @param _impl Wrapped asset implementation contract address.
    function setTokenImplementation(address _impl) external onlyAdmin {
        if (_impl == address(0)) revert WrongArgument();
        tokenImplementation = _impl;
    }

    /// @dev Set admin for any deployed deBridgeToken.
    /// @param _deBridgeTokenAdmin Admin address.
    function setDeBridgeTokenAdmin(address _deBridgeTokenAdmin) external onlyAdmin {
        if (_deBridgeTokenAdmin == address(0)) revert WrongArgument();
        deBridgeTokenAdmin = _deBridgeTokenAdmin;
    }

    /// @dev Sets core debridge contract address.
    /// @param _debridgeAddress Debridge address.
    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {
        if (_debridgeAddress == address(0)) revert WrongArgument();
        debridgeAddress = _debridgeAddress;
    }

    /// @dev Override specific tokens name/symbol
    /// @param _debridgeIds Array of debridgeIds for tokens
    /// @param _tokens Array of new name/symbols for tokens
    function setOverridedTokenInfo (
        bytes32[] memory _debridgeIds,
        OverridedTokenInfo[] memory _tokens
    ) external onlyAdmin {
        if (_debridgeIds.length != _tokens.length) revert WrongArgument();
        for (uint256 i = 0; i < _debridgeIds.length; i++) {
            overridedTokens[_debridgeIds[i]] = _tokens[i];
        }
    }

    // ============ Version Control ============
    /// @dev Get this contract's version
    function version() external pure returns (uint256) {
        return 110; // 1.1.0
    }
}
