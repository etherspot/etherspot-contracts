/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ICallProxyInterface extends utils.Interface {
  functions: {
    "call(address,address,bytes,uint256,bytes,uint256)": FunctionFragment;
    "callERC20(address,address,address,bytes,uint256,bytes,uint256)": FunctionFragment;
    "submissionChainIdFrom()": FunctionFragment;
    "submissionNativeSender()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "call",
    values: [string, string, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callERC20",
    values: [
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionChainIdFrom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissionNativeSender",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submissionChainIdFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionNativeSender",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICallProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICallProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    call(
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callERC20(
      _token: string,
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submissionChainIdFrom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submissionNativeSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  call(
    _reserveAddress: string,
    _receiver: string,
    _data: BytesLike,
    _flags: BigNumberish,
    _nativeSender: BytesLike,
    _chainIdFrom: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callERC20(
    _token: string,
    _reserveAddress: string,
    _receiver: string,
    _data: BytesLike,
    _flags: BigNumberish,
    _nativeSender: BytesLike,
    _chainIdFrom: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submissionChainIdFrom(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submissionNativeSender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    call(
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    callERC20(
      _token: string,
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    submissionChainIdFrom(overrides?: CallOverrides): Promise<BigNumber>;

    submissionNativeSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    call(
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callERC20(
      _token: string,
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submissionChainIdFrom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submissionNativeSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    call(
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callERC20(
      _token: string,
      _reserveAddress: string,
      _receiver: string,
      _data: BytesLike,
      _flags: BigNumberish,
      _nativeSender: BytesLike,
      _chainIdFrom: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submissionChainIdFrom(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submissionNativeSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
