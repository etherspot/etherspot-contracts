/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IOraclesManagerInterface extends utils.Interface {
  functions: {};

  events: {
    "AddOracle(address,bool)": EventFragment;
    "DeployApproved(bytes32)": EventFragment;
    "SubmissionApproved(bytes32)": EventFragment;
    "UpdateOracle(address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmissionApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOracle"): EventFragment;
}

export type AddOracleEvent = TypedEvent<
  [string, boolean],
  { oracle: string; required: boolean }
>;

export type AddOracleEventFilter = TypedEventFilter<AddOracleEvent>;

export type DeployApprovedEvent = TypedEvent<[string], { deployId: string }>;

export type DeployApprovedEventFilter = TypedEventFilter<DeployApprovedEvent>;

export type SubmissionApprovedEvent = TypedEvent<
  [string],
  { submissionId: string }
>;

export type SubmissionApprovedEventFilter =
  TypedEventFilter<SubmissionApprovedEvent>;

export type UpdateOracleEvent = TypedEvent<
  [string, boolean, boolean],
  { oracle: string; required: boolean; isValid: boolean }
>;

export type UpdateOracleEventFilter = TypedEventFilter<UpdateOracleEvent>;

export interface IOraclesManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOraclesManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AddOracle(address,bool)"(
      oracle?: null,
      required?: null
    ): AddOracleEventFilter;
    AddOracle(oracle?: null, required?: null): AddOracleEventFilter;

    "DeployApproved(bytes32)"(deployId?: null): DeployApprovedEventFilter;
    DeployApproved(deployId?: null): DeployApprovedEventFilter;

    "SubmissionApproved(bytes32)"(
      submissionId?: null
    ): SubmissionApprovedEventFilter;
    SubmissionApproved(submissionId?: null): SubmissionApprovedEventFilter;

    "UpdateOracle(address,bool,bool)"(
      oracle?: null,
      required?: null,
      isValid?: null
    ): UpdateOracleEventFilter;
    UpdateOracle(
      oracle?: null,
      required?: null,
      isValid?: null
    ): UpdateOracleEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
