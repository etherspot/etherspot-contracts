/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ChainSupportInfoStruct = {
  fixedNativeFee: BigNumberish;
  isSupported: boolean;
  transferFeeBps: BigNumberish;
};

export type ChainSupportInfoStructOutput = [BigNumber, boolean, number] & {
  fixedNativeFee: BigNumber;
  isSupported: boolean;
  transferFeeBps: number;
};

export type FeeParamsStruct = {
  receivedAmount: BigNumberish;
  fixFee: BigNumberish;
  transferFee: BigNumberish;
  useAssetFee: boolean;
  isNativeToken: boolean;
};

export type FeeParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  receivedAmount: BigNumber;
  fixFee: BigNumber;
  transferFee: BigNumber;
  useAssetFee: boolean;
  isNativeToken: boolean;
};

export type SubmissionAutoParamsFromStruct = {
  executionFee: BigNumberish;
  flags: BigNumberish;
  fallbackAddress: string;
  data: BytesLike;
  nativeSender: BytesLike;
};

export type SubmissionAutoParamsFromStructOutput = [
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  executionFee: BigNumber;
  flags: BigNumber;
  fallbackAddress: string;
  data: string;
  nativeSender: string;
};

export interface DeBridgeGateInterface extends utils.Interface {
  functions: {
    "BPS_DENOMINATOR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEPLOY_PREFIX()": FunctionFragment;
    "GOVMONITORING_ROLE()": FunctionFragment;
    "SUBMISSION_PREFIX()": FunctionFragment;
    "autoUpdateFixedNativeFee(uint256)": FunctionFragment;
    "blockSubmission(bytes32[],bool)": FunctionFragment;
    "callProxy()": FunctionFragment;
    "claim(bytes32,uint256,uint256,address,uint256,bytes,bytes)": FunctionFragment;
    "deBridgeTokenDeployer()": FunctionFragment;
    "defiController()": FunctionFragment;
    "deployNewAsset(bytes,uint256,string,string,uint8,bytes)": FunctionFragment;
    "excessConfirmations()": FunctionFragment;
    "feeContractUpdater()": FunctionFragment;
    "feeDiscount(address)": FunctionFragment;
    "feeProxy()": FunctionFragment;
    "flash(address,address,uint256,bytes)": FunctionFragment;
    "flashFeeBps()": FunctionFragment;
    "getAmountThreshold(bytes32)": FunctionFragment;
    "getChainFromConfig(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getChainToConfig(uint256)": FunctionFragment;
    "getDebridge(bytes32)": FunctionFragment;
    "getDebridgeChainAssetFixedFee(bytes32,uint256)": FunctionFragment;
    "getDebridgeFeeInfo(bytes32)": FunctionFragment;
    "getDebridgeId(uint256,address)": FunctionFragment;
    "getDefiAvaliableReserves(address)": FunctionFragment;
    "getDeployId(bytes32,string,string,uint8)": FunctionFragment;
    "getNativeInfo(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSubmissionIdFrom(bytes32,uint256,uint256,address,uint256,(uint256,uint256,address,bytes,bytes),bool,address)": FunctionFragment;
    "getbDebridgeId(uint256,bytes)": FunctionFragment;
    "globalFixedNativeFee()": FunctionFragment;
    "globalTransferFeeBps()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint8,address)": FunctionFragment;
    "isBlockedSubmission(bytes32)": FunctionFragment;
    "isSubmissionUsed(bytes32)": FunctionFragment;
    "lockedClaim()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestReserves(address,uint256)": FunctionFragment;
    "returnReserves(address,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "send(address,uint256,uint256,bytes,bytes,bool,uint32,bytes)": FunctionFragment;
    "setCallProxy(address)": FunctionFragment;
    "setChainSupport(uint256,bool,bool)": FunctionFragment;
    "setDeBridgeTokenDeployer(address)": FunctionFragment;
    "setDefiController(address)": FunctionFragment;
    "setFeeContractUpdater(address)": FunctionFragment;
    "setFeeProxy(address)": FunctionFragment;
    "setSignatureVerifier(address)": FunctionFragment;
    "setWethGate(address)": FunctionFragment;
    "signatureVerifier()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAsset(bytes32,uint256,uint16,uint256)": FunctionFragment;
    "updateAssetFixedFees(bytes32,uint256[],uint256[])": FunctionFragment;
    "updateChainSupport(uint256[],(uint256,bool,uint16)[],bool)": FunctionFragment;
    "updateExcessConfirmations(uint8)": FunctionFragment;
    "updateFeeDiscount(address,uint16,uint16)": FunctionFragment;
    "updateFlashFee(uint256)": FunctionFragment;
    "updateGlobalFee(uint256,uint16)": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "wethGate()": FunctionFragment;
    "withdrawFee(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPLOY_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVMONITORING_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoUpdateFixedNativeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockSubmission",
    values: [BytesLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "callProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deBridgeTokenDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defiController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewAsset",
    values: [BytesLike, BigNumberish, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "excessConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeContractUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeDiscount", values: [string]): string;
  encodeFunctionData(functionFragment: "feeProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountThreshold",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainFromConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainToConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridge",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeChainAssetFixedFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeFeeInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeId",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiAvaliableReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployId",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionIdFrom",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      SubmissionAutoParamsFromStruct,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getbDebridgeId",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFixedNativeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalTransferFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockedSubmission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedClaim",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainSupport",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeBridgeTokenDeployer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefiController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeContractUpdater",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSignatureVerifier",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setWethGate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "signatureVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAsset",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetFixedFees",
    values: [BytesLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainSupport",
    values: [BigNumberish[], ChainSupportInfoStruct[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExcessConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeDiscount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "wethGate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPLOY_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVMONITORING_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoUpdateFixedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deBridgeTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeContractUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainFromConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainToConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeChainAssetFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiAvaliableReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionIdFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getbDebridgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFixedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalTransferFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlockedSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeBridgeTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefiController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeContractUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetFixedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExcessConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethGate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AutoRequestExecuted(bytes32,bool,address)": EventFragment;
    "Blocked(bytes32)": EventFragment;
    "CallProxyUpdated(address)": EventFragment;
    "ChainSupportUpdated(uint256,bool,bool)": EventFragment;
    "ChainsSupportUpdated(uint256,tuple,bool)": EventFragment;
    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)": EventFragment;
    "FixedNativeFeeAutoUpdated(uint256)": EventFragment;
    "FixedNativeFeeUpdated(uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MonitoringClaimEvent(bytes32,uint256,uint256)": EventFragment;
    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)": EventFragment;
    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)": EventFragment;
    "Unblocked(bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawnFee(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoRequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainsSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeAutoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringSendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unblocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFee"): EventFragment;
}

export type AutoRequestExecutedEvent = TypedEvent<
  [string, boolean, string],
  { submissionId: string; success: boolean; callProxy: string }
>;

export type AutoRequestExecutedEventFilter =
  TypedEventFilter<AutoRequestExecutedEvent>;

export type BlockedEvent = TypedEvent<[string], { submissionId: string }>;

export type BlockedEventFilter = TypedEventFilter<BlockedEvent>;

export type CallProxyUpdatedEvent = TypedEvent<[string], { callProxy: string }>;

export type CallProxyUpdatedEventFilter =
  TypedEventFilter<CallProxyUpdatedEvent>;

export type ChainSupportUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean],
  { chainId: BigNumber; isSupported: boolean; isChainFrom: boolean }
>;

export type ChainSupportUpdatedEventFilter =
  TypedEventFilter<ChainSupportUpdatedEvent>;

export type ChainsSupportUpdatedEvent = TypedEvent<
  [BigNumber, ChainSupportInfoStructOutput, boolean],
  {
    chainIds: BigNumber;
    chainSupportInfo: ChainSupportInfoStructOutput;
    isChainFrom: boolean;
  }
>;

export type ChainsSupportUpdatedEventFilter =
  TypedEventFilter<ChainsSupportUpdatedEvent>;

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, boolean],
  {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdFrom: BigNumber;
    autoParams: string;
    isNativeToken: boolean;
  }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type FixedNativeFeeAutoUpdatedEvent = TypedEvent<
  [BigNumber],
  { globalFixedNativeFee: BigNumber }
>;

export type FixedNativeFeeAutoUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeAutoUpdatedEvent>;

export type FixedNativeFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { globalFixedNativeFee: BigNumber; globalTransferFeeBps: BigNumber }
>;

export type FixedNativeFeeUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeUpdatedEvent>;

export type FlashEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    sender: string;
    tokenAddress: string;
    receiver: string;
    amount: BigNumber;
    paid: BigNumber;
  }
>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type MonitoringClaimEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    submissionId: string;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type MonitoringClaimEventEventFilter =
  TypedEventFilter<MonitoringClaimEventEvent>;

export type MonitoringSendEventEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    submissionId: string;
    nonce: BigNumber;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type MonitoringSendEventEventFilter =
  TypedEventFilter<MonitoringSendEventEvent>;

export type PairAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number],
  {
    debridgeId: string;
    tokenAddress: string;
    nativeAddress: string;
    nativeChainId: BigNumber;
    maxAmount: BigNumber;
    minReservesBps: number;
  }
>;

export type PairAddedEventFilter = TypedEventFilter<PairAddedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SentEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    FeeParamsStructOutput,
    string,
    string
  ],
  {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdTo: BigNumber;
    referralCode: number;
    feeParams: FeeParamsStructOutput;
    autoParams: string;
    nativeSender: string;
  }
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export type UnblockedEvent = TypedEvent<[string], { submissionId: string }>;

export type UnblockedEventFilter = TypedEventFilter<UnblockedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawnFeeEvent = TypedEvent<
  [string, BigNumber],
  { debridgeId: string; fee: BigNumber }
>;

export type WithdrawnFeeEventFilter = TypedEventFilter<WithdrawnFeeEvent>;

export interface DeBridgeGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeBridgeGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockSubmission(
      _submissionIds: BytesLike[],
      isBlocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callProxy(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<[string]>;

    defiController(overrides?: CallOverrides): Promise<[string]>;

    deployNewAsset(
      _nativeTokenAddress: BytesLike,
      _nativeChainId: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excessConfirmations(overrides?: CallOverrides): Promise<[number]>;

    feeContractUpdater(overrides?: CallOverrides): Promise<[string]>;

    feeDiscount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { discountFixBps: number; discountTransferBps: number }
    >;

    feeProxy(overrides?: CallOverrides): Promise<[string]>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainFromConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cid: BigNumber }>;

    getChainToConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getDebridge(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
        chainId: BigNumber;
        maxAmount: BigNumber;
        balance: BigNumber;
        lockedInStrategies: BigNumber;
        tokenAddress: string;
        minReservesBps: number;
        exist: boolean;
      }
    >;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebridgeFeeInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectedFees: BigNumber;
        withdrawnFees: BigNumber;
      }
    >;

    getDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeployId(
      _debridgeId: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNativeInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSubmissionIdFrom(
      _debridgeId: BytesLike,
      _chainIdFrom: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _autoParams: SubmissionAutoParamsFromStruct,
      _hasAutoParams: boolean,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getbDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<[number]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _excessConfirmations: BigNumberish,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBlockedSubmission(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSubmissionUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockedClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCallProxy(
      _callProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainSupport(
      _chainId: BigNumberish,
      _isSupported: boolean,
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefiController(
      _defiController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeContractUpdater(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeProxy(
      _feeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSignatureVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWethGate(
      _wethGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signatureVerifier(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAsset(
      _debridgeId: BytesLike,
      _maxAmount: BigNumberish,
      _minReservesBps: BigNumberish,
      _amountThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAssetFixedFees(
      _debridgeId: BytesLike,
      _supportedChainIds: BigNumberish[],
      _assetFeesInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateChainSupport(
      _chainIds: BigNumberish[],
      _chainSupportInfo: ChainSupportInfoStruct[],
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExcessConfirmations(
      _excessConfirmations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeDiscount(
      _address: string,
      _discountFixBps: BigNumberish,
      _discountTransferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFlashFee(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGlobalFee(
      _globalFixedNativeFee: BigNumberish,
      _globalTransferFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wethGate(overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

  GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<string>;

  SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

  autoUpdateFixedNativeFee(
    _globalFixedNativeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockSubmission(
    _submissionIds: BytesLike[],
    isBlocked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callProxy(overrides?: CallOverrides): Promise<string>;

  claim(
    _debridgeId: BytesLike,
    _amount: BigNumberish,
    _chainIdFrom: BigNumberish,
    _receiver: string,
    _nonce: BigNumberish,
    _signatures: BytesLike,
    _autoParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deBridgeTokenDeployer(overrides?: CallOverrides): Promise<string>;

  defiController(overrides?: CallOverrides): Promise<string>;

  deployNewAsset(
    _nativeTokenAddress: BytesLike,
    _nativeChainId: BigNumberish,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _signatures: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excessConfirmations(overrides?: CallOverrides): Promise<number>;

  feeContractUpdater(overrides?: CallOverrides): Promise<string>;

  feeDiscount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { discountFixBps: number; discountTransferBps: number }
  >;

  feeProxy(overrides?: CallOverrides): Promise<string>;

  flash(
    _tokenAddress: string,
    _receiver: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountThreshold(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainFromConfig(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    }
  >;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getChainToConfig(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    }
  >;

  getDebridge(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
      chainId: BigNumber;
      maxAmount: BigNumber;
      balance: BigNumber;
      lockedInStrategies: BigNumber;
      tokenAddress: string;
      minReservesBps: number;
      exist: boolean;
    }
  >;

  getDebridgeChainAssetFixedFee(
    _debridgeId: BytesLike,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebridgeFeeInfo(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collectedFees: BigNumber;
      withdrawnFees: BigNumber;
    }
  >;

  getDebridgeId(
    _chainId: BigNumberish,
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefiAvaliableReserves(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeployId(
    _debridgeId: BytesLike,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNativeInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSubmissionIdFrom(
    _debridgeId: BytesLike,
    _chainIdFrom: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    _nonce: BigNumberish,
    _autoParams: SubmissionAutoParamsFromStruct,
    _hasAutoParams: boolean,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getbDebridgeId(
    _chainId: BigNumberish,
    _tokenAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

  globalTransferFeeBps(overrides?: CallOverrides): Promise<number>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _excessConfirmations: BigNumberish,
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBlockedSubmission(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubmissionUsed(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    _tokenAddress: string,
    _amount: BigNumberish,
    _chainIdTo: BigNumberish,
    _receiver: BytesLike,
    _permit: BytesLike,
    _useAssetFee: boolean,
    _referralCode: BigNumberish,
    _autoParams: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCallProxy(
    _callProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainSupport(
    _chainId: BigNumberish,
    _isSupported: boolean,
    _isChainFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeBridgeTokenDeployer(
    _deBridgeTokenDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefiController(
    _defiController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeContractUpdater(
    _value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeProxy(
    _feeProxy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSignatureVerifier(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWethGate(
    _wethGate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signatureVerifier(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAsset(
    _debridgeId: BytesLike,
    _maxAmount: BigNumberish,
    _minReservesBps: BigNumberish,
    _amountThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAssetFixedFees(
    _debridgeId: BytesLike,
    _supportedChainIds: BigNumberish[],
    _assetFeesInfo: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateChainSupport(
    _chainIds: BigNumberish[],
    _chainSupportInfo: ChainSupportInfoStruct[],
    _isChainFrom: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExcessConfirmations(
    _excessConfirmations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeDiscount(
    _address: string,
    _discountFixBps: BigNumberish,
    _discountTransferBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFlashFee(
    _flashFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGlobalFee(
    _globalFixedNativeFee: BigNumberish,
    _globalTransferFeeBps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  wethGate(overrides?: CallOverrides): Promise<string>;

  withdrawFee(
    _debridgeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<string>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blockSubmission(
      _submissionIds: BytesLike[],
      isBlocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    callProxy(overrides?: CallOverrides): Promise<string>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<string>;

    defiController(overrides?: CallOverrides): Promise<string>;

    deployNewAsset(
      _nativeTokenAddress: BytesLike,
      _nativeChainId: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    excessConfirmations(overrides?: CallOverrides): Promise<number>;

    feeContractUpdater(overrides?: CallOverrides): Promise<string>;

    feeDiscount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { discountFixBps: number; discountTransferBps: number }
    >;

    feeProxy(overrides?: CallOverrides): Promise<string>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainFromConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainToConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getDebridge(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
        chainId: BigNumber;
        maxAmount: BigNumber;
        balance: BigNumber;
        lockedInStrategies: BigNumber;
        tokenAddress: string;
        minReservesBps: number;
        exist: boolean;
      }
    >;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeFeeInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectedFees: BigNumber;
        withdrawnFees: BigNumber;
      }
    >;

    getDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployId(
      _debridgeId: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNativeInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSubmissionIdFrom(
      _debridgeId: BytesLike,
      _chainIdFrom: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _autoParams: SubmissionAutoParamsFromStruct,
      _hasAutoParams: boolean,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getbDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<number>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _excessConfirmations: BigNumberish,
      _weth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBlockedSubmission(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubmissionUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallProxy(_callProxy: string, overrides?: CallOverrides): Promise<void>;

    setChainSupport(
      _chainId: BigNumberish,
      _isSupported: boolean,
      _isChainFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefiController(
      _defiController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeContractUpdater(
      _value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeProxy(_feeProxy: string, overrides?: CallOverrides): Promise<void>;

    setSignatureVerifier(
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWethGate(_wethGate: string, overrides?: CallOverrides): Promise<void>;

    signatureVerifier(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAsset(
      _debridgeId: BytesLike,
      _maxAmount: BigNumberish,
      _minReservesBps: BigNumberish,
      _amountThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAssetFixedFees(
      _debridgeId: BytesLike,
      _supportedChainIds: BigNumberish[],
      _assetFeesInfo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateChainSupport(
      _chainIds: BigNumberish[],
      _chainSupportInfo: ChainSupportInfoStruct[],
      _isChainFrom: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExcessConfirmations(
      _excessConfirmations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeDiscount(
      _address: string,
      _discountFixBps: BigNumberish,
      _discountTransferBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlashFee(
      _flashFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGlobalFee(
      _globalFixedNativeFee: BigNumberish,
      _globalTransferFeeBps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    wethGate(overrides?: CallOverrides): Promise<string>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutoRequestExecuted(bytes32,bool,address)"(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;
    AutoRequestExecuted(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;

    "Blocked(bytes32)"(submissionId?: null): BlockedEventFilter;
    Blocked(submissionId?: null): BlockedEventFilter;

    "CallProxyUpdated(address)"(callProxy?: null): CallProxyUpdatedEventFilter;
    CallProxyUpdated(callProxy?: null): CallProxyUpdatedEventFilter;

    "ChainSupportUpdated(uint256,bool,bool)"(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;
    ChainSupportUpdated(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;

    "ChainsSupportUpdated(uint256,tuple,bool)"(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;
    ChainsSupportUpdated(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;

    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;
    Claimed(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;

    "FixedNativeFeeAutoUpdated(uint256)"(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;
    FixedNativeFeeAutoUpdated(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;

    "FixedNativeFeeUpdated(uint256,uint256)"(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;
    FixedNativeFeeUpdated(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;

    "Flash(address,address,address,uint256,uint256)"(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;
    Flash(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MonitoringClaimEvent(bytes32,uint256,uint256)"(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;
    MonitoringClaimEvent(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;

    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)"(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;
    MonitoringSendEvent(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;

    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)"(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;
    PairAdded(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;
    Sent(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;

    "Unblocked(bytes32)"(submissionId?: null): UnblockedEventFilter;
    Unblocked(submissionId?: null): UnblockedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawnFee(bytes32,uint256)"(
      debridgeId?: null,
      fee?: null
    ): WithdrawnFeeEventFilter;
    WithdrawnFee(debridgeId?: null, fee?: null): WithdrawnFeeEventFilter;
  };

  estimateGas: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockSubmission(
      _submissionIds: BytesLike[],
      isBlocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callProxy(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    defiController(overrides?: CallOverrides): Promise<BigNumber>;

    deployNewAsset(
      _nativeTokenAddress: BytesLike,
      _nativeChainId: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excessConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    feeContractUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    feeDiscount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainFromConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainToConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridge(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeFeeInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployId(
      _debridgeId: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionIdFrom(
      _debridgeId: BytesLike,
      _chainIdFrom: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _autoParams: SubmissionAutoParamsFromStruct,
      _hasAutoParams: boolean,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getbDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _excessConfirmations: BigNumberish,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBlockedSubmission(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubmissionUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCallProxy(
      _callProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainSupport(
      _chainId: BigNumberish,
      _isSupported: boolean,
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefiController(
      _defiController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeContractUpdater(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeProxy(
      _feeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSignatureVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWethGate(
      _wethGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signatureVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAsset(
      _debridgeId: BytesLike,
      _maxAmount: BigNumberish,
      _minReservesBps: BigNumberish,
      _amountThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAssetFixedFees(
      _debridgeId: BytesLike,
      _supportedChainIds: BigNumberish[],
      _assetFeesInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateChainSupport(
      _chainIds: BigNumberish[],
      _chainSupportInfo: ChainSupportInfoStruct[],
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExcessConfirmations(
      _excessConfirmations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeDiscount(
      _address: string,
      _discountFixBps: BigNumberish,
      _discountTransferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFlashFee(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGlobalFee(
      _globalFixedNativeFee: BigNumberish,
      _globalTransferFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wethGate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVMONITORING_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockSubmission(
      _submissionIds: BytesLike[],
      isBlocked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deBridgeTokenDeployer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defiController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployNewAsset(
      _nativeTokenAddress: BytesLike,
      _nativeChainId: BigNumberish,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _signatures: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excessConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeContractUpdater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDiscount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountThreshold(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainFromConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainToConfig(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridge(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeFeeInfo(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployId(
      _debridgeId: BytesLike,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionIdFrom(
      _debridgeId: BytesLike,
      _chainIdFrom: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _autoParams: SubmissionAutoParamsFromStruct,
      _hasAutoParams: boolean,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getbDebridgeId(
      _chainId: BigNumberish,
      _tokenAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalFixedNativeFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalTransferFeeBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _excessConfirmations: BigNumberish,
      _weth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBlockedSubmission(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubmissionUsed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCallProxy(
      _callProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainSupport(
      _chainId: BigNumberish,
      _isSupported: boolean,
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefiController(
      _defiController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeContractUpdater(
      _value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeProxy(
      _feeProxy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSignatureVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWethGate(
      _wethGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signatureVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _debridgeId: BytesLike,
      _maxAmount: BigNumberish,
      _minReservesBps: BigNumberish,
      _amountThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAssetFixedFees(
      _debridgeId: BytesLike,
      _supportedChainIds: BigNumberish[],
      _assetFeesInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateChainSupport(
      _chainIds: BigNumberish[],
      _chainSupportInfo: ChainSupportInfoStruct[],
      _isChainFrom: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExcessConfirmations(
      _excessConfirmations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeDiscount(
      _address: string,
      _discountFixBps: BigNumberish,
      _discountTransferBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashFee(
      _flashFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGlobalFee(
      _globalFixedNativeFee: BigNumberish,
      _globalTransferFeeBps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethGate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
