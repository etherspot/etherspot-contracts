/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ENSPubKeyResolverInterface extends ethers.utils.Interface {
  functions: {
    "pubkey(bytes32)": FunctionFragment;
    "setPubkey(bytes32,bytes32,bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "pubkey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setPubkey",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "pubkey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPubkey", data: BytesLike): Result;

  events: {
    "PubkeyChanged(bytes32,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PubkeyChanged"): EventFragment;
}

export class ENSPubKeyResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ENSPubKeyResolverInterface;

  functions: {
    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    "pubkey(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  pubkey(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { x: string; y: string }>;

  "pubkey(bytes32)"(
    node: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { x: string; y: string }>;

  setPubkey(
    node: BytesLike,
    x: BytesLike,
    y: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPubkey(bytes32,bytes32,bytes32)"(
    node: BytesLike,
    x: BytesLike,
    y: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    "pubkey(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { x: string; y: string }>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PubkeyChanged(node: BytesLike | null, x: null, y: null): EventFilter;
  };

  estimateGas: {
    pubkey(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "pubkey(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    pubkey(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pubkey(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPubkey(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPubkey(bytes32,bytes32,bytes32)"(
      node: BytesLike,
      x: BytesLike,
      y: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
