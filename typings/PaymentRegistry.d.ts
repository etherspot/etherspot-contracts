/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PaymentRegistryInterface extends ethers.utils.Interface {
  functions: {
    "accountOwnerRegistry()": FunctionFragment;
    "accountProofRegistry()": FunctionFragment;
    "addGuardian(address)": FunctionFragment;
    "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)": FunctionFragment;
    "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)": FunctionFragment;
    "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)": FunctionFragment;
    "computeDepositAccountAddress(address)": FunctionFragment;
    "computePaymentChannelHash(address,address,address,bytes32)": FunctionFragment;
    "deployDepositAccount(address)": FunctionFragment;
    "depositWithdrawalLockPeriod()": FunctionFragment;
    "gateway()": FunctionFragment;
    "getDepositWithdrawalLockedUntil(address,address)": FunctionFragment;
    "getPaymentChannelCommittedAmount(bytes32)": FunctionFragment;
    "hashPaymentChannelCommit(tuple)": FunctionFragment;
    "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)": FunctionFragment;
    "isDepositAccountDeployed(address)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "personalAccountRegistry()": FunctionFragment;
    "removeGuardian(address)": FunctionFragment;
    "typedDataDomainSeparator()": FunctionFragment;
    "verifyGuardianSignature(bytes32,bytes)": FunctionFragment;
    "withdrawDeposit(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountOwnerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountProofRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "commitPaymentChannelAndDeposit",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitPaymentChannelAndSplit",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitPaymentChannelAndWithdraw",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeDepositAccountAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "computePaymentChannelHash",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployDepositAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithdrawalLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDepositWithdrawalLockedUntil",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentChannelCommittedAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashPaymentChannelCommit",
    values: [
      {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string[],
      string,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositAccountDeployed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "personalAccountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "typedDataDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyGuardianSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDeposit",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountOwnerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountProofRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPaymentChannelAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPaymentChannelAndSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPaymentChannelAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeDepositAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePaymentChannelHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployDepositAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWithdrawalLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositWithdrawalLockedUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentChannelCommittedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashPaymentChannelCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositAccountDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personalAccountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typedDataDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyGuardianSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDeposit",
    data: BytesLike
  ): Result;

  events: {
    "DepositAccountDeployed(address,address)": EventFragment;
    "DepositWithdrawalRejected(address,address,address)": EventFragment;
    "DepositWithdrawalRequested(address,address,address,uint256)": EventFragment;
    "DepositWithdrawn(address,address,address,uint256)": EventFragment;
    "GuardianAdded(address)": EventFragment;
    "GuardianRemoved(address)": EventFragment;
    "Initialized()": EventFragment;
    "PaymentChannelCommitted(bytes32,address,address,address,bytes32,uint256)": EventFragment;
    "PaymentDeposited(bytes32,uint256)": EventFragment;
    "PaymentSplit(bytes32,uint256,uint256)": EventFragment;
    "PaymentWithdrawn(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositAccountDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWithdrawalRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWithdrawalRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentChannelCommitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentWithdrawn"): EventFragment;
}

export class PaymentRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PaymentRegistryInterface;

  functions: {
    accountOwnerRegistry(overrides?: CallOverrides): Promise<[string]>;

    "accountOwnerRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    accountProofRegistry(overrides?: CallOverrides): Promise<[string]>;

    "accountProofRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    addGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitPaymentChannelAndDeposit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitPaymentChannelAndSplit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitPaymentChannelAndWithdraw(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    computeDepositAccountAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "computeDepositAccountAddress(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    computePaymentChannelHash(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "computePaymentChannelHash(address,address,address,bytes32)"(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployDepositAccount(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployDepositAccount(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWithdrawalLockPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "depositWithdrawalLockPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    "gateway()"(overrides?: CallOverrides): Promise<[string]>;

    getDepositWithdrawalLockedUntil(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDepositWithdrawalLockedUntil(address,address)"(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPaymentChannelCommittedAmount(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPaymentChannelCommittedAmount(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashPaymentChannelCommit(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "hashPaymentChannelCommit(tuple)"(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)"(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isDepositAccountDeployed(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDepositAccountDeployed(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    personalAccountRegistry(overrides?: CallOverrides): Promise<[string]>;

    "personalAccountRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    removeGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawDeposit(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawDeposit(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountOwnerRegistry(overrides?: CallOverrides): Promise<string>;

  "accountOwnerRegistry()"(overrides?: CallOverrides): Promise<string>;

  accountProofRegistry(overrides?: CallOverrides): Promise<string>;

  "accountProofRegistry()"(overrides?: CallOverrides): Promise<string>;

  addGuardian(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addGuardian(address)"(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitPaymentChannelAndDeposit(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)"(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitPaymentChannelAndSplit(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    depositPaymentValue: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)"(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    depositPaymentValue: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitPaymentChannelAndWithdraw(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)"(
    sender: string,
    token: string,
    uid: BytesLike,
    blockNumber: BigNumberish,
    amount: BigNumberish,
    senderSignature: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  computeDepositAccountAddress(
    owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "computeDepositAccountAddress(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<string>;

  computePaymentChannelHash(
    sender: string,
    recipient: string,
    token: string,
    uid: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "computePaymentChannelHash(address,address,address,bytes32)"(
    sender: string,
    recipient: string,
    token: string,
    uid: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  deployDepositAccount(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployDepositAccount(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWithdrawalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "depositWithdrawalLockPeriod()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gateway(overrides?: CallOverrides): Promise<string>;

  "gateway()"(overrides?: CallOverrides): Promise<string>;

  getDepositWithdrawalLockedUntil(
    owner: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDepositWithdrawalLockedUntil(address,address)"(
    owner: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentChannelCommittedAmount(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPaymentChannelCommittedAmount(bytes32)"(
    hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashPaymentChannelCommit(
    paymentChannelCommit: {
      sender: string;
      recipient: string;
      token: string;
      uid: BytesLike;
      blockNumber: BigNumberish;
      amount: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "hashPaymentChannelCommit(tuple)"(
    paymentChannelCommit: {
      sender: string;
      recipient: string;
      token: string;
      uid: BytesLike;
      blockNumber: BigNumberish;
      amount: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    accountOwnerRegistry_: string,
    accountProofRegistry_: string,
    personalAccountRegistry_: string,
    depositWithdrawalLockPeriod_: BigNumberish,
    guardians_: string[],
    gateway_: string,
    typedDataDomainNameHash: BytesLike,
    typedDataDomainVersionHash: BytesLike,
    typedDataDomainSalt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)"(
    accountOwnerRegistry_: string,
    accountProofRegistry_: string,
    personalAccountRegistry_: string,
    depositWithdrawalLockPeriod_: BigNumberish,
    guardians_: string[],
    gateway_: string,
    typedDataDomainNameHash: BytesLike,
    typedDataDomainVersionHash: BytesLike,
    typedDataDomainSalt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isDepositAccountDeployed(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDepositAccountDeployed(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGuardian(guardian: string, overrides?: CallOverrides): Promise<boolean>;

  "isGuardian(address)"(
    guardian: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  personalAccountRegistry(overrides?: CallOverrides): Promise<string>;

  "personalAccountRegistry()"(overrides?: CallOverrides): Promise<string>;

  removeGuardian(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeGuardian(address)"(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  typedDataDomainSeparator(overrides?: CallOverrides): Promise<string>;

  "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

  verifyGuardianSignature(
    messageHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyGuardianSignature(bytes32,bytes)"(
    messageHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawDeposit(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawDeposit(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountOwnerRegistry(overrides?: CallOverrides): Promise<string>;

    "accountOwnerRegistry()"(overrides?: CallOverrides): Promise<string>;

    accountProofRegistry(overrides?: CallOverrides): Promise<string>;

    "accountProofRegistry()"(overrides?: CallOverrides): Promise<string>;

    addGuardian(guardian: string, overrides?: CallOverrides): Promise<void>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commitPaymentChannelAndDeposit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitPaymentChannelAndSplit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitPaymentChannelAndWithdraw(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    computeDepositAccountAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "computeDepositAccountAddress(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    computePaymentChannelHash(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "computePaymentChannelHash(address,address,address,bytes32)"(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deployDepositAccount(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployDepositAccount(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithdrawalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "depositWithdrawalLockPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<string>;

    "gateway()"(overrides?: CallOverrides): Promise<string>;

    getDepositWithdrawalLockedUntil(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositWithdrawalLockedUntil(address,address)"(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentChannelCommittedAmount(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPaymentChannelCommittedAmount(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashPaymentChannelCommit(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hashPaymentChannelCommit(tuple)"(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)"(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isDepositAccountDeployed(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDepositAccountDeployed(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<boolean>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    personalAccountRegistry(overrides?: CallOverrides): Promise<string>;

    "personalAccountRegistry()"(overrides?: CallOverrides): Promise<string>;

    removeGuardian(guardian: string, overrides?: CallOverrides): Promise<void>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<string>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawDeposit(token: string, overrides?: CallOverrides): Promise<void>;

    "withdrawDeposit(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DepositAccountDeployed(depositAccount: null, owner: null): EventFilter;

    DepositWithdrawalRejected(
      depositAccount: null,
      owner: null,
      token: null
    ): EventFilter;

    DepositWithdrawalRequested(
      depositAccount: null,
      owner: null,
      token: null,
      lockedUntil: null
    ): EventFilter;

    DepositWithdrawn(
      depositAccount: null,
      owner: null,
      token: null,
      amount: null
    ): EventFilter;

    GuardianAdded(guardian: null): EventFilter;

    GuardianRemoved(guardian: null): EventFilter;

    Initialized(): EventFilter;

    PaymentChannelCommitted(
      hash: null,
      sender: null,
      recipient: null,
      token: null,
      uid: null,
      amount: null
    ): EventFilter;

    PaymentDeposited(channelHash: null, value: null): EventFilter;

    PaymentSplit(
      channelHash: null,
      totalValue: null,
      depositValue: null
    ): EventFilter;

    PaymentWithdrawn(channelHash: null, value: null): EventFilter;
  };

  estimateGas: {
    accountOwnerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountOwnerRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountProofRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountProofRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    addGuardian(guardian: string, overrides?: Overrides): Promise<BigNumber>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitPaymentChannelAndDeposit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitPaymentChannelAndSplit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitPaymentChannelAndWithdraw(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    computeDepositAccountAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeDepositAccountAddress(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePaymentChannelHash(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computePaymentChannelHash(address,address,address,bytes32)"(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployDepositAccount(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployDepositAccount(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWithdrawalLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "depositWithdrawalLockPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    "gateway()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDepositWithdrawalLockedUntil(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDepositWithdrawalLockedUntil(address,address)"(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentChannelCommittedAmount(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPaymentChannelCommittedAmount(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashPaymentChannelCommit(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashPaymentChannelCommit(tuple)"(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)"(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isDepositAccountDeployed(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDepositAccountDeployed(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    personalAccountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "personalAccountRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeGuardian(guardian: string, overrides?: Overrides): Promise<BigNumber>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawDeposit(token: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawDeposit(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountOwnerRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountOwnerRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountProofRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountProofRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitPaymentChannelAndDeposit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitPaymentChannelAndDeposit(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitPaymentChannelAndSplit(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitPaymentChannelAndSplit(address,address,bytes32,uint256,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      depositPaymentValue: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitPaymentChannelAndWithdraw(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitPaymentChannelAndWithdraw(address,address,bytes32,uint256,uint256,bytes,bytes)"(
      sender: string,
      token: string,
      uid: BytesLike,
      blockNumber: BigNumberish,
      amount: BigNumberish,
      senderSignature: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    computeDepositAccountAddress(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeDepositAccountAddress(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePaymentChannelHash(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computePaymentChannelHash(address,address,address,bytes32)"(
      sender: string,
      recipient: string,
      token: string,
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployDepositAccount(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployDepositAccount(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWithdrawalLockPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositWithdrawalLockPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gateway()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDepositWithdrawalLockedUntil(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDepositWithdrawalLockedUntil(address,address)"(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentChannelCommittedAmount(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPaymentChannelCommittedAmount(bytes32)"(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashPaymentChannelCommit(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashPaymentChannelCommit(tuple)"(
      paymentChannelCommit: {
        sender: string;
        recipient: string;
        token: string;
        uid: BytesLike;
        blockNumber: BigNumberish;
        amount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,address[],address,bytes32,bytes32,bytes32)"(
      accountOwnerRegistry_: string,
      accountProofRegistry_: string,
      personalAccountRegistry_: string,
      depositWithdrawalLockPeriod_: BigNumberish,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isDepositAccountDeployed(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDepositAccountDeployed(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGuardian(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personalAccountRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "personalAccountRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    typedDataDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "typedDataDomainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawDeposit(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawDeposit(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
