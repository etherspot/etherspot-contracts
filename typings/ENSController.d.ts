/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ENSControllerInterface extends ethers.utils.Interface {
  functions: {
    "addGuardian(address)": FunctionFragment;
    "addr(bytes32)": FunctionFragment;
    "gateway()": FunctionFragment;
    "hashSubNodeRegistration(tuple)": FunctionFragment;
    "initialize(address,address[],address,bytes32,bytes32,bytes32)": FunctionFragment;
    "isGuardian(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "registerSubNode(bytes32,bytes32,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "releaseNode(bytes32)": FunctionFragment;
    "removeGuardian(address)": FunctionFragment;
    "setAddr(bytes32,address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "submitNode(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "typedDataDomainSeparator()": FunctionFragment;
    "verifyGuardianSignature(bytes32,bytes)": FunctionFragment;
    "verifyNode(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addGuardian", values: [string]): string;
  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashSubNodeRegistration",
    values: [{ account: string; node: BytesLike; label: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string[], string, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerSubNode",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typedDataDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyGuardianSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyNode",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashSubNodeRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGuardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSubNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typedDataDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyGuardianSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyNode", data: BytesLike): Result;

  events: {
    "AddrChanged(bytes32,address)": EventFragment;
    "GuardianAdded(address)": EventFragment;
    "GuardianRemoved(address)": EventFragment;
    "Initialized()": EventFragment;
    "NodeReleased(bytes32,address)": EventFragment;
    "NodeSubmitted(bytes32,address)": EventFragment;
    "NodeVerified(bytes32)": EventFragment;
    "RegistryChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddrChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryChanged"): EventFragment;
}

export class ENSController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ENSControllerInterface;

  functions: {
    addGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gateway(overrides?: CallOverrides): Promise<[string]>;

    "gateway()"(overrides?: CallOverrides): Promise<[string]>;

    hashSubNodeRegistration(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "hashSubNodeRegistration(tuple)"(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address[],address,bytes32,bytes32,bytes32)"(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    registerSubNode(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerSubNode(bytes32,bytes32,bytes)"(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    releaseNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "releaseNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAddr(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistry(
      registry_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistry(address)"(
      registry_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<[string]>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "verifyNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addGuardian(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addGuardian(address)"(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addr(bytes32)"(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  gateway(overrides?: CallOverrides): Promise<string>;

  "gateway()"(overrides?: CallOverrides): Promise<string>;

  hashSubNodeRegistration(
    subNodeRegistration: { account: string; node: BytesLike; label: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  "hashSubNodeRegistration(tuple)"(
    subNodeRegistration: { account: string; node: BytesLike; label: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    registry_: string,
    guardians_: string[],
    gateway_: string,
    typedDataDomainNameHash: BytesLike,
    typedDataDomainVersionHash: BytesLike,
    typedDataDomainSalt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address[],address,bytes32,bytes32,bytes32)"(
    registry_: string,
    guardians_: string[],
    gateway_: string,
    typedDataDomainNameHash: BytesLike,
    typedDataDomainVersionHash: BytesLike,
    typedDataDomainSalt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isGuardian(guardian: string, overrides?: CallOverrides): Promise<boolean>;

  "isGuardian(address)"(
    guardian: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  registerSubNode(
    node: BytesLike,
    label: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerSubNode(bytes32,bytes32,bytes)"(
    node: BytesLike,
    label: BytesLike,
    guardianSignature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  releaseNode(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "releaseNode(bytes32)"(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeGuardian(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeGuardian(address)"(
    guardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAddr(
    node: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,address)"(
    node: BytesLike,
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistry(
    registry_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistry(address)"(
    registry_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitNode(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitNode(bytes32)"(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  typedDataDomainSeparator(overrides?: CallOverrides): Promise<string>;

  "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

  verifyGuardianSignature(
    messageHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyGuardianSignature(bytes32,bytes)"(
    messageHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyNode(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "verifyNode(bytes32)"(
    node: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addGuardian(guardian: string, overrides?: CallOverrides): Promise<void>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    gateway(overrides?: CallOverrides): Promise<string>;

    "gateway()"(overrides?: CallOverrides): Promise<string>;

    hashSubNodeRegistration(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hashSubNodeRegistration(tuple)"(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address[],address,bytes32,bytes32,bytes32)"(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<boolean>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    registerSubNode(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerSubNode(bytes32,bytes32,bytes)"(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    releaseNode(node: BytesLike, overrides?: CallOverrides): Promise<void>;

    "releaseNode(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGuardian(guardian: string, overrides?: CallOverrides): Promise<void>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddr(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(registry_: string, overrides?: CallOverrides): Promise<void>;

    "setRegistry(address)"(
      registry_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitNode(node: BytesLike, overrides?: CallOverrides): Promise<void>;

    "submitNode(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<string>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<string>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyNode(node: BytesLike, overrides?: CallOverrides): Promise<void>;

    "verifyNode(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddrChanged(node: BytesLike | null, addr: null): EventFilter;

    GuardianAdded(guardian: null): EventFilter;

    GuardianRemoved(guardian: null): EventFilter;

    Initialized(): EventFilter;

    NodeReleased(node: null, owner: null): EventFilter;

    NodeSubmitted(node: null, owner: null): EventFilter;

    NodeVerified(node: null): EventFilter;

    RegistryChanged(registry: null): EventFilter;
  };

  estimateGas: {
    addGuardian(guardian: string, overrides?: Overrides): Promise<BigNumber>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addr(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gateway(overrides?: CallOverrides): Promise<BigNumber>;

    "gateway()"(overrides?: CallOverrides): Promise<BigNumber>;

    hashSubNodeRegistration(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashSubNodeRegistration(tuple)"(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address[],address,bytes32,bytes32,bytes32)"(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isGuardian(guardian: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerSubNode(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerSubNode(bytes32,bytes32,bytes)"(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    releaseNode(node: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "releaseNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeGuardian(guardian: string, overrides?: Overrides): Promise<BigNumber>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAddr(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistry(registry_: string, overrides?: Overrides): Promise<BigNumber>;

    "setRegistry(address)"(
      registry_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitNode(node: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "submitNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typedDataDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "typedDataDomainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyNode(node: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "verifyNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addr(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addr(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gateway(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gateway()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashSubNodeRegistration(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashSubNodeRegistration(tuple)"(
      subNodeRegistration: {
        account: string;
        node: BytesLike;
        label: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address[],address,bytes32,bytes32,bytes32)"(
      registry_: string,
      guardians_: string[],
      gateway_: string,
      typedDataDomainNameHash: BytesLike,
      typedDataDomainVersionHash: BytesLike,
      typedDataDomainSalt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isGuardian(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGuardian(address)"(
      guardian: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSubNode(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerSubNode(bytes32,bytes32,bytes)"(
      node: BytesLike,
      label: BytesLike,
      guardianSignature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "releaseNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeGuardian(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeGuardian(address)"(
      guardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAddr(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddr(bytes32,address)"(
      node: BytesLike,
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registry_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistry(address)"(
      registry_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typedDataDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "typedDataDomainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyGuardianSignature(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyGuardianSignature(bytes32,bytes)"(
      messageHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyNode(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "verifyNode(bytes32)"(
      node: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
