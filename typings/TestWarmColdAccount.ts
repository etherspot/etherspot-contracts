/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type UserOperationStruct = {
  sender: string;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export interface TestWarmColdAccountInterface extends utils.Interface {
  functions: {
    "getAggregator()": FunctionFragment;
    "state()": FunctionFragment;
    "touchPaymaster(address)": FunctionFragment;
    "touchStorage()": FunctionFragment;
    "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "touchPaymaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "touchStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "touchPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "touchStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestWarmColdAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestWarmColdAccountInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAggregator(overrides?: CallOverrides): Promise<[string]>;

    state(overrides?: CallOverrides): Promise<[BigNumber]>;

    touchPaymaster(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    touchStorage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validateUserOp(
      userOp: UserOperationStruct,
      arg1: BytesLike,
      arg2: string,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAggregator(overrides?: CallOverrides): Promise<string>;

  state(overrides?: CallOverrides): Promise<BigNumber>;

  touchPaymaster(
    paymaster: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  touchStorage(overrides?: CallOverrides): Promise<BigNumber>;

  validateUserOp(
    userOp: UserOperationStruct,
    arg1: BytesLike,
    arg2: string,
    missingAccountFunds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAggregator(overrides?: CallOverrides): Promise<string>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    touchPaymaster(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    touchStorage(overrides?: CallOverrides): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      arg1: BytesLike,
      arg2: string,
      missingAccountFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    touchPaymaster(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    touchStorage(overrides?: CallOverrides): Promise<BigNumber>;

    validateUserOp(
      userOp: UserOperationStruct,
      arg1: BytesLike,
      arg2: string,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    touchPaymaster(
      paymaster: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    touchStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateUserOp(
      userOp: UserOperationStruct,
      arg1: BytesLike,
      arg2: string,
      missingAccountFunds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
