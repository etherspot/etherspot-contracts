/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ENSReverseRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "claim(address)": FunctionFragment;
    "initialize(address,bytes32)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "node(address)": FunctionFragment;
    "registry()": FunctionFragment;
    "rootNode()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "node", values: [string]): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootNode", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootNode", data: BytesLike): Result;

  events: {
    "Initialized(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export class ENSReverseRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ENSReverseRegistrarInterface;

  functions: {
    claim(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

    "claim(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,bytes32)"(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    "isInitialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    node(addr: string, overrides?: CallOverrides): Promise<[string]>;

    "node(address)"(addr: string, overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    rootNode(overrides?: CallOverrides): Promise<[string]>;

    "rootNode()"(overrides?: CallOverrides): Promise<[string]>;
  };

  claim(owner: string, overrides?: Overrides): Promise<ContractTransaction>;

  "claim(address)"(
    owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    registry_: string,
    rootNode_: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,bytes32)"(
    registry_: string,
    rootNode_: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

  node(addr: string, overrides?: CallOverrides): Promise<string>;

  "node(address)"(addr: string, overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  rootNode(overrides?: CallOverrides): Promise<string>;

  "rootNode()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claim(owner: string, overrides?: CallOverrides): Promise<string>;

    "claim(address)"(owner: string, overrides?: CallOverrides): Promise<string>;

    initialize(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,bytes32)"(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    "isInitialized()"(overrides?: CallOverrides): Promise<boolean>;

    node(addr: string, overrides?: CallOverrides): Promise<string>;

    "node(address)"(addr: string, overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    rootNode(overrides?: CallOverrides): Promise<string>;

    "rootNode()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Initialized(initializer: null): EventFilter;
  };

  estimateGas: {
    claim(owner: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(owner: string, overrides?: Overrides): Promise<BigNumber>;

    initialize(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,bytes32)"(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    "isInitialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    node(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "node(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    rootNode(overrides?: CallOverrides): Promise<BigNumber>;

    "rootNode()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(owner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim(address)"(
      owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,bytes32)"(
      registry_: string,
      rootNode_: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isInitialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    node(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "node(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rootNode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
