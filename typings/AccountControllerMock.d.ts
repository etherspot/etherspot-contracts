/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AccountControllerMockInterface extends ethers.utils.Interface {
  functions: {
    "accountImplementation()": FunctionFragment;
    "accountRegistry()": FunctionFragment;
    "computeAccountAddress(bytes32)": FunctionFragment;
    "deployAccount(bytes32)": FunctionFragment;
    "executeAccountTransaction(address,address,uint256,bytes)": FunctionFragment;
    "setAccountImplementation(address)": FunctionFragment;
    "setAccountRegistry(address)": FunctionFragment;
    "upgradeAccount(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAccountAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployAccount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAccountTransaction",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAccount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAccountAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAccountTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAccount",
    data: BytesLike
  ): Result;

  events: {
    "AccountDeployed(address,address)": EventFragment;
    "AccountImplementationUpdated(address)": EventFragment;
    "AccountRegistryUpdated(address)": EventFragment;
    "AccountTransactionExecuted(address,address,uint256,bytes,bytes)": EventFragment;
    "AccountUpgraded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccountImplementationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountRegistryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountUpgraded"): EventFragment;
}

export class AccountControllerMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AccountControllerMockInterface;

  functions: {
    accountImplementation(overrides?: CallOverrides): Promise<[string]>;

    "accountImplementation()"(overrides?: CallOverrides): Promise<[string]>;

    accountRegistry(overrides?: CallOverrides): Promise<[string]>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    computeAccountAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "computeAccountAddress(bytes32)"(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployAccount(
      salt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployAccount(bytes32)"(
      salt: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeAccountTransaction(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeAccountTransaction(address,address,uint256,bytes)"(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccountImplementation(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountImplementation(address)"(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAccountRegistry(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAccountRegistry(address)"(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeAccount(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeAccount(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accountImplementation(overrides?: CallOverrides): Promise<string>;

  "accountImplementation()"(overrides?: CallOverrides): Promise<string>;

  accountRegistry(overrides?: CallOverrides): Promise<string>;

  "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

  computeAccountAddress(
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "computeAccountAddress(bytes32)"(
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  deployAccount(
    salt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployAccount(bytes32)"(
    salt: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeAccountTransaction(
    account: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeAccountTransaction(address,address,uint256,bytes)"(
    account: string,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccountImplementation(
    accountImplementation_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountImplementation(address)"(
    accountImplementation_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAccountRegistry(
    accountRegistry_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAccountRegistry(address)"(
    accountRegistry_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeAccount(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeAccount(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accountImplementation(overrides?: CallOverrides): Promise<string>;

    "accountImplementation()"(overrides?: CallOverrides): Promise<string>;

    accountRegistry(overrides?: CallOverrides): Promise<string>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<string>;

    computeAccountAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "computeAccountAddress(bytes32)"(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deployAccount(salt: BytesLike, overrides?: CallOverrides): Promise<void>;

    "deployAccount(bytes32)"(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAccountTransaction(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeAccountTransaction(address,address,uint256,bytes)"(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountImplementation(
      accountImplementation_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAccountImplementation(address)"(
      accountImplementation_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountRegistry(
      accountRegistry_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAccountRegistry(address)"(
      accountRegistry_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeAccount(account: string, overrides?: CallOverrides): Promise<void>;

    "upgradeAccount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AccountDeployed(account: null, accountImplementation: null): EventFilter;

    AccountImplementationUpdated(accountImplementation: null): EventFilter;

    AccountRegistryUpdated(accountRegistry: null): EventFilter;

    AccountTransactionExecuted(
      account: null,
      to: null,
      value: null,
      data: null,
      response: null
    ): EventFilter;

    AccountUpgraded(account: null, accountImplementation: null): EventFilter;
  };

  estimateGas: {
    accountImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    "accountImplementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    accountRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "accountRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    computeAccountAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeAccountAddress(bytes32)"(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployAccount(salt: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "deployAccount(bytes32)"(
      salt: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeAccountTransaction(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeAccountTransaction(address,address,uint256,bytes)"(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAccountImplementation(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountImplementation(address)"(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAccountRegistry(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAccountRegistry(address)"(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeAccount(account: string, overrides?: Overrides): Promise<BigNumber>;

    "upgradeAccount(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountImplementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accountRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAccountAddress(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeAccountAddress(bytes32)"(
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployAccount(
      salt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployAccount(bytes32)"(
      salt: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeAccountTransaction(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeAccountTransaction(address,address,uint256,bytes)"(
      account: string,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAccountImplementation(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountImplementation(address)"(
      accountImplementation_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAccountRegistry(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAccountRegistry(address)"(
      accountRegistry_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeAccount(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeAccount(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
