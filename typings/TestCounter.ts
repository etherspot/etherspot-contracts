/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestCounterInterface extends utils.Interface {
  functions: {
    "count()": FunctionFragment;
    "counters(address)": FunctionFragment;
    "gasWaster(uint256,string)": FunctionFragment;
    "justemit()": FunctionFragment;
    "offset()": FunctionFragment;
    "xxx(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "counters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gasWaster",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "justemit", values?: undefined): string;
  encodeFunctionData(functionFragment: "offset", values?: undefined): string;
  encodeFunctionData(functionFragment: "xxx", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasWaster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "justemit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xxx", data: BytesLike): Result;

  events: {
    "CalledFrom(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CalledFrom"): EventFragment;
}

export type CalledFromEvent = TypedEvent<[string], { sender: string }>;

export type CalledFromEventFilter = TypedEventFilter<CalledFromEvent>;

export interface TestCounter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestCounterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    count(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    counters(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    gasWaster(
      repeat: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    justemit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offset(overrides?: CallOverrides): Promise<[BigNumber]>;

    xxx(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  count(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  counters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  gasWaster(
    repeat: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  justemit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offset(overrides?: CallOverrides): Promise<BigNumber>;

  xxx(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    count(overrides?: CallOverrides): Promise<void>;

    counters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gasWaster(
      repeat: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    justemit(overrides?: CallOverrides): Promise<void>;

    offset(overrides?: CallOverrides): Promise<BigNumber>;

    xxx(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CalledFrom(address)"(sender?: null): CalledFromEventFilter;
    CalledFrom(sender?: null): CalledFromEventFilter;
  };

  estimateGas: {
    count(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    counters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    gasWaster(
      repeat: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    justemit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offset(overrides?: CallOverrides): Promise<BigNumber>;

    xxx(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    count(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    counters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasWaster(
      repeat: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    justemit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xxx(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
