/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IDeBridgeTokenDeployer,
  IDeBridgeTokenDeployerInterface,
} from "../IDeBridgeTokenDeployer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    name: "DeBridgeTokenDeployed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_debridgeId",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "deployAsset",
    outputs: [
      {
        internalType: "address",
        name: "deTokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IDeBridgeTokenDeployer__factory {
  static readonly abi = _abi;
  static createInterface(): IDeBridgeTokenDeployerInterface {
    return new utils.Interface(_abi) as IDeBridgeTokenDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDeBridgeTokenDeployer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IDeBridgeTokenDeployer;
  }
}
