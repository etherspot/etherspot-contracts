/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AccountControllerMock } from "../AccountControllerMock";

export class AccountControllerMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    accountRegistry_: string,
    accountImplementation_: string,
    overrides?: Overrides
  ): Promise<AccountControllerMock> {
    return super.deploy(
      accountRegistry_,
      accountImplementation_,
      overrides || {}
    ) as Promise<AccountControllerMock>;
  }
  getDeployTransaction(
    accountRegistry_: string,
    accountImplementation_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      accountRegistry_,
      accountImplementation_,
      overrides || {}
    );
  }
  attach(address: string): AccountControllerMock {
    return super.attach(address) as AccountControllerMock;
  }
  connect(signer: Signer): AccountControllerMock__factory {
    return super.connect(signer) as AccountControllerMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountControllerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AccountControllerMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "accountRegistry_",
        type: "address",
      },
      {
        internalType: "address",
        name: "accountImplementation_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accountImplementation",
        type: "address",
      },
    ],
    name: "AccountDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "accountImplementation",
        type: "address",
      },
    ],
    name: "AccountUpgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "accountImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "accountRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161038a38038061038a8339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505061005e828261006560201b60201c565b505061021a565b6100748261008760201b60201c565b6100838161015060201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561010d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806103556035913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b81526020018061031a603b913960400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60f2806102286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806311464fbe146037578063d089e11a146069575b600080fd5b603d609b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b606f60c1565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea164736f6c634300060c000a4163636f756e74436f6e74726f6c6c65723a2063616e6e6f7420736574206163636f756e7420496d706c656d656e746174696f6e20746f203078304163636f756e74436f6e74726f6c6c65723a2063616e6e6f7420736574206163636f756e7420726567697374727920746f20307830";
