/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AccountRegistryMock,
  AccountRegistryMockInterface,
} from "../AccountRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__9649d652",
        type: "bytes8",
      },
    ],
    name: "c_9649d652",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__9649d652",
        type: "bytes8",
      },
    ],
    name: "c_false9649d652",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__fbab7e5c",
        type: "bytes8",
      },
    ],
    name: "c_falsefbab7e5c",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__fbab7e5c",
        type: "bytes8",
      },
    ],
    name: "c_fbab7e5c",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__9649d652",
        type: "bytes8",
      },
    ],
    name: "c_true9649d652",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__fbab7e5c",
        type: "bytes8",
      },
    ],
    name: "c_truefbab7e5c",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "mockAccountOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806399066bc61161006657806399066bc6146102a3578063cbc438bf146102ec578063e1e382ce146103c4578063f0ce0fe61461047d578063f0e97b33146104dc57610093565b8063124e9eb31461009857806339235d621461019c5780636259e66f146101fb57806382fa0d1e14610244575b600080fd5b610184600480360360608110156100ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100eb57600080fd5b8201836020820111156100fd57600080fd5b8035906020019184600183028401116401000000008311171561011f57600080fd5b90919293919293908035906020019064010000000081111561014057600080fd5b82018360208201111561015257600080fd5b8035906020019184600183028401116401000000008311171561017457600080fd5b909192939192939050505061053b565b60405180821515815260200191505060405180910390f35b6101e3600480360360208110156101b257600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106dd565b60405180821515815260200191505060405180910390f35b6102426004803603602081101561021157600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106e4565b005b61028b6004803603602081101561025a57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106e7565b60405180821515815260200191505060405180910390f35b6102ea600480360360208110156102b957600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106f2565b005b6103c26004803603604081101561030257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561033f57600080fd5b82018360208201111561035157600080fd5b8035906020019184602083028401116401000000008311171561037357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506106f5565b005b610465600480360360608110156103da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561042157600080fd5b82018360208201111561043357600080fd5b8035906020019184600183028401116401000000008311171561045557600080fd5b9091929391929390505050610838565b60405180821515815260200191505060405180910390f35b6104c46004803603602081101561049357600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061098d565b60405180821515815260200191505060405180910390f35b610523600480360360208110156104f257600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610998565b60405180821515815260200191505060405180910390f35b6000610551674774857102ee385160c01b6106e4565b6105656773f1487c75d694f860c01b6106e4565b610579679eaf38bfa5ffda1860c01b6106e4565b600061061e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061061088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061099f565b610b4490919063ffffffff16565b9050610634677108cfd2b8f1685560c01b6106e4565b6106486743bfd04725bb7ab460c01b6106e4565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505095945050505050565b6000919050565b50565b600060019050919050565b50565b610709676f63c5f6dba4beab60c01b6106e4565b61071d679cd1be894a90accd60c01b6106e4565b61073167bb37c9607ea813a560c01b6106e4565b60008151905061074b6736d7512991da8afe60c01b6106e4565b61075f67a30a1dc641009c5460c01b6106e4565b60005b818110156108325761077e67c032a26f6f1135c460c01b6106e4565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106107cc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610762565b50505050565b600061084e670c6be4924ae2085460c01b6106e4565b6108626747a760788a349f0b60c01b6106e4565b6108766748f680dc33bc9d3f60c01b6106e4565b60006108cf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086610b4490919063ffffffff16565b90506108e56747f655d17704028a60c01b6106e4565b6108f9670fae7617e6d5f3d760c01b6106e4565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050949350505050565b600060019050919050565b6000919050565b60006109b5676caf41065fc97a4260c01b610e61565b6109c9679f00e9579a814efe60c01b610e61565b6109dd678bbf08d0403adc3f60c01b610e61565b6109e78251610e64565b826040516020018082805190602001908083835b60208310610a1e57805182526020820191506020810190506020830392506109fb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310610ab05780518252602082019150602081019050602083039250610a8d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310610b015780518252602082019150602081019050602083039250610ade565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052805190602001209050919050565b6000610b5a670d75db982ec4597160c01b6111b3565b610b6e6725c2c60ab754182560c01b6111b3565b610b82673eb64a254569ed0660c01b6111b3565b6000610b9867fb2a2286066e15e460c01b6111b3565b610bac67a440db11ec9e986d60c01b6111b3565b604183511415610e1a57610bca6704a5aada48e2763260c01b6111b3565b610bde674b98cf1796e5c26660c01b6111b3565b610bf267d2dfec7b159385fc60c01b6111b3565b6000610c086772c2a840621b4aa760c01b6111b3565b610c1c67bfd411e6ba4d07c460c01b6111b3565b6000610c3267145d23f82764ba9960c01b6111b3565b610c4667acdff958a9c6c5dd60c01b6111b3565b6000610c5c673b79e3a80932a6a160c01b6111b3565b6020860151925060408601519150606086015160001a9050610c88679b0cdee01a57ea2f60c01b6111b3565b610c9c675dbf88583373227960c01b6111b3565b601b8160ff161015610cdb57610cbc670dc9a1836eb51c3260c01b6111b3565b610cd0677097d8456a6c3e1560c01b6111b3565b601b81019050610cf0565b610cef6708b39c61216869e760c01b6111b3565b5b610d04672ea4d6db7d2138c560c01b6111b3565b610d18679ad3f461195a5eee60c01b6111b3565b601b8160ff16148015610d3b5750610d3a67a24e972b59dc7d0560c01b6111b6565b5b80610d655750601c8160ff16148015610d645750610d6367934bee4849491d9560c01b6111b6565b5b5b15610dfd57610d7e676d6a491fc6e072fa60c01b6111b3565b610d9267aecd1690d1de9f1c60c01b6111b3565b60018782858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610dec573d6000803e3d6000fd5b505050602060405103519350610e12565b610e1167513fbc3b3a0ad1c060c01b6111b3565b5b505050610e2f565b610e2e6723d6d78de386c96660c01b6111b3565b5b610e436707d0c4f11e72cfc960c01b6111b3565b610e5767b9689b22f403636c60c01b6111b3565b8091505092915050565b50565b6060610e7a67e3a0abd5bcd9be4560c01b6111c1565b610e8e676f4ac71b01df0db160c01b6111c1565b610ea26721d33336b8b2843560c01b6111c1565b6000821415610f2457610ebf6799734a524846f5ea60c01b6111c1565b610ed36786ec3af2b5204b2d60c01b6111c1565b610ee7675f049c9df345fcb860c01b6111c1565b6040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506111ae565b610f38674e123f29ad8e63ae60c01b6111c1565b610f4c678a02b86c6f5ae79060c01b6111c1565b610f6067aef6cecdbdb7f12260c01b6111c1565b6000829050610f79675ee403aa4c2e194160c01b6111c1565b610f8d67c9a686dccda57deb60c01b6111c1565b6000610fa36770f6e6f301963e5060c01b6111c1565b610fb767cec46452a4c2007960c01b6111c1565b5b6000821461100257610fd467a2c57d3c793a6eb760c01b6111c1565b8080600101915050610ff0677b9437f81985d6c960c01b6111c1565b600a8281610ffa57fe5b049150610fb8565b611016675b6ccf3f6790a03260c01b6111c1565b61102a67c5942845ca4d8bd160c01b6111c1565b60608167ffffffffffffffff8111801561104357600080fd5b506040519080825280601f01601f1916602001820160405280156110765781602001600182028036833780820191505090505b50905061108d67f47605e8a1a97a4f60c01b6111c1565b6110a167fb23949ab383488b60c01b6111c1565b60006001830390506110bd67f586ddddd202275b60c01b6111c1565b8593506110d4670a29638383e5bbf260c01b6111c1565b6110e867417a1c155b8c8d7860c01b6111c1565b5b6000841461117e576111056730db4ddbb2bce57560c01b6111c1565b600a848161110f57fe5b0660300160f81b8282806001900393508151811061112957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061116c6753f1af39e9b748c960c01b6111c1565b600a848161117657fe5b0493506110e9565b611192674d1eb2df4daf6cff60c01b6111c1565b6111a6677ce056f455b7e7f260c01b6111c1565b819450505050505b919050565b50565b600060019050919050565b5056fea164736f6c634300060c000a";

type AccountRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountRegistryMock__factory extends ContractFactory {
  constructor(...args: AccountRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AccountRegistryMock> {
    return super.deploy(overrides || {}) as Promise<AccountRegistryMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AccountRegistryMock {
    return super.attach(address) as AccountRegistryMock;
  }
  connect(signer: Signer): AccountRegistryMock__factory {
    return super.connect(signer) as AccountRegistryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountRegistryMockInterface {
    return new utils.Interface(_abi) as AccountRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountRegistryMock {
    return new Contract(address, _abi, signerOrProvider) as AccountRegistryMock;
  }
}
