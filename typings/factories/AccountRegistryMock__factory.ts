/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AccountRegistryMock,
  AccountRegistryMockInterface,
} from "../AccountRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_203cf0ac",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_5dbd0fc3",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_false203cf0ac",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_false5dbd0fc3",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_true203cf0ac",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_true5dbd0fc3",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "mockAccountOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111d0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806392055f011161006657806392055f01146102b95780639486fe1c14610318578063cbc438bf14610361578063d628d08614610439578063e1e382ce1461048257610093565b806305ae19e614610098578063124e9eb3146100f75780631dccb787146101fb57806335a7ad4e1461025a575b600080fd5b6100df600480360360208110156100ae57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061053b565b60405180821515815260200191505060405180910390f35b6101e36004803603606081101561010d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561014a57600080fd5b82018360208201111561015c57600080fd5b8035906020019184600183028401116401000000008311171561017e57600080fd5b90919293919293908035906020019064010000000081111561019f57600080fd5b8201836020820111156101b157600080fd5b803590602001918460018302840111640100000000831117156101d357600080fd5b9091929391929390505050610546565b60405180821515815260200191505060405180910390f35b6102426004803603602081101561021157600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106e8565b60405180821515815260200191505060405180910390f35b6102a16004803603602081101561027057600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106ef565b60405180821515815260200191505060405180910390f35b610300600480360360208110156102cf57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106fa565b60405180821515815260200191505060405180910390f35b61035f6004803603602081101561032e57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610701565b005b6104376004803603604081101561037757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103b457600080fd5b8201836020820111156103c657600080fd5b803590602001918460208302840111640100000000831117156103e857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610704565b005b6104806004803603602081101561044f57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610847565b005b6105236004803603606081101561049857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156104df57600080fd5b8201836020820111156104f157600080fd5b8035906020019184600183028401116401000000008311171561051357600080fd5b909192939192939050505061084a565b60405180821515815260200191505060405180910390f35b600060019050919050565b600061055c67c6ba37b70ad58ec260c01b610701565b61057067ac3b6be943aa824360c01b610701565b61058467d5ed977045c617d660c01b610701565b600061062984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061061b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061099f565b610b4490919063ffffffff16565b905061063f67557f62f808628ff160c01b610701565b610653678d5c22858bc1c4d060c01b610701565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505095945050505050565b6000919050565b600060019050919050565b6000919050565b50565b610718676b655dfc704cc9cb60c01b610701565b61072c67f7f806c3d73ed3ca60c01b610701565b6107406782984858a593099e60c01b610701565b60008151905061075a679afc9df8c4aa14e760c01b610701565b61076e6736e80d02e5a51b7c60c01b610701565b60005b818110156108415761078d67bb033b09fdba520560c01b610701565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106107db57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610771565b50505050565b50565b6000610860675ccacbc1efd7563b60c01b610701565b61087467d1dc12bac4dcf33060c01b610701565b61088867b409bad1a162dc1060c01b610701565b60006108e184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086610b4490919063ffffffff16565b90506108f76756e8597c58acc91e60c01b610701565b61090b673f8708b47f05943160c01b610701565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050949350505050565b60006109b567c56bb6402c6b93f560c01b610e60565b6109c9672422eb088c9adda560c01b610e60565b6109dd675f87e8bd2ce9060c60c01b610e60565b6109e78251610e63565b826040516020018082805190602001908083835b60208310610a1e57805182526020820191506020810190506020830392506109fb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310610ab05780518252602082019150602081019050602083039250610a8d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310610b015780518252602082019150602081019050602083039250610ade565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052805190602001209050919050565b6000610b5a67e710cfd691944ecc60c01b6111b2565b610b6e670294e6bd98a0f62d60c01b6111b2565b610b82672ab65f4f031e9def60c01b6111b2565b6000610b9867c6d253441a2ce96960c01b6111b2565b610bac67d507789c27b9728c60c01b6111b2565b604183511415610e1957610bca67c2aeb0e1af675d5460c01b6111b2565b610bde67132cb9b7d0d6e6fb60c01b6111b2565b610bf26733531d442010362560c01b6111b2565b6000610c0867fad8c7fceb31964660c01b6111b2565b610c1c67efaa9aab96f45ecf60c01b6111b2565b6000610c3267a62978cc94671abb60c01b6111b2565b610c466760b909685737ef6860c01b6111b2565b6000610c5c678e8a4f44537e79e560c01b6111b2565b6020860151925060408601519150606086015160001a9050610c8867284a83339c1f2f7260c01b6111b2565b610c9c6737f23b19123b98a560c01b6111b2565b601b8160ff161015610cdb57610cbc6740c617d25322a1e960c01b6111b2565b610cd067f2fa807318960d7060c01b6111b2565b601b81019050610cf0565b610cef67bf9557648bed897660c01b6111b2565b5b610d0467d900a81b8b38110a60c01b6111b2565b610d1867c7a42d5f693bb07560c01b6111b2565b601b8160ff16148015610d3b5750610d3a67c15d680a0d1bdf9b60c01b6111b5565b5b80610d655750601c8160ff16148015610d645750610d63672aeb3fb673e7536760c01b6111b5565b5b5b15610dfc57610d7e675c8ff17285f13d9760c01b6111b2565b610d9166751e47d6c1350a60c01b6111b2565b60018782858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610deb573d6000803e3d6000fd5b505050602060405103519350610e11565b610e10673685a6bcd969a27360c01b6111b2565b5b505050610e2e565b610e2d67b007f12c841b69c460c01b6111b2565b5b610e426708a35a687b2ffbcd60c01b6111b2565b610e56675e1719d1223e5f0a60c01b6111b2565b8091505092915050565b50565b6060610e796784ba72d2d96910fe60c01b6111c0565b610e8d676620c67baa4d260260c01b6111c0565b610ea1674e24ae04e8184a4960c01b6111c0565b6000821415610f2357610ebe6728ac5af8996bfd0e60c01b6111c0565b610ed26740659fa64afdd03660c01b6111c0565b610ee667739f0b5e49d5f13260c01b6111c0565b6040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506111ad565b610f37677dae710c749a760760c01b6111c0565b610f4b67da8699875fad366c60c01b6111c0565b610f5f674727e3fdb314e9bd60c01b6111c0565b6000829050610f786702ab5f512c95571e60c01b6111c0565b610f8c67a9d121d81ced8e1160c01b6111c0565b6000610fa267bd0f5fb49fa1c50b60c01b6111c0565b610fb6676f5784edfc60d9b460c01b6111c0565b5b6000821461100157610fd367b7726a853440fb9260c01b6111c0565b8080600101915050610fef679f8e1e14a511889060c01b6111c0565b600a8281610ff957fe5b049150610fb7565b61101567bb9fe5499fc9ba6860c01b6111c0565b611029674877871be475d35d60c01b6111c0565b60608167ffffffffffffffff8111801561104257600080fd5b506040519080825280601f01601f1916602001820160405280156110755781602001600182028036833780820191505090505b50905061108c679780a462e6e9020b60c01b6111c0565b6110a06755052fb1d91c881660c01b6111c0565b60006001830390506110bc67ea271259167cadd160c01b6111c0565b8593506110d3676f45dec0389aad3f60c01b6111c0565b6110e76779dd419c5985a92160c01b6111c0565b5b6000841461117d5761110467d36765849752b9f560c01b6111c0565b600a848161110e57fe5b0660300160f81b8282806001900393508151811061112857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061116b67cb34af0c38d50d0c60c01b6111c0565b600a848161117557fe5b0493506110e8565b61119167266d5dc04becc5ea60c01b6111c0565b6111a5674b320a169823bf5560c01b6111c0565b819450505050505b919050565b50565b600060019050919050565b5056fea164736f6c634300060c000a";

type AccountRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountRegistryMock__factory extends ContractFactory {
  constructor(...args: AccountRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AccountRegistryMock> {
    return super.deploy(overrides || {}) as Promise<AccountRegistryMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AccountRegistryMock {
    return super.attach(address) as AccountRegistryMock;
  }
  connect(signer: Signer): AccountRegistryMock__factory {
    return super.connect(signer) as AccountRegistryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountRegistryMockInterface {
    return new utils.Interface(_abi) as AccountRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountRegistryMock {
    return new Contract(address, _abi, signerOrProvider) as AccountRegistryMock;
  }
}
