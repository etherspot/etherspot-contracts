/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AccountRegistryMock,
  AccountRegistryMockInterface,
} from "../AccountRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_203cf0ac",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_5dbd0fc3",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_false203cf0ac",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_false5dbd0fc3",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__203cf0ac",
        type: "bytes8",
      },
    ],
    name: "c_true203cf0ac",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__5dbd0fc3",
        type: "bytes8",
      },
    ],
    name: "c_true5dbd0fc3",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidAccountSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "mockAccountOwners",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111d1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806392055f011161006657806392055f01146102b95780639486fe1c14610318578063cbc438bf14610361578063d628d08614610439578063e1e382ce1461048257610093565b806305ae19e614610098578063124e9eb3146100f75780631dccb787146101fb57806335a7ad4e1461025a575b600080fd5b6100df600480360360208110156100ae57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061053b565b60405180821515815260200191505060405180910390f35b6101e36004803603606081101561010d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561014a57600080fd5b82018360208201111561015c57600080fd5b8035906020019184600183028401116401000000008311171561017e57600080fd5b90919293919293908035906020019064010000000081111561019f57600080fd5b8201836020820111156101b157600080fd5b803590602001918460018302840111640100000000831117156101d357600080fd5b9091929391929390505050610546565b60405180821515815260200191505060405180910390f35b6102426004803603602081101561021157600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106e8565b60405180821515815260200191505060405180910390f35b6102a16004803603602081101561027057600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106ef565b60405180821515815260200191505060405180910390f35b610300600480360360208110156102cf57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106fa565b60405180821515815260200191505060405180910390f35b61035f6004803603602081101561032e57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610701565b005b6104376004803603604081101561037757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156103b457600080fd5b8201836020820111156103c657600080fd5b803590602001918460208302840111640100000000831117156103e857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610704565b005b6104806004803603602081101561044f57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610847565b005b6105236004803603606081101561049857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156104df57600080fd5b8201836020820111156104f157600080fd5b8035906020019184600183028401116401000000008311171561051357600080fd5b909192939192939050505061084a565b60405180821515815260200191505060405180910390f35b600060019050919050565b600061055c67f6058d6feabedf4e60c01b610701565b61057067791d255b4b13901c60c01b610701565b61058467c2ed14287a18089060c01b610701565b600061062984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061061b88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061099f565b610b4490919063ffffffff16565b905061063f670293bb213b74056f60c01b610701565b61065367919748b41fa91fca60c01b610701565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505095945050505050565b6000919050565b600060019050919050565b6000919050565b50565b61071867f3c4a7298875368960c01b610701565b61072c6792589196eef0ef0260c01b610701565b61074067d212011fb9edaa3d60c01b610701565b60008151905061075a67fd344359a177403260c01b610701565b61076e67e60a35b5d2b82dfa60c01b610701565b60005b818110156108415761078d6762088388f62f3cf660c01b610701565b60016000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008584815181106107db57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610771565b50505050565b50565b6000610860675eb20e8a5636f19660c01b610701565b610874675a493c0d16ba432360c01b610701565b61088867ce8f4f10d9dc17d560c01b610701565b60006108e184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505086610b4490919063ffffffff16565b90506108f7670b6cd25895782cad60c01b610701565b61090b67984631075067e43360c01b610701565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16915050949350505050565b60006109b567957e7830bbd813a160c01b610e61565b6109c96777388b439e4c706660c01b610e61565b6109dd678c0dad3efcfc1e3260c01b610e61565b6109e78251610e64565b826040516020018082805190602001908083835b60208310610a1e57805182526020820191506020810190506020830392506109fb565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a000000000000815250601a0183805190602001908083835b60208310610ab05780518252602082019150602081019050602083039250610a8d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310610b015780518252602082019150602081019050602083039250610ade565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052805190602001209050919050565b6000610b5a67610b12321a07a31960c01b6111b3565b610b6e670f66a519ee9137b960c01b6111b3565b610b8267140d9f9935e2385360c01b6111b3565b6000610b98670bfea895a9f81bec60c01b6111b3565b610bac67a8c715ec3b9d89c160c01b6111b3565b604183511415610e1a57610bca67101129654a82afeb60c01b6111b3565b610bde67a44405322c11578a60c01b6111b3565b610bf2673ae09945b2f5082360c01b6111b3565b6000610c0867900a30e48d0fc7bd60c01b6111b3565b610c1c677d193483635abe1860c01b6111b3565b6000610c3267f24e14d594e9077960c01b6111b3565b610c4667a847d7edacf7e00c60c01b6111b3565b6000610c5c670bcc457b0963bc0f60c01b6111b3565b6020860151925060408601519150606086015160001a9050610c886730650d5e99574f3560c01b6111b3565b610c9c675197804ca644c8a460c01b6111b3565b601b8160ff161015610cdb57610cbc6781206cb7a1d9cec760c01b6111b3565b610cd0679d0aaefe9954d7fb60c01b6111b3565b601b81019050610cf0565b610cef67091b6422f681fe5560c01b6111b3565b5b610d04677849785c6ede9b0e60c01b6111b3565b610d186732075f7517db825b60c01b6111b3565b601b8160ff16148015610d3b5750610d3a67638a38da6bf5bb4360c01b6111b6565b5b80610d655750601c8160ff16148015610d645750610d63671d94865be2a4ed5560c01b6111b6565b5b5b15610dfd57610d7e67657d88528f4e396b60c01b6111b3565b610d92675469679748b05cfe60c01b6111b3565b60018782858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610dec573d6000803e3d6000fd5b505050602060405103519350610e12565b610e1167539b701a1f57136860c01b6111b3565b5b505050610e2f565b610e2e67f3927173995ed52360c01b6111b3565b5b610e4367303f1b174284648060c01b6111b3565b610e5767c60031985823124160c01b6111b3565b8091505092915050565b50565b6060610e7a67944f62c49d2211d360c01b6111c1565b610e8e67cf066073523ad27260c01b6111c1565b610ea2675e91f9b63d948d5860c01b6111c1565b6000821415610f2457610ebf677b0ce46c12188bc160c01b6111c1565b610ed3678aeefffae0d7fd7960c01b6111c1565b610ee767632899c3b9762aa260c01b6111c1565b6040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506111ae565b610f3867d4ac009e6f062aa760c01b6111c1565b610f4c6717428562d9cc82ca60c01b6111c1565b610f6067883259cc94c7ab0260c01b6111c1565b6000829050610f796714aaf87bc406f85b60c01b6111c1565b610f8d675a17c5ce53d95b1e60c01b6111c1565b6000610fa36747fbe7876372bb7760c01b6111c1565b610fb76703d91880b80ba81160c01b6111c1565b5b6000821461100257610fd4674c9b174d7e669b1660c01b6111c1565b8080600101915050610ff0674fcccc4aeaffba3360c01b6111c1565b600a8281610ffa57fe5b049150610fb8565b61101667c58fa74478d42bcd60c01b6111c1565b61102a670bc924b9eeb265b760c01b6111c1565b60608167ffffffffffffffff8111801561104357600080fd5b506040519080825280601f01601f1916602001820160405280156110765781602001600182028036833780820191505090505b50905061108d679dc5195730eeab1760c01b6111c1565b6110a167d095aa12c047f17860c01b6111c1565b60006001830390506110bd671a0d585c82f26b7560c01b6111c1565b8593506110d467623c941e41d0650160c01b6111c1565b6110e867b73f896d5bae614060c01b6111c1565b5b6000841461117e576111056773b20ed61aea105760c01b6111c1565b600a848161110f57fe5b0660300160f81b8282806001900393508151811061112957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061116c679d6afb48f5a4141e60c01b6111c1565b600a848161117657fe5b0493506110e9565b61119267c95e90ced64cb5d060c01b6111c1565b6111a6673e3baead90f807de60c01b6111c1565b819450505050505b919050565b50565b600060019050919050565b5056fea164736f6c634300060c000a";

type AccountRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AccountRegistryMock__factory extends ContractFactory {
  constructor(...args: AccountRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AccountRegistryMock> {
    return super.deploy(overrides || {}) as Promise<AccountRegistryMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AccountRegistryMock {
    return super.attach(address) as AccountRegistryMock;
  }
  connect(signer: Signer): AccountRegistryMock__factory {
    return super.connect(signer) as AccountRegistryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountRegistryMockInterface {
    return new utils.Interface(_abi) as AccountRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountRegistryMock {
    return new Contract(address, _abi, signerOrProvider) as AccountRegistryMock;
  }
}
