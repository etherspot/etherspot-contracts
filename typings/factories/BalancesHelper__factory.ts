/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BalancesHelper,
  BalancesHelperInterface,
} from "../BalancesHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__053a243a",
        type: "bytes8",
      },
    ],
    name: "c_053a243a",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__053a243a",
        type: "bytes8",
      },
    ],
    name: "c_false053a243a",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__053a243a",
        type: "bytes8",
      },
    ],
    name: "c_true053a243a",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c9c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806317bd5f8e14610051578063472d3df91461009a5780635a7e4693146100f9578063ef5bfc3714610158575b600080fd5b6100986004803603602081101561006757600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061027b565b005b6100e1600480360360208110156100b057600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061027e565b60405180821515815260200191505060405180910390f35b6101406004803603602081101561010f57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610285565b60405180821515815260200191505060405180910390f35b6102246004803603604081101561016e57600080fd5b810190808035906020019064010000000081111561018b57600080fd5b82018360208201111561019d57600080fd5b803590602001918460208302840111640100000000831117156101bf57600080fd5b9091929391929390803590602001906401000000008111156101e057600080fd5b8201836020820111156101f257600080fd5b8035906020019184602083028401116401000000008311171561021457600080fd5b9091929391929390505050610290565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561026757808201518184015260208101905061024c565b505050509050019250505060405180910390f35b50565b6000919050565b600060019050919050565b60606102a667bed82bc7b31d926060c01b61027b565b6102ba670ad6239a645f6f1a60c01b61027b565b6102ce67cf0e105ac59b225860c01b61027b565b60606102e984849050878790506105e690919063ffffffff16565b67ffffffffffffffff811180156102ff57600080fd5b5060405190808252806020026020018201604052801561032e5781602001602082028036833780820191505090505b5090506103456740eb63f5a5b3454160c01b61027b565b610359672ba25298f06e8d9060c01b61027b565b60005b868690508110156105b15761037b67a6fb8e2f838ed8a260c01b61027b565b61038f679c159ae136ea106860c01b61027b565b60005b858590508110156105a3576103b1670a67ae6ad3cc298c60c01b61027b565b6103c56704575a552248a9e260c01b61027b565b60006103ef6103e084898990506105e690919063ffffffff16565b8361079990919063ffffffff16565b905061040567df68981fd24ab80360c01b61027b565b61041967fcc7848d2c0eead560c01b61027b565b600073ffffffffffffffffffffffffffffffffffffffff1687878481811061043d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105145761048967643edec54fbd66ec60c01b61027b565b61049d675c7294844336638f60c01b61027b565b6104f78989858181106104ac57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168888858181106104d557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166108d6565b84828151811061050357fe5b602002602001018181525050610595565b61052867e4c108fb47848eb860c01b61027b565b61053c67f14b85a8def73f7d60c01b61027b565b88888481811061054857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163184828151811061058857fe5b6020026020010181815250505b508080600101915050610392565b50808060010191505061035c565b506105c6677ba838556773e9a560c01b61027b565b6105da677c42eb2954c3c7a160c01b61027b565b80915050949350505050565b60006105fc6781f866e7745a2bf560c01b610c68565b610610670beffe334331686060c01b610c68565b61062467d41c0321e0722e1860c01b610c68565b60008314156106725761064167727c93b903ed0ba760c01b610c68565b610655679e3db2fdc2fa724660c01b610c68565b61066967c0bc0b16c53ec3cb60c01b610c68565b60009050610793565b6106866763360ea0a510797160c01b610c68565b61069a67460fe2a347b59c8860c01b610c68565b6106ae6709f7be5665f2893f60c01b610c68565b600082840290506106c96798d1e4c3922ccdd060c01b610c68565b6106dd672eedc14807cf316b60c01b610c68565b6106f16773f87d6761c5739360c01b610c68565b828482816106fb57fe5b0414610752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610c6c6024913960400191505060405180910390fd5b6107666703de5f23269c10fa60c01b610c68565b61077a6719ea5578172e5c2160c01b610c68565b61078e6724595330d45e1d0960c01b610c68565b809150505b92915050565b60006107af67c86b29cadf0259cc60c01b610c68565b6107c3671cf2fd19ce80bc6460c01b610c68565b6107d767084e3d10c702b08960c01b610c68565b600082840190506107f2678715f5819eec045d60c01b610c68565b61080667389bd6f3088f8ddc60c01b610c68565b61081a67395edfe58ce67c0160c01b610c68565b83811015610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174684c69623a206164646974696f6e206f766572666c6f77000081525060200191505060405180910390fd5b6108a467112f71c9280eda0a60c01b610c68565b6108b8673364fede1fdbaa8a60c01b610c68565b6108cc6709a89731fdc49fbb60c01b610c68565b8091505092915050565b60006108ec672a248b9234cdec9760c01b61027b565b610900675d62c90f8eb6f06d60c01b61027b565b610914674355afa506009a8760c01b61027b565b600061092a67604b1d9fe83c0ff760c01b61027b565b61093e674420d0f955c6ce5960c01b61027b565b600061095467826a89ca94b654dc60c01b61027b565b833b905061096c67a4ce69987e31423360c01b61027b565b6109806736433f272331653a60c01b61027b565b6000811115610c205761099d67ae79fae0514c06f560c01b61027b565b6109b16786e6075d08a3926560c01b61027b565b6109c567d7c1377df872ccd760c01b61027b565b60008473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b87604051602401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610a9d5780518252602082019150602081019050602083039250610a7a565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610afd576040519150601f19603f3d011682016040523d82523d6000602084013e610b02565b606091505b50509050610b1a67fb0a3b7b1f22ae7460c01b61027b565b610b2e67ead04bad9953117960c01b61027b565b8015610c0557610b4867139d68566bd70b2260c01b61027b565b610b5c6708212851b27d604c60c01b61027b565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d6020811015610bed57600080fd5b81019080805190602001909291905050509250610c1a565b610c196789fe98fa34cd8aa360c01b61027b565b5b50610c35565b610c34675124d5d93d685da760c01b61027b565b5b610c49677b303c61ef4e09f560c01b61027b565b610c5d67a2f0f2ed006054f160c01b61027b565b819250505092915050565b5056fe536166654d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c634300060c000a";

type BalancesHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancesHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancesHelper__factory extends ContractFactory {
  constructor(...args: BalancesHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BalancesHelper> {
    return super.deploy(overrides || {}) as Promise<BalancesHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BalancesHelper {
    return super.attach(address) as BalancesHelper;
  }
  connect(signer: Signer): BalancesHelper__factory {
    return super.connect(signer) as BalancesHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancesHelperInterface {
    return new utils.Interface(_abi) as BalancesHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancesHelper {
    return new Contract(address, _abi, signerOrProvider) as BalancesHelper;
  }
}
