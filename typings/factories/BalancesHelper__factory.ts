/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BalancesHelper,
  BalancesHelperInterface,
} from "../BalancesHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7989c7ce",
        type: "bytes8",
      },
    ],
    name: "c_7989c7ce",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7989c7ce",
        type: "bytes8",
      },
    ],
    name: "c_false7989c7ce",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7989c7ce",
        type: "bytes8",
      },
    ],
    name: "c_true7989c7ce",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c9b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063505c2304146100515780635290eaf9146100b0578063717e5771146100f9578063ef5bfc3714610158575b600080fd5b6100986004803603602081101561006757600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061027b565b60405180821515815260200191505060405180910390f35b6100f7600480360360208110156100c657600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610286565b005b6101406004803603602081101561010f57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610289565b60405180821515815260200191505060405180910390f35b6102246004803603604081101561016e57600080fd5b810190808035906020019064010000000081111561018b57600080fd5b82018360208201111561019d57600080fd5b803590602001918460208302840111640100000000831117156101bf57600080fd5b9091929391929390803590602001906401000000008111156101e057600080fd5b8201836020820111156101f257600080fd5b8035906020019184602083028401116401000000008311171561021457600080fd5b9091929391929390505050610290565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561026757808201518184015260208101905061024c565b505050509050019250505060405180910390f35b600060019050919050565b50565b6000919050565b60606102a6671996f7c7db2259ac60c01b610286565b6102ba672e4b787fb5dcd29b60c01b610286565b6102ce6707663e952ab1b04b60c01b610286565b60606102e984849050878790506105e690919063ffffffff16565b67ffffffffffffffff811180156102ff57600080fd5b5060405190808252806020026020018201604052801561032e5781602001602082028036833780820191505090505b509050610345671e9f866a219d807660c01b610286565b610359675ee4ced19174963160c01b610286565b60005b868690508110156105b15761037b673a8062ad6a5a9ae860c01b610286565b61038f676962c83948de6c6260c01b610286565b60005b858590508110156105a3576103b16756207a9aa498eb3760c01b610286565b6103c567b0f0d8f141dfc6e060c01b610286565b60006103ef6103e084898990506105e690919063ffffffff16565b8361079890919063ffffffff16565b9050610405677cd11da277f59b6f60c01b610286565b61041967788ca4d91656b03060c01b610286565b600073ffffffffffffffffffffffffffffffffffffffff1687878481811061043d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610514576104896714199bc9d11db1d460c01b610286565b61049d67ad5235d8ec378d1760c01b610286565b6104f78989858181106104ac57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168888858181106104d557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166108d5565b84828151811061050357fe5b602002602001018181525050610595565b6105286755d7cdbac043e98d60c01b610286565b61053c6712a6454d49d0a65960c01b610286565b88888481811061054857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163184828151811061058857fe5b6020026020010181815250505b508080600101915050610392565b50808060010191505061035c565b506105c667048643c1a644649960c01b610286565b6105da67d43948735d9a2b3860c01b610286565b80915050949350505050565b60006105fc673c508ce9aa0e6e6760c01b610c67565b610610670fa17eaab328e08260c01b610c67565b6106246768dfb0ea208c8f4060c01b610c67565b60008314156106715761064167a98d3fc708d3c69860c01b610c67565b6106556734bd3093bb68e15860c01b610c67565b6106686624de95f54120b160c01b610c67565b60009050610792565b6106856717005ae97fd5de3160c01b610c67565b61069967612166ddcd06cb8660c01b610c67565b6106ad67fc456346581af9f960c01b610c67565b600082840290506106c86780b69eb24224e59560c01b610c67565b6106dc67143061fc1d33eebb60c01b610c67565b6106f0671e71cfc00112654d60c01b610c67565b828482816106fa57fe5b0414610751576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610c6b6024913960400191505060405180910390fd5b61076567a0f4e2148fad644960c01b610c67565b610779674bf736a758111ab060c01b610c67565b61078d67acec17dbca3a62a460c01b610c67565b809150505b92915050565b60006107ae672797d9bbee8e685760c01b610c67565b6107c267e25930aa3032662f60c01b610c67565b6107d6673b804ace3fd44ea060c01b610c67565b600082840190506107f167e0d809daafe36a0460c01b610c67565b61080567d0d7b021c1a6823260c01b610c67565b6108196741f1099b5fa09b9360c01b610c67565b8381101561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174684c69623a206164646974696f6e206f766572666c6f77000081525060200191505060405180910390fd5b6108a36728a352a27e50889560c01b610c67565b6108b767f55e5f024a80111c60c01b610c67565b6108cb67d865abdcb752192460c01b610c67565b8091505092915050565b60006108eb67b2712729e87868b360c01b610286565b6108ff67227ce95247d1b4cc60c01b610286565b61091367b685489daeb71a5560c01b610286565b600061092967a6f8c0fb98cafeeb60c01b610286565b61093d67c3aca832f91352cc60c01b610286565b6000610953678be659e0485bcf1760c01b610286565b833b905061096b670b33b15ad270360060c01b610286565b61097f676603793ca1524bbd60c01b610286565b6000811115610c1f5761099c6734983df7d9a27ced60c01b610286565b6109b0673b2ddbbd2fe08b5060c01b610286565b6109c46718a8c4551090a02c60c01b610286565b60008473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b87604051602401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610a9c5780518252602082019150602081019050602083039250610a79565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610afc576040519150601f19603f3d011682016040523d82523d6000602084013e610b01565b606091505b50509050610b1967c7fe3ced1711fc8b60c01b610286565b610b2d673b5f49e36a53cb9d60c01b610286565b8015610c0457610b47677def714ce110fcfc60c01b610286565b610b5b67eb520c752ccbf0a860c01b610286565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d6020811015610bec57600080fd5b81019080805190602001909291905050509250610c19565b610c1867d71c6452d70f1f5d60c01b610286565b5b50610c34565b610c336774cc09ed764aea3760c01b610286565b5b610c4867d4139ac54b6cf02d60c01b610286565b610c5c679db125fba3c9713860c01b610286565b819250505092915050565b5056fe536166654d6174684c69623a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c634300060c000a";

type BalancesHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalancesHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalancesHelper__factory extends ContractFactory {
  constructor(...args: BalancesHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BalancesHelper> {
    return super.deploy(overrides || {}) as Promise<BalancesHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BalancesHelper {
    return super.attach(address) as BalancesHelper;
  }
  connect(signer: Signer): BalancesHelper__factory {
    return super.connect(signer) as BalancesHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalancesHelperInterface {
    return new utils.Interface(_abi) as BalancesHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalancesHelper {
    return new Contract(address, _abi, signerOrProvider) as BalancesHelper;
  }
}
