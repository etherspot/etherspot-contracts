/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestExpirePaymaster,
  TestExpirePaymasterInterface,
} from "../TestExpirePaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620018f8380380620018f88339818101604052810190620000379190620002b7565b80620000586200004c6200007160201b60201c565b6200007960201b60201c565b62000069816200013d60201b60201c565b50506200036c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200014d6200007160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001736200021060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620001cc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c3906200034a565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026b826200023e565b9050919050565b60006200027f826200025e565b9050919050565b620002918162000272565b81146200029d57600080fd5b50565b600081519050620002b18162000286565b92915050565b600060208284031215620002d057620002cf62000239565b5b6000620002e084828501620002a0565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000332602083620002e9565b91506200033f82620002fa565b602082019050919050565b60006020820190508181036000830152620003658162000323565b9050919050565b61157c806200037c6000396000f3fe6080604052600436106100c25760003560e01c8063b0d691fe1161007f578063c399ec8811610059578063c399ec881461020b578063d0e30db014610236578063f2fde38b14610240578063f465c77e14610269576100c2565b8063b0d691fe146101a0578063bb9fe6bf146101cb578063c23a5cea146101e2576100c2565b80630396cb60146100c7578063205c2878146100e3578063584465f21461010c578063715018a6146101355780638da5cb5b1461014c578063a9a2340914610177575b600080fd5b6100e160048036038101906100dc9190610ca4565b6102a7565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610d65565b6103b4565b005b34801561011857600080fd5b50610133600480360381019061012e9190610df5565b6104c3565b005b34801561014157600080fd5b5061014a610583565b005b34801561015857600080fd5b5061016161060b565b60405161016e9190610e31565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190610ed6565b610634565b005b3480156101ac57600080fd5b506101b561064e565b6040516101c29190610fa9565b60405180910390f35b3480156101d757600080fd5b506101e0610674565b005b3480156101ee57600080fd5b5061020960048036038101906102049190610fc4565b610774565b005b34801561021757600080fd5b50610220610880565b60405161022d9190611000565b60405180910390f35b61023e610923565b005b34801561024c57600080fd5b5061026760048036038101906102629190611047565b6109b3565b005b34801561027557600080fd5b50610290600480360381019061028b91906110cf565b610aab565b60405161029e9291906111d7565b60405180910390f35b6102af610afb565b73ffffffffffffffffffffffffffffffffffffffff166102cd61060b565b73ffffffffffffffffffffffffffffffffffffffff1614610323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031a90611264565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b815260040161037f9190611293565b6000604051808303818588803b15801561039857600080fd5b505af11580156103ac573d6000803e3d6000fd5b505050505050565b6103bc610afb565b73ffffffffffffffffffffffffffffffffffffffff166103da61060b565b73ffffffffffffffffffffffffffffffffffffffff1614610430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042790611264565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161048d9291906112bd565b600060405180830381600087803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b505050505050565b6104cb610afb565b73ffffffffffffffffffffffffffffffffffffffff166104e961060b565b73ffffffffffffffffffffffffffffffffffffffff161461053f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053690611264565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61058b610afb565b73ffffffffffffffffffffffffffffffffffffffff166105a961060b565b73ffffffffffffffffffffffffffffffffffffffff16146105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690611264565b60405180910390fd5b6106096000610b03565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61063c610bc7565b61064884848484610c23565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61067c610afb565b73ffffffffffffffffffffffffffffffffffffffff1661069a61060b565b73ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790611264565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b50505050565b61077c610afb565b73ffffffffffffffffffffffffffffffffffffffff1661079a61060b565b73ffffffffffffffffffffffffffffffffffffffff16146107f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e790611264565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b815260040161084b91906112e6565b600060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108dd9190610e31565b602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611316565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b815260040161097f9190610e31565b6000604051808303818588803b15801561099857600080fd5b505af11580156109ac573d6000803e3d6000fd5b5050505050565b6109bb610afb565b73ffffffffffffffffffffffffffffffffffffffff166109d961060b565b73ffffffffffffffffffffffffffffffffffffffff1614610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690611264565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a96906113b5565b60405180910390fd5b610aa881610b03565b50565b6060600084806101200190610ac091906113e4565b6014908092610ad193929190611451565b90610adc91906114a4565b60001c9050604051806020016040528060008152509150935093915050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2157600080fd5b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c559061154f565b60405180910390fd5b600080fd5b600080fd5b600063ffffffff82169050919050565b610c8181610c68565b8114610c8c57600080fd5b50565b600081359050610c9e81610c78565b92915050565b600060208284031215610cba57610cb9610c5e565b5b6000610cc884828501610c8f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cfc82610cd1565b9050919050565b610d0c81610cf1565b8114610d1757600080fd5b50565b600081359050610d2981610d03565b92915050565b6000819050919050565b610d4281610d2f565b8114610d4d57600080fd5b50565b600081359050610d5f81610d39565b92915050565b60008060408385031215610d7c57610d7b610c5e565b5b6000610d8a85828601610d1a565b9250506020610d9b85828601610d50565b9150509250929050565b6000610db082610cd1565b9050919050565b6000610dc282610da5565b9050919050565b610dd281610db7565b8114610ddd57600080fd5b50565b600081359050610def81610dc9565b92915050565b600060208284031215610e0b57610e0a610c5e565b5b6000610e1984828501610de0565b91505092915050565b610e2b81610da5565b82525050565b6000602082019050610e466000830184610e22565b92915050565b60038110610e5957600080fd5b50565b600081359050610e6b81610e4c565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e9657610e95610e71565b5b8235905067ffffffffffffffff811115610eb357610eb2610e76565b5b602083019150836001820283011115610ecf57610ece610e7b565b5b9250929050565b60008060008060608587031215610ef057610eef610c5e565b5b6000610efe87828801610e5c565b945050602085013567ffffffffffffffff811115610f1f57610f1e610c63565b5b610f2b87828801610e80565b93509350506040610f3e87828801610d50565b91505092959194509250565b6000819050919050565b6000610f6f610f6a610f6584610cd1565b610f4a565b610cd1565b9050919050565b6000610f8182610f54565b9050919050565b6000610f9382610f76565b9050919050565b610fa381610f88565b82525050565b6000602082019050610fbe6000830184610f9a565b92915050565b600060208284031215610fda57610fd9610c5e565b5b6000610fe884828501610d1a565b91505092915050565b610ffa81610d2f565b82525050565b60006020820190506110156000830184610ff1565b92915050565b61102481610da5565b811461102f57600080fd5b50565b6000813590506110418161101b565b92915050565b60006020828403121561105d5761105c610c5e565b5b600061106b84828501611032565b91505092915050565b600080fd5b600061016082840312156110905761108f611074565b5b81905092915050565b6000819050919050565b6110ac81611099565b81146110b757600080fd5b50565b6000813590506110c9816110a3565b92915050565b6000806000606084860312156110e8576110e7610c5e565b5b600084013567ffffffffffffffff81111561110657611105610c63565b5b61111286828701611079565b9350506020611123868287016110ba565b925050604061113486828701610d50565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561117857808201518184015260208101905061115d565b83811115611187576000848401525b50505050565b6000601f19601f8301169050919050565b60006111a98261113e565b6111b38185611149565b93506111c381856020860161115a565b6111cc8161118d565b840191505092915050565b600060408201905081810360008301526111f1818561119e565b90506112006020830184610ff1565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061124e602083611207565b915061125982611218565b602082019050919050565b6000602082019050818103600083015261127d81611241565b9050919050565b61128d81610c68565b82525050565b60006020820190506112a86000830184611284565b92915050565b6112b781610cf1565b82525050565b60006040820190506112d260008301856112ae565b6112df6020830184610ff1565b9392505050565b60006020820190506112fb60008301846112ae565b92915050565b60008151905061131081610d39565b92915050565b60006020828403121561132c5761132b610c5e565b5b600061133a84828501611301565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061139f602683611207565b91506113aa82611343565b604082019050919050565b600060208201905081810360008301526113ce81611392565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611401576114006113d5565b5b80840192508235915067ffffffffffffffff821115611423576114226113da565b5b60208301925060018202360383131561143f5761143e6113df565b5b509250929050565b600080fd5b600080fd5b6000808585111561146557611464611447565b5b838611156114765761147561144c565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b60006114b0838361148c565b826114bb8135611099565b925060208210156114fb576114f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802611497565b831692505b505092915050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b6000611539600d83611207565b915061154482611503565b602082019050919050565b600060208201905081810360008301526115688161152c565b905091905056fea164736f6c634300080c000a";

type TestExpirePaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpirePaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpirePaymaster__factory extends ContractFactory {
  constructor(...args: TestExpirePaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _entryPoint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestExpirePaymaster> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestExpirePaymaster>;
  }
  getDeployTransaction(
    _entryPoint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  attach(address: string): TestExpirePaymaster {
    return super.attach(address) as TestExpirePaymaster;
  }
  connect(signer: Signer): TestExpirePaymaster__factory {
    return super.connect(signer) as TestExpirePaymaster__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpirePaymasterInterface {
    return new utils.Interface(_abi) as TestExpirePaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpirePaymaster {
    return new Contract(address, _abi, signerOrProvider) as TestExpirePaymaster;
  }
}
