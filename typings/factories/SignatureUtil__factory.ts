/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SignatureUtil, SignatureUtilInterface } from "../SignatureUtil";

const _abi = [
  {
    inputs: [],
    name: "SignatureInvalidLength",
    type: "error",
  },
  {
    inputs: [],
    name: "SignatureInvalidV",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongArgumentLength",
    type: "error",
  },
];

const _bytecode =
  "0x602d6050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000807000a";

type SignatureUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureUtil__factory extends ContractFactory {
  constructor(...args: SignatureUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignatureUtil> {
    return super.deploy(overrides || {}) as Promise<SignatureUtil>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignatureUtil {
    return super.attach(address) as SignatureUtil;
  }
  connect(signer: Signer): SignatureUtil__factory {
    return super.connect(signer) as SignatureUtil__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureUtilInterface {
    return new utils.Interface(_abi) as SignatureUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureUtil {
    return new Contract(address, _abi, signerOrProvider) as SignatureUtil;
  }
}
