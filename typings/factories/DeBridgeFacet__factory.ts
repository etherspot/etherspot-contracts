/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DeBridgeFacet, DeBridgeFacetInterface } from "../DeBridgeFacet";

const _abi = [
  {
    inputs: [],
    name: "InvalidChainId",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "bridge",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sendingChain",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "receivingChain",
        type: "uint256",
      },
    ],
    name: "TransferInitiated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
    ],
    name: "UpdatedGateAddress",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_chainIdTo",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fallback",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_executionFee",
        type: "uint256",
      },
    ],
    name: "deBridgeBridgeTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deBridgeGate",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGate",
        type: "address",
      },
    ],
    name: "updateGateAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527343de2d77bf8027e25dbd179b491e8d64f38398aa600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006557600080fd5b506001600081905550610d888061007d6000396000f3fe60806040526004361061003f5760003560e01c80633408e470146100445780636443a3f11461006f578063b670e8181461008b578063ca777fbf146100b4575b600080fd5b34801561005057600080fd5b506100596100df565b6040516100669190610ba4565b60405180910390f35b61008960048036038101906100849190610766565b6100e7565b005b34801561009757600080fd5b506100b260048036038101906100ad9190610739565b6105a2565b005b3480156100c057600080fd5b506100c9610684565b6040516100d691906109e2565b60405180910390f35b600046905090565b6002600054141561012d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012490610b62565b60405180910390fd5b6002600081905550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148061019c5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156101d3576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561023a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008511610274576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008414156102af576040517f7a47c9a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016102ec939291906109fd565b602060405180830381600087803b15801561030657600080fd5b505af115801561031a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033e91906107f3565b508573ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518363ffffffff1660e01b815260040161039c929190610a34565b602060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee91906107f3565b506103f76106d2565b61041160018083602001516106aa9092919063ffffffff16565b8160200181815250506104356002600183602001516106aa9092919063ffffffff16565b816020018181525050818160000181815250508260405160200161045991906109c7565b6040516020818303038152906040528160400181905250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be29747634898989896040516020016104c391906109c7565b604051602081830303815290604052600080896040516020016104e69190610b82565b6040516020818303038152906040526040518963ffffffff1660e01b81526004016105179796959493929190610a5d565b6000604051808303818588803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b50505050507f908e78da1d822aba04d6818a3f4e4b717bac30b11f50cf00618975bdc8e30380873386896105766100df565b8a60405161058996959493929190610aee565b60405180910390a1506001600081905550505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610609576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f2d2991929a4ec67bc85624dda7ad286bf05cf5a5dec01267fe51f6c086ecf3eb8160405161067991906109e2565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081156106c057826001901b841790506106cb565b826001901b19841690505b9392505050565b6040518060800160405280600081526020016000815260200160608152602001606081525090565b60008135905061070981610d36565b92915050565b60008151905061071e81610d4d565b92915050565b60008135905061073381610d64565b92915050565b60006020828403121561074f5761074e610cbe565b5b600061075d848285016106fa565b91505092915050565b60008060008060008060c0878903121561078357610782610cbe565b5b600061079189828a016106fa565b96505060206107a289828a01610724565b95505060406107b389828a01610724565b94505060606107c489828a016106fa565b93505060806107d589828a016106fa565b92505060a06107e689828a01610724565b9150509295509295509295565b60006020828403121561080957610808610cbe565b5b60006108178482850161070f565b91505092915050565b61082981610bfd565b82525050565b61084061083b82610bfd565b610c9a565b82525050565b61084f81610c0f565b82525050565b600061086082610bbf565b61086a8185610bca565b935061087a818560208601610c67565b61088381610cc3565b840191505092915050565b600061089982610bbf565b6108a38185610bdb565b93506108b3818560208601610c67565b6108bc81610cc3565b840191505092915050565b6108d081610c55565b82525050565b60006108e3600883610bec565b91506108ee82610ce1565b602082019050919050565b6000610906600083610bdb565b915061091182610d0a565b600082019050919050565b6000610929601f83610bec565b915061093482610d0d565b602082019050919050565b600060808301600083015161095760008601826109a9565b50602083015161096a60208601826109a9565b50604083015184820360408601526109828282610855565b9150506060830151848203606086015261099c8282610855565b9150508091505092915050565b6109b281610c3b565b82525050565b6109c181610c3b565b82525050565b60006109d3828461082f565b60148201915081905092915050565b60006020820190506109f76000830184610820565b92915050565b6000606082019050610a126000830186610820565b610a1f6020830185610820565b610a2c60408301846109b8565b949350505050565b6000604082019050610a496000830185610820565b610a5660208301846109b8565b9392505050565b600061010082019050610a73600083018a610820565b610a8060208301896109b8565b610a8d60408301886109b8565b8181036060830152610a9f818761088e565b90508181036080830152610ab2816108f9565b9050610ac160a0830186610846565b610ace60c08301856108c7565b81810360e0830152610ae0818461088e565b905098975050505050505050565b600060e0820190508181036000830152610b07816108d6565b9050610b166020830189610820565b610b236040830188610820565b610b306060830187610820565b610b3d60808301866109b8565b610b4a60a08301856109b8565b610b5760c08301846109b8565b979650505050505050565b60006020820190508181036000830152610b7b8161091c565b9050919050565b60006020820190508181036000830152610b9c818461093f565b905092915050565b6000602082019050610bb960008301846109b8565b92915050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c0882610c1b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000610c6082610c45565b9050919050565b60005b83811015610c85578082015181840152602081019050610c6a565b83811115610c94576000848401525b50505050565b6000610ca582610cac565b9050919050565b6000610cb782610cd4565b9050919050565b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f6465427269646765000000000000000000000000000000000000000000000000600082015250565b50565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610d3f81610bfd565b8114610d4a57600080fd5b50565b610d5681610c0f565b8114610d6157600080fd5b50565b610d6d81610c3b565b8114610d7857600080fd5b5056fea164736f6c6343000807000a";

type DeBridgeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeBridgeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeBridgeFacet__factory extends ContractFactory {
  constructor(...args: DeBridgeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DeBridgeFacet> {
    return super.deploy(overrides || {}) as Promise<DeBridgeFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DeBridgeFacet {
    return super.attach(address) as DeBridgeFacet;
  }
  connect(signer: Signer): DeBridgeFacet__factory {
    return super.connect(signer) as DeBridgeFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeBridgeFacetInterface {
    return new utils.Interface(_abi) as DeBridgeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeBridgeFacet {
    return new Contract(address, _abi, signerOrProvider) as DeBridgeFacet;
  }
}
