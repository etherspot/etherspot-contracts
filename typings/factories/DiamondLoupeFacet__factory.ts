/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DiamondLoupeFacet,
  DiamondLoupeFacetInterface,
} from "../DiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610fc3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637a0ed6271161005b5780637a0ed6271461013b578063adfca15e14610159578063c71605ff14610189578063cdffacc6146101a557610088565b806301ffc9a71461008d5780631d85bd30146100bd5780632abd0512146100ed57806352ef6b2c1461011d575b600080fd5b6100a760048036038101906100a291906109e9565b6101d5565b6040516100b49190610a31565b60405180910390f35b6100d760048036038101906100d29190610aa4565b6102b0565b6040516100e49190610a31565b60405180910390f35b61010760048036038101906101029190610aa4565b6102bb565b6040516101149190610a31565b60405180910390f35b6101256102c2565b6040516101329190610bc1565b60405180910390f35b6101436103af565b6040516101509190610da0565b60405180910390f35b610173600480360381019061016e9190610dee565b6106c2565b6040516101809190610e8a565b60405180910390f35b6101a3600480360381019061019e9190610aa4565b6107fc565b005b6101bf60048036038101906101ba91906109e9565b6107ff565b6040516101cc9190610ebb565b60405180910390f35b60006101eb6797d66597f5f3962e60c01b6107fc565b6101ff67d369f13bc5928f2d60c01b6107fc565b61021367b6c71c15aa72eaee60c01b6107fc565b600061021d6108dc565b905061023367aabe3263bb6df2d060c01b6107fc565b61024767f9729e0fcc7211c760c01b6107fc565b806003016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b600060019050919050565b6000919050565b60606102d867d3dd52bc23fcccee60c01b6107fc565b6102ec674c404630fc07862060c01b6107fc565b6103006753235ef6b8f5c74960c01b6107fc565b600061030a6108dc565b905061032067c0c81f69e544f09960c01b6107fc565b806002018054806020026020016040519081016040528092919081815260200182805480156103a457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161035a575b505050505091505090565b60606103c5670819c3ab53218cf760c01b6107fc565b6103d9671e6c1c4e78466eca60c01b6107fc565b6103ed67acc6e8acdf56e25160c01b6107fc565b60006103f76108dc565b905061040d676b0724ffd241401a60c01b6107fc565b610421671f808f7780f03d9960c01b6107fc565b600081600201805490509050610441676696ec9d1e07f5fd60c01b6107fc565b8067ffffffffffffffff81111561045b5761045a610ed6565b5b60405190808252806020026020018201604052801561049457816020015b61048161095c565b8152602001906001900390816104795790505b5092506104ab67f09f036a7af8cde160c01b6107fc565b6104bf6705528e9b9257fa7d60c01b6107fc565b60005b818110156106bc576104de67083198474d0a6a1060c01b6107fc565b6104f26762f7d79c4bd255b160c01b6107fc565b600083600201828154811061050a57610509610f05565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061054b672e38b8afc8aed54360c01b6107fc565b8085838151811061055f5761055e610f05565b5b60200260200101516000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506105b1675988e7ae71bade6260c01b6107fc565b8360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561068157602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161062e5790505b505050505085838151811061069957610698610f05565b5b6020026020010151602001819052505080806106b490610f6d565b9150506104c2565b50505090565b60606106d867bd27c6c24ef7f1b660c01b6107fc565b6106ec678c5251aaa8ac302860c01b6107fc565b61070067db344759e879178960c01b6107fc565b600061070a6108dc565b905061071f664607fb23e17d3c60c01b6107fc565b8060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806020026020016040519081016040528092919081815260200182805480156107ef57602002820191906000526020600020906000905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161079c5790505b5050505050915050919050565b50565b6000610815673ec28bd6e8c1477560c01b6107fc565b61082967319f2afe7a46faff60c01b6107fc565b61083d6773217a0f7460d1fc60c01b6107fc565b60006108476108dc565b905061085d676ce092ad8a47fc8d60c01b6107fc565b806000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60006108f166c6fbd4fbaed54a60c01b610959565b61090567714552e98475403a60c01b610959565b610919674b20cd335540d24060c01b610959565b60007fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90506109526757acb9403953294960c01b610959565b8091505090565b50565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109c681610991565b81146109d157600080fd5b50565b6000813590506109e3816109bd565b92915050565b6000602082840312156109ff576109fe61098c565b5b6000610a0d848285016109d4565b91505092915050565b60008115159050919050565b610a2b81610a16565b82525050565b6000602082019050610a466000830184610a22565b92915050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b610a8181610a4c565b8114610a8c57600080fd5b50565b600081359050610a9e81610a78565b92915050565b600060208284031215610aba57610ab961098c565b5b6000610ac884828501610a8f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2882610afd565b9050919050565b610b3881610b1d565b82525050565b6000610b4a8383610b2f565b60208301905092915050565b6000602082019050919050565b6000610b6e82610ad1565b610b788185610adc565b9350610b8383610aed565b8060005b83811015610bb4578151610b9b8882610b3e565b9750610ba683610b56565b925050600181019050610b87565b5085935050505092915050565b60006020820190508181036000830152610bdb8184610b63565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610c4481610991565b82525050565b6000610c568383610c3b565b60208301905092915050565b6000602082019050919050565b6000610c7a82610c0f565b610c848185610c1a565b9350610c8f83610c2b565b8060005b83811015610cc0578151610ca78882610c4a565b9750610cb283610c62565b925050600181019050610c93565b5085935050505092915050565b6000604083016000830151610ce56000860182610b2f565b5060208301518482036020860152610cfd8282610c6f565b9150508091505092915050565b6000610d168383610ccd565b905092915050565b6000602082019050919050565b6000610d3682610be3565b610d408185610bee565b935083602082028501610d5285610bff565b8060005b85811015610d8e5784840389528151610d6f8582610d0a565b9450610d7a83610d1e565b925060208a01995050600181019050610d56565b50829750879550505050505092915050565b60006020820190508181036000830152610dba8184610d2b565b905092915050565b610dcb81610b1d565b8114610dd657600080fd5b50565b600081359050610de881610dc2565b92915050565b600060208284031215610e0457610e0361098c565b5b6000610e1284828501610dd9565b91505092915050565b600082825260208201905092915050565b6000610e3782610c0f565b610e418185610e1b565b9350610e4c83610c2b565b8060005b83811015610e7d578151610e648882610c4a565b9750610e6f83610c62565b925050600181019050610e50565b5085935050505092915050565b60006020820190508181036000830152610ea48184610e2c565b905092915050565b610eb581610b1d565b82525050565b6000602082019050610ed06000830184610eac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610f7882610f63565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610fab57610faa610f34565b5b60018201905091905056fea164736f6c634300080b000a";

type DiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: DiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondLoupeFacet> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupeFacet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondLoupeFacet {
    return super.attach(address) as DiamondLoupeFacet;
  }
  connect(signer: Signer): DiamondLoupeFacet__factory {
    return super.connect(signer) as DiamondLoupeFacet__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeFacetInterface {
    return new utils.Interface(_abi) as DiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupeFacet {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupeFacet;
  }
}
