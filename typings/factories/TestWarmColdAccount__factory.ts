/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAggregator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "sigTimeRange",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260018055604051610804380380610804833981810160405281019061002991906100e4565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009f82610074565b9050919050565b60006100b182610094565b9050919050565b6100c1816100a6565b81146100cc57600080fd5b50565b6000815190506100de816100b8565b92915050565b6000602082840312156100fa576100f961006f565b5b6000610108848285016100cf565b91505092915050565b6106e4806101206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630825d1fc1461005c5780633ad59dbc1461008c578063c19d93fb146100aa578063f115d40d146100c8578063fb0c2425146100f8575b600080fd5b61007660048036038101906100719190610437565b610116565b60405161008391906104c9565b60405180910390f35b6100946102fb565b6040516100a191906104f3565b60405180910390f35b6100b261030d565b6040516100bf91906104c9565b60405180910390f35b6100e260048036038101906100dd919061050e565b610313565b6040516100ef91906104c9565b60405180910390f35b610100610334565b60405161010d91906104c9565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b815260040161017391906104f3565b6000604051808303818588803b15801561018c57600080fd5b505af11580156101a0573d6000803e3d6000fd5b505050505060018560200135141561022b573073ffffffffffffffffffffffffffffffffffffffff1663fb0c24256103e86040518263ffffffff1660e01b81526004016020604051808303818786fa158015610200573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102259190610550565b506102ef565b6002856020013514156102ee5760008580610120019061024b919061058c565b60009060149261025d939291906105f9565b906102689190610678565b60601c90503073ffffffffffffffffffffffffffffffffffffffff1663f115d40d6103e8836040518363ffffffff1660e01b81526004016102a991906104f3565b6020604051808303818786fa1580156102c6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102eb9190610550565b50505b5b60009050949350505050565b6000610305610334565b506000905090565b60015481565b60008173ffffffffffffffffffffffffffffffffffffffff163b9050919050565b6000600154905090565b600080fd5b600080fd5b600080fd5b6000610160828403121561036457610363610348565b5b81905092915050565b6000819050919050565b6103808161036d565b811461038b57600080fd5b50565b60008135905061039d81610377565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ce826103a3565b9050919050565b6103de816103c3565b81146103e957600080fd5b50565b6000813590506103fb816103d5565b92915050565b6000819050919050565b61041481610401565b811461041f57600080fd5b50565b6000813590506104318161040b565b92915050565b600080600080608085870312156104515761045061033e565b5b600085013567ffffffffffffffff81111561046f5761046e610343565b5b61047b8782880161034d565b945050602061048c8782880161038e565b935050604061049d878288016103ec565b92505060606104ae87828801610422565b91505092959194509250565b6104c381610401565b82525050565b60006020820190506104de60008301846104ba565b92915050565b6104ed816103c3565b82525050565b600060208201905061050860008301846104e4565b92915050565b6000602082840312156105245761052361033e565b5b6000610532848285016103ec565b91505092915050565b60008151905061054a8161040b565b92915050565b6000602082840312156105665761056561033e565b5b60006105748482850161053b565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126105a9576105a861057d565b5b80840192508235915067ffffffffffffffff8211156105cb576105ca610582565b5b6020830192506001820236038313156105e7576105e6610587565b5b509250929050565b600080fd5b600080fd5b6000808585111561060d5761060c6105ef565b5b8386111561061e5761061d6105f4565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b60006106848383610634565b8261068f813561063f565b925060148210156106cf576106ca7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360140360080261066b565b831692505b50509291505056fea164736f6c634300080c000a";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _ep: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<TestWarmColdAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<TestWarmColdAccount>;
  }
  getDeployTransaction(
    _ep: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  attach(address: string): TestWarmColdAccount {
    return super.attach(address) as TestWarmColdAccount;
  }
  connect(signer: Signer): TestWarmColdAccount__factory {
    return super.connect(signer) as TestWarmColdAccount__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new utils.Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWarmColdAccount {
    return new Contract(address, _abi, signerOrProvider) as TestWarmColdAccount;
  }
}
