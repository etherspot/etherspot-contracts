/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GatewayRecipientMock,
  GatewayRecipientMockInterface,
} from "../GatewayRecipientMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gateway_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "Context",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7fd4d25d",
        type: "bytes8",
      },
    ],
    name: "c_7fd4d25d",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__d5c463c2",
        type: "bytes8",
      },
    ],
    name: "c_d5c463c2",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7fd4d25d",
        type: "bytes8",
      },
    ],
    name: "c_false7fd4d25d",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__d5c463c2",
        type: "bytes8",
      },
    ],
    name: "c_falsed5c463c2",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__7fd4d25d",
        type: "bytes8",
      },
    ],
    name: "c_true7fd4d25d",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes8",
        name: "c__d5c463c2",
        type: "bytes8",
      },
    ],
    name: "c_trued5c463c2",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "emitContext",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gateway",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c62380380610c628339818101604052602081101561003357600080fd5b810190808051906020019092919050505061005e679c44b4ea1e8a0c2d60c01b6100c160201b60201c565b61007867a19ece3ca40701cb60c01b6100c460201b60201c565b61009267ac605085e693aaa760c01b6100c460201b60201c565b6100ac67f1328b79d09a0dc060c01b6100c460201b60201c565b6100bb816100c760201b60201c565b5061013e565b50565b50565b6100e16746882e2c11ed46c160c01b6100c160201b60201c565b6100fb676c36f6d39584376f60c01b6100c160201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b158061014d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633ca3acf51161005b5780633ca3acf5146101b257806350aa3dff146102115780636d0e778014610270578063c369d5fe1461027a57610088565b80630c4b1a171461008d5780630dacdff0146100d6578063116191b61461011f57806321a5f5da14610153575b600080fd5b6100d4600480360360208110156100a357600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506102d9565b005b61011d600480360360208110156100ec57600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506102dc565b005b6101276102df565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61019a6004803603602081101561016957600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610303565b60405180821515815260200191505060405180910390f35b6101f9600480360360208110156101c857600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061030e565b60405180821515815260200191505060405180910390f35b6102586004803603602081101561022757600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610319565b60405180821515815260200191505060405180910390f35b610278610320565b005b6102c16004803603602081101561029057600080fd5b81019080803577ffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610411565b60405180821515815260200191505060405180910390f35b50565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060019050919050565b600060019050919050565b6000919050565b610334671d4970ea05c61ee160c01b6102dc565b61034867fc3d1032791b86fd60c01b6102dc565b61035c67d15ea56f3d2bdac260c01b6102dc565b7f1b86fe2ccdffbf1a2c71e8eca215369d319e2c66c438a84d666fb2536ffbfb3a610385610418565b61038d610465565b6103956104b2565b604051808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060405180910390a1565b6000919050565b600061042e67710f16ba5255f93760c01b6102d9565b61044267dec5e520002c7ac460c01b6102d9565b61045667fcbf731da3f60f0860c01b6102d9565b61046060286105d9565b905090565b600061047b6735fc4b49b81d26ff60c01b6102d9565b61048f6707c3e9a68b19d1d460c01b6102d9565b6104a367ef5ed5953d7f429160c01b6102d9565b6104ad60146105d9565b905090565b3660006104c96762c92b8437e448e460c01b6102d9565b6104dd6722756e1bd65c62c060c01b6102d9565b6104f167e6f5cb82e4e05f9e60c01b6102d9565b366000610508675960da13a0bd3a1f60c01b6102d9565b61051c6778b295f948a843c460c01b6102d9565b61052461076f565b156105755761053d67498f47f2e03caa5260c01b6102d9565b61055167c52138e0b144feb260c01b6102d9565b60003660009060286000369050039261056c93929190610ab3565b915091506105a5565b6105896730ce8223263aa69f60c01b6102d9565b61059d67ffbc26d69fb533f460c01b6102d9565b600036915091505b6105b9674c3ecad32216fc8160c01b6102d9565b6105cd67aa70067aa56721c860c01b6102d9565b81819350935050509091565b60006105ef671937c50f8ee6bd7560c01b6102d9565b610603677f2470542d8b582160c01b6102d9565b6106176772cd915f3c4fd20860c01b6102d9565b600061062d6735924b777f91851660c01b6102d9565b610641677be5caa912ec003360c01b6102d9565b61064961076f565b156107125761066267c7d00f041d47a82e60c01b6102d9565b6106766761b9edb74a77024f60c01b6102d9565b61068a67adada370c372082760c01b6102d9565b60008360003690500390506106a96774ad170529f9b0c460c01b6102d9565b61070a600036839060148501926106c293929190610ab3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061094e565b91505061073e565b61072667aa51540a2b49838f60c01b6102d9565b61073a67d956dbe7e93a8e5560c01b6102d9565b3390505b61075267f02d02d05627bfd960c01b6102d9565b610766675181fa575ff3293260c01b6102d9565b80915050919050565b6000610785670b25216ab3d4433960c01b6102d9565b61079967e7b20be58871ffb360c01b6102d9565b6107ad673c460f0ecb611b1d60c01b6102d9565b60006107c3678461386c4c1e838a60c01b6102d9565b6107d7676a84a32d8b43a81660c01b6102d9565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561090a5761083f670c955600d9acf0ae60c01b6102d9565b61085367b95d47fbc23eb84c60c01b6102d9565b610867674edf613cbbc70c6b60c01b6102d9565b61087b67d2db6cfd17ba402f60c01b6102d9565b602c600036905010156108d9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ae76022913960400191505060405180910390fd5b6108ed67e643a98589414bb060c01b6102d9565b610901673b6204683fe0453c60c01b6102d9565b6001905061091f565b61091e674a33ca0e31062c0760c01b6102d9565b5b61093367621001fad667c71760c01b6102d9565b610947677097454f18ff0f0260c01b6102d9565b8091505090565b6000610964671f96e198dbf0a1c860c01b610ab0565b610978675e7b9bf5baedcd4760c01b610ab0565b61098c67f5b1e5612b820b8c60c01b610ab0565b60006109a2677d45556fe872c97c60c01b610ab0565b6109b667e6ad8335897552fd60c01b610ab0565b6109ca679bd4247e4a5c097060c01b610ab0565b6014835114610a41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f42797465734c69623a20696e76616c69642064617461206c656e67746800000081525060200191505060405180910390fd5b610a5567e246a942ede40e8660c01b610ab0565b610a6967949d489fd89d5f7d60c01b610ab0565b6c010000000000000000000000006020840151049050610a9367ad8d88c2f58cd52d60c01b610ab0565b610aa767aec607b0982999cb60c01b610ab0565b80915050919050565b50565b60008085851115610ac357600080fd5b83861115610ad057600080fd5b600185028301915084860390509450949250505056fe47617465776179526563697069656e743a20696e76616c6964206d73672e64617461a164736f6c634300060c000a";

type GatewayRecipientMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GatewayRecipientMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GatewayRecipientMock__factory extends ContractFactory {
  constructor(...args: GatewayRecipientMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    gateway_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GatewayRecipientMock> {
    return super.deploy(
      gateway_,
      overrides || {}
    ) as Promise<GatewayRecipientMock>;
  }
  getDeployTransaction(
    gateway_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(gateway_, overrides || {});
  }
  attach(address: string): GatewayRecipientMock {
    return super.attach(address) as GatewayRecipientMock;
  }
  connect(signer: Signer): GatewayRecipientMock__factory {
    return super.connect(signer) as GatewayRecipientMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GatewayRecipientMockInterface {
    return new utils.Interface(_abi) as GatewayRecipientMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GatewayRecipientMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GatewayRecipientMock;
  }
}
