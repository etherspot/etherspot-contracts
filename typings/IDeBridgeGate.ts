/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ChainSupportInfoStruct = {
  fixedNativeFee: BigNumberish;
  isSupported: boolean;
  transferFeeBps: BigNumberish;
};

export type ChainSupportInfoStructOutput = [BigNumber, boolean, number] & {
  fixedNativeFee: BigNumber;
  isSupported: boolean;
  transferFeeBps: number;
};

export type FeeParamsStruct = {
  receivedAmount: BigNumberish;
  fixFee: BigNumberish;
  transferFee: BigNumberish;
  useAssetFee: boolean;
  isNativeToken: boolean;
};

export type FeeParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean
] & {
  receivedAmount: BigNumber;
  fixFee: BigNumber;
  transferFee: BigNumber;
  useAssetFee: boolean;
  isNativeToken: boolean;
};

export interface IDeBridgeGateInterface extends utils.Interface {
  functions: {
    "claim(bytes32,uint256,uint256,address,uint256,bytes,bytes)": FunctionFragment;
    "flash(address,address,uint256,bytes)": FunctionFragment;
    "getDebridgeChainAssetFixedFee(bytes32,uint256)": FunctionFragment;
    "getDefiAvaliableReserves(address)": FunctionFragment;
    "getNativeInfo(address)": FunctionFragment;
    "isSubmissionUsed(bytes32)": FunctionFragment;
    "requestReserves(address,uint256)": FunctionFragment;
    "returnReserves(address,uint256)": FunctionFragment;
    "send(address,uint256,uint256,bytes,bytes,bool,uint32,bytes)": FunctionFragment;
    "withdrawFee(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeChainAssetFixedFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiAvaliableReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeChainAssetFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiAvaliableReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AutoRequestExecuted(bytes32,bool,address)": EventFragment;
    "Blocked(bytes32)": EventFragment;
    "CallProxyUpdated(address)": EventFragment;
    "ChainSupportUpdated(uint256,bool,bool)": EventFragment;
    "ChainsSupportUpdated(uint256,tuple,bool)": EventFragment;
    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)": EventFragment;
    "FixedNativeFeeAutoUpdated(uint256)": EventFragment;
    "FixedNativeFeeUpdated(uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "MonitoringClaimEvent(bytes32,uint256,uint256)": EventFragment;
    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)": EventFragment;
    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)": EventFragment;
    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)": EventFragment;
    "Unblocked(bytes32)": EventFragment;
    "WithdrawnFee(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoRequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainsSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeAutoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringSendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unblocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFee"): EventFragment;
}

export type AutoRequestExecutedEvent = TypedEvent<
  [string, boolean, string],
  { submissionId: string; success: boolean; callProxy: string }
>;

export type AutoRequestExecutedEventFilter =
  TypedEventFilter<AutoRequestExecutedEvent>;

export type BlockedEvent = TypedEvent<[string], { submissionId: string }>;

export type BlockedEventFilter = TypedEventFilter<BlockedEvent>;

export type CallProxyUpdatedEvent = TypedEvent<[string], { callProxy: string }>;

export type CallProxyUpdatedEventFilter =
  TypedEventFilter<CallProxyUpdatedEvent>;

export type ChainSupportUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean],
  { chainId: BigNumber; isSupported: boolean; isChainFrom: boolean }
>;

export type ChainSupportUpdatedEventFilter =
  TypedEventFilter<ChainSupportUpdatedEvent>;

export type ChainsSupportUpdatedEvent = TypedEvent<
  [BigNumber, ChainSupportInfoStructOutput, boolean],
  {
    chainIds: BigNumber;
    chainSupportInfo: ChainSupportInfoStructOutput;
    isChainFrom: boolean;
  }
>;

export type ChainsSupportUpdatedEventFilter =
  TypedEventFilter<ChainsSupportUpdatedEvent>;

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, boolean],
  {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdFrom: BigNumber;
    autoParams: string;
    isNativeToken: boolean;
  }
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export type FixedNativeFeeAutoUpdatedEvent = TypedEvent<
  [BigNumber],
  { globalFixedNativeFee: BigNumber }
>;

export type FixedNativeFeeAutoUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeAutoUpdatedEvent>;

export type FixedNativeFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { globalFixedNativeFee: BigNumber; globalTransferFeeBps: BigNumber }
>;

export type FixedNativeFeeUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeUpdatedEvent>;

export type FlashEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    sender: string;
    tokenAddress: string;
    receiver: string;
    amount: BigNumber;
    paid: BigNumber;
  }
>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export type MonitoringClaimEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    submissionId: string;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type MonitoringClaimEventEventFilter =
  TypedEventFilter<MonitoringClaimEventEvent>;

export type MonitoringSendEventEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    submissionId: string;
    nonce: BigNumber;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type MonitoringSendEventEventFilter =
  TypedEventFilter<MonitoringSendEventEvent>;

export type PairAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number],
  {
    debridgeId: string;
    tokenAddress: string;
    nativeAddress: string;
    nativeChainId: BigNumber;
    maxAmount: BigNumber;
    minReservesBps: number;
  }
>;

export type PairAddedEventFilter = TypedEventFilter<PairAddedEvent>;

export type SentEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    FeeParamsStructOutput,
    string,
    string
  ],
  {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdTo: BigNumber;
    referralCode: number;
    feeParams: FeeParamsStructOutput;
    autoParams: string;
    nativeSender: string;
  }
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export type UnblockedEvent = TypedEvent<[string], { submissionId: string }>;

export type UnblockedEventFilter = TypedEventFilter<UnblockedEvent>;

export type WithdrawnFeeEvent = TypedEvent<
  [string, BigNumber],
  { debridgeId: string; fee: BigNumber }
>;

export type WithdrawnFeeEventFilter = TypedEventFilter<WithdrawnFeeEvent>;

export interface IDeBridgeGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDeBridgeGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    _debridgeId: BytesLike,
    _amount: BigNumberish,
    _chainIdFrom: BigNumberish,
    _receiver: string,
    _nonce: BigNumberish,
    _signatures: BytesLike,
    _autoParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flash(
    _tokenAddress: string,
    _receiver: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDebridgeChainAssetFixedFee(
    _debridgeId: BytesLike,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefiAvaliableReserves(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNativeInfo(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSubmissionUsed(
    submissionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    _tokenAddress: string,
    _amount: BigNumberish,
    _chainIdTo: BigNumberish,
    _receiver: BytesLike,
    _permit: BytesLike,
    _useAssetFee: boolean,
    _referralCode: BigNumberish,
    _autoParams: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _debridgeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutoRequestExecuted(bytes32,bool,address)"(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;
    AutoRequestExecuted(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;

    "Blocked(bytes32)"(submissionId?: null): BlockedEventFilter;
    Blocked(submissionId?: null): BlockedEventFilter;

    "CallProxyUpdated(address)"(callProxy?: null): CallProxyUpdatedEventFilter;
    CallProxyUpdated(callProxy?: null): CallProxyUpdatedEventFilter;

    "ChainSupportUpdated(uint256,bool,bool)"(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;
    ChainSupportUpdated(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;

    "ChainsSupportUpdated(uint256,tuple,bool)"(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;
    ChainsSupportUpdated(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;

    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;
    Claimed(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;

    "FixedNativeFeeAutoUpdated(uint256)"(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;
    FixedNativeFeeAutoUpdated(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;

    "FixedNativeFeeUpdated(uint256,uint256)"(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;
    FixedNativeFeeUpdated(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;

    "Flash(address,address,address,uint256,uint256)"(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;
    Flash(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;

    "MonitoringClaimEvent(bytes32,uint256,uint256)"(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;
    MonitoringClaimEvent(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;

    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)"(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;
    MonitoringSendEvent(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;

    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)"(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;
    PairAdded(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;

    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;
    Sent(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;

    "Unblocked(bytes32)"(submissionId?: null): UnblockedEventFilter;
    Unblocked(submissionId?: null): UnblockedEventFilter;

    "WithdrawnFee(bytes32,uint256)"(
      debridgeId?: null,
      fee?: null
    ): WithdrawnFeeEventFilter;
    WithdrawnFee(debridgeId?: null, fee?: null): WithdrawnFeeEventFilter;
  };

  estimateGas: {
    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
