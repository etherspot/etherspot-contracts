/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ChainIdConfigStruct = {
  chainId: BigNumberish;
  layerZeroChainId: BigNumberish;
};

export type ChainIdConfigStructOutput = [BigNumber, number] & {
  chainId: BigNumber;
  layerZeroChainId: number;
};

export type StargateETHDataStruct = {
  amount: BigNumberish;
  dstChainId: BigNumberish;
  to: string;
  slippage: BigNumberish;
};

export type StargateETHDataStructOutput = [
  BigNumber,
  number,
  string,
  number
] & { amount: BigNumber; dstChainId: number; to: string; slippage: number };

export type StargateDataStruct = {
  amount: BigNumberish;
  bridgeToken: string;
  dstChainId: BigNumberish;
  srcPoolId: BigNumberish;
  dstPoolId: BigNumberish;
  to: string;
  slippage: BigNumberish;
  destStargateComposed: string;
};

export type StargateDataStructOutput = [
  BigNumber,
  string,
  number,
  number,
  number,
  string,
  number,
  string
] & {
  amount: BigNumber;
  bridgeToken: string;
  dstChainId: number;
  srcPoolId: number;
  dstPoolId: number;
  to: string;
  slippage: number;
  destStargateComposed: string;
};

export interface StargateFacetInterface extends utils.Interface {
  functions: {
    "getLzChainId(uint256)": FunctionFragment;
    "initStargate(address,address,uint16,(uint256,uint16)[])": FunctionFragment;
    "setLzChainId(uint256,uint16)": FunctionFragment;
    "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "stargateETHTransfer((uint256,uint16,address,uint16))": FunctionFragment;
    "stargateFees((uint256,address,uint16,uint16,uint16,address,uint16,address),address)": FunctionFragment;
    "stargateTokenTransfer((uint256,address,uint16,uint16,uint16,address,uint16,address))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLzChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initStargate",
    values: [string, string, BigNumberish, ChainIdConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLzChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sgReceive",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateETHTransfer",
    values: [StargateETHDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateFees",
    values: [StargateDataStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateTokenTransfer",
    values: [StargateDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLzChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initStargate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLzChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sgReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stargateETHTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateTokenTransfer",
    data: BytesLike
  ): Result;

  events: {
    "LzChainIdSet(uint256,uint16)": EventFragment;
    "StargateETHSwap(address,address,uint256,uint16)": EventFragment;
    "StargateInitialized(address,address,uint16)": EventFragment;
    "StargateReceivedOnDestination(address,uint256)": EventFragment;
    "StargateTokenSwap(address,address,address,uint256,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LzChainIdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StargateETHSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StargateInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StargateReceivedOnDestination"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StargateTokenSwap"): EventFragment;
}

export type LzChainIdSetEvent = TypedEvent<
  [BigNumber, number],
  { chainId: BigNumber; lzChainId: number }
>;

export type LzChainIdSetEventFilter = TypedEventFilter<LzChainIdSetEvent>;

export type StargateETHSwapEvent = TypedEvent<
  [string, string, BigNumber, number],
  { from: string; to: string; amount: BigNumber; chainIdTo: number }
>;

export type StargateETHSwapEventFilter = TypedEventFilter<StargateETHSwapEvent>;

export type StargateInitializedEvent = TypedEvent<
  [string, string, number],
  { stargateRouter: string; stargateETHRouter: string; chainId: number }
>;

export type StargateInitializedEventFilter =
  TypedEventFilter<StargateInitializedEvent>;

export type StargateReceivedOnDestinationEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type StargateReceivedOnDestinationEventFilter =
  TypedEventFilter<StargateReceivedOnDestinationEvent>;

export type StargateTokenSwapEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  {
    fromToken: string;
    from: string;
    to: string;
    amount: BigNumber;
    chainIdTo: number;
  }
>;

export type StargateTokenSwapEventFilter =
  TypedEventFilter<StargateTokenSwapEvent>;

export interface StargateFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLzChainId(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initStargate(
      _stargateRouter: string,
      _stargateEthRouter: string,
      _chainId: BigNumberish,
      _chainIdConfigs: ChainIdConfigStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLzChainId(
      _chainId: BigNumberish,
      _lzChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      _amountLD: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stargateETHTransfer(
      _data: StargateETHDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stargateFees(
      _data: StargateDataStruct,
      _router: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stargateTokenTransfer(
      _data: StargateDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getLzChainId(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  initStargate(
    _stargateRouter: string,
    _stargateEthRouter: string,
    _chainId: BigNumberish,
    _chainIdConfigs: ChainIdConfigStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLzChainId(
    _chainId: BigNumberish,
    _lzChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sgReceive(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    _token: string,
    _amountLD: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stargateETHTransfer(
    _data: StargateETHDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stargateFees(
    _data: StargateDataStruct,
    _router: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stargateTokenTransfer(
    _data: StargateDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getLzChainId(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initStargate(
      _stargateRouter: string,
      _stargateEthRouter: string,
      _chainId: BigNumberish,
      _chainIdConfigs: ChainIdConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLzChainId(
      _chainId: BigNumberish,
      _lzChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      _amountLD: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateETHTransfer(
      _data: StargateETHDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateFees(
      _data: StargateDataStruct,
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stargateTokenTransfer(
      _data: StargateDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LzChainIdSet(uint256,uint16)"(
      chainId?: null,
      lzChainId?: null
    ): LzChainIdSetEventFilter;
    LzChainIdSet(chainId?: null, lzChainId?: null): LzChainIdSetEventFilter;

    "StargateETHSwap(address,address,uint256,uint16)"(
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): StargateETHSwapEventFilter;
    StargateETHSwap(
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): StargateETHSwapEventFilter;

    "StargateInitialized(address,address,uint16)"(
      stargateRouter?: null,
      stargateETHRouter?: null,
      chainId?: null
    ): StargateInitializedEventFilter;
    StargateInitialized(
      stargateRouter?: null,
      stargateETHRouter?: null,
      chainId?: null
    ): StargateInitializedEventFilter;

    "StargateReceivedOnDestination(address,uint256)"(
      token?: null,
      amount?: null
    ): StargateReceivedOnDestinationEventFilter;
    StargateReceivedOnDestination(
      token?: null,
      amount?: null
    ): StargateReceivedOnDestinationEventFilter;

    "StargateTokenSwap(address,address,address,uint256,uint16)"(
      fromToken?: null,
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): StargateTokenSwapEventFilter;
    StargateTokenSwap(
      fromToken?: null,
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): StargateTokenSwapEventFilter;
  };

  estimateGas: {
    getLzChainId(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initStargate(
      _stargateRouter: string,
      _stargateEthRouter: string,
      _chainId: BigNumberish,
      _chainIdConfigs: ChainIdConfigStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLzChainId(
      _chainId: BigNumberish,
      _lzChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      _amountLD: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stargateETHTransfer(
      _data: StargateETHDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stargateFees(
      _data: StargateDataStruct,
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stargateTokenTransfer(
      _data: StargateDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLzChainId(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initStargate(
      _stargateRouter: string,
      _stargateEthRouter: string,
      _chainId: BigNumberish,
      _chainIdConfigs: ChainIdConfigStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLzChainId(
      _chainId: BigNumberish,
      _lzChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      _amountLD: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stargateETHTransfer(
      _data: StargateETHDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stargateFees(
      _data: StargateDataStruct,
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stargateTokenTransfer(
      _data: StargateDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
