/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StargateFacetInterface extends utils.Interface {
  functions: {
    "bridgeTokensStargate(address,address,uint256,uint16)": FunctionFragment;
    "initializeStargate(address,uint16)": FunctionFragment;
    "setCrossChainRouter(uint16,address)": FunctionFragment;
    "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "updateSlippageTolerance(uint256)": FunctionFragment;
    "updateStargateAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bridgeTokensStargate",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStargate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrossChainRouter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sgReceive",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSlippageTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStargateAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeTokensStargate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeStargate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCrossChainRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sgReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSlippageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStargateAddress",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedOnDestination(address,uint256,uint16)": EventFragment;
    "StargateInitialized(address,uint16)": EventFragment;
    "TransferStarted(string,address,address,address,uint256,uint16)": EventFragment;
    "UpdatedSlippageTolerance(uint256)": EventFragment;
    "UpdatedStargateAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedOnDestination"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StargateInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedSlippageTolerance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedStargateAddress"): EventFragment;
}

export type ReceivedOnDestinationEvent = TypedEvent<
  [string, BigNumber, number],
  { token: string; amount: BigNumber; chainId: number }
>;

export type ReceivedOnDestinationEventFilter =
  TypedEventFilter<ReceivedOnDestinationEvent>;

export type StargateInitializedEvent = TypedEvent<
  [string, number],
  { stargate: string; chainId: number }
>;

export type StargateInitializedEventFilter =
  TypedEventFilter<StargateInitializedEvent>;

export type TransferStartedEvent = TypedEvent<
  [string, string, string, string, BigNumber, number],
  {
    bridgeUsed: string;
    tokenAddress: string;
    from: string;
    to: string;
    amount: BigNumber;
    chainIdTo: number;
  }
>;

export type TransferStartedEventFilter = TypedEventFilter<TransferStartedEvent>;

export type UpdatedSlippageToleranceEvent = TypedEvent<
  [BigNumber],
  { newSlippage: BigNumber }
>;

export type UpdatedSlippageToleranceEventFilter =
  TypedEventFilter<UpdatedSlippageToleranceEvent>;

export type UpdatedStargateAddressEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type UpdatedStargateAddressEventFilter =
  TypedEventFilter<UpdatedStargateAddressEvent>;

export interface StargateFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeTokensStargate(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _destChain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeStargate(
      _stargate: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossChainRouter(
      _chainId: BigNumberish,
      _crossRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sgReceive(
      _chainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSlippageTolerance(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStargateAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeTokensStargate(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _destChain: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeStargate(
    _stargate: string,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossChainRouter(
    _chainId: BigNumberish,
    _crossRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sgReceive(
    _chainId: BigNumberish,
    _srcAddress: BytesLike,
    _nonce: BigNumberish,
    _token: string,
    amountLD: BigNumberish,
    payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSlippageTolerance(
    _newSlippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStargateAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeTokensStargate(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _destChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeStargate(
      _stargate: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrossChainRouter(
      _chainId: BigNumberish,
      _crossRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sgReceive(
      _chainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSlippageTolerance(
      _newSlippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStargateAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedOnDestination(address,uint256,uint16)"(
      token?: null,
      amount?: null,
      chainId?: null
    ): ReceivedOnDestinationEventFilter;
    ReceivedOnDestination(
      token?: null,
      amount?: null,
      chainId?: null
    ): ReceivedOnDestinationEventFilter;

    "StargateInitialized(address,uint16)"(
      stargate?: null,
      chainId?: null
    ): StargateInitializedEventFilter;
    StargateInitialized(
      stargate?: null,
      chainId?: null
    ): StargateInitializedEventFilter;

    "TransferStarted(string,address,address,address,uint256,uint16)"(
      bridgeUsed?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): TransferStartedEventFilter;
    TransferStarted(
      bridgeUsed?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      chainIdTo?: null
    ): TransferStartedEventFilter;

    "UpdatedSlippageTolerance(uint256)"(
      newSlippage?: null
    ): UpdatedSlippageToleranceEventFilter;
    UpdatedSlippageTolerance(
      newSlippage?: null
    ): UpdatedSlippageToleranceEventFilter;

    "UpdatedStargateAddress(address)"(
      newAddress?: null
    ): UpdatedStargateAddressEventFilter;
    UpdatedStargateAddress(
      newAddress?: null
    ): UpdatedStargateAddressEventFilter;
  };

  estimateGas: {
    bridgeTokensStargate(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _destChain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeStargate(
      _stargate: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossChainRouter(
      _chainId: BigNumberish,
      _crossRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sgReceive(
      _chainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSlippageTolerance(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStargateAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeTokensStargate(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _destChain: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeStargate(
      _stargate: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossChainRouter(
      _chainId: BigNumberish,
      _crossRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sgReceive(
      _chainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSlippageTolerance(
      _newSlippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStargateAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
