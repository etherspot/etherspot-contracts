/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type TokenIdStruct = { domain: BigNumberish; id: BytesLike };

export type TokenIdStructOutput = [number, string] & {
  domain: number;
  id: string;
};

export type TransferInfoStruct = {
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  canonicalDomain: BigNumberish;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: BytesLike;
  slippage: BigNumberish;
  originSender: string;
  bridgedAmt: BigNumberish;
  normalizedIn: BigNumberish;
  nonce: BigNumberish;
  canonicalId: BytesLike;
};

export type TransferInfoStructOutput = [
  number,
  number,
  number,
  string,
  string,
  boolean,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  originDomain: number;
  destinationDomain: number;
  canonicalDomain: number;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: BigNumber;
  originSender: string;
  bridgedAmt: BigNumber;
  normalizedIn: BigNumber;
  nonce: BigNumber;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: string[];
  routerSignatures: BytesLike[];
  sequencer: string;
  sequencerSignature: BytesLike;
};

export type ExecuteArgsStructOutput = [
  TransferInfoStructOutput,
  string[],
  string[],
  string,
  string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type SwapStruct = {
  key: BytesLike;
  initialA: BigNumberish;
  futureA: BigNumberish;
  initialATime: BigNumberish;
  futureATime: BigNumberish;
  swapFee: BigNumberish;
  adminFee: BigNumberish;
  lpToken: string;
  pooledTokens: string[];
  tokenPrecisionMultipliers: BigNumberish[];
  balances: BigNumberish[];
  adminFees: BigNumberish[];
  disabled: boolean;
  removeTime: BigNumberish;
};

export type SwapStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber[],
  boolean,
  BigNumber
] & {
  key: string;
  initialA: BigNumber;
  futureA: BigNumber;
  initialATime: BigNumber;
  futureATime: BigNumber;
  swapFee: BigNumber;
  adminFee: BigNumber;
  lpToken: string;
  pooledTokens: string[];
  tokenPrecisionMultipliers: BigNumber[];
  balances: BigNumber[];
  adminFees: BigNumber[];
  disabled: boolean;
  removeTime: BigNumber;
};

export interface IConnextInterface extends utils.Interface {
  functions: {
    "LIQUIDITY_FEE_DENOMINATOR()": FunctionFragment;
    "LIQUIDITY_FEE_NUMERATOR()": FunctionFragment;
    "aavePool()": FunctionFragment;
    "aavePortalFee()": FunctionFragment;
    "acceptProposedOwner()": FunctionFragment;
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "addConnextion(uint32,address)": FunctionFragment;
    "addRelayer(address)": FunctionFragment;
    "addRouterLiquidity(uint256,address)": FunctionFragment;
    "addRouterLiquidityFor(uint256,address,address)": FunctionFragment;
    "addSequencer(address)": FunctionFragment;
    "addStableSwapPool((uint32,bytes32),address)": FunctionFragment;
    "addSwapLiquidity(bytes32,uint256[],uint256,uint256)": FunctionFragment;
    "adoptedToCanonical(address)": FunctionFragment;
    "adoptedToLocalExternalPools((uint32,bytes32))": FunctionFragment;
    "approveRouter(address)": FunctionFragment;
    "approveRouterForPortal(address)": FunctionFragment;
    "approvedAssets(bytes32)": FunctionFragment;
    "approvedRelayers(address)": FunctionFragment;
    "approvedSequencers(address)": FunctionFragment;
    "bumpTransfer(bytes32)": FunctionFragment;
    "calculateRemoveSwapLiquidity(bytes32,uint256)": FunctionFragment;
    "calculateRemoveSwapLiquidityOneToken(bytes32,uint256,uint8)": FunctionFragment;
    "calculateSwap(bytes32,uint8,uint8,uint256)": FunctionFragment;
    "calculateSwapTokenAmount(bytes32,uint256[],bool)": FunctionFragment;
    "canonicalToAdopted(bytes32)": FunctionFragment;
    "canonicalToRepresentation(bytes32)": FunctionFragment;
    "delay()": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "domain()": FunctionFragment;
    "enrollCustom(uint32,bytes32,address)": FunctionFragment;
    "enrollRemoteRouter(uint32,bytes32)": FunctionFragment;
    "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": FunctionFragment;
    "getAavePortalDebt(bytes32)": FunctionFragment;
    "getAavePortalFeeDebt(bytes32)": FunctionFragment;
    "getAcceptanceTime((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "getCustodiedAmount(bytes32)": FunctionFragment;
    "getLocalAndAdoptedToken(bytes32,uint32)": FunctionFragment;
    "getProposedRouterOwner(address)": FunctionFragment;
    "getProposedRouterOwnerTimestamp(address)": FunctionFragment;
    "getRouterApproval(address)": FunctionFragment;
    "getRouterApprovalForPortal(address)": FunctionFragment;
    "getRouterOwner(address)": FunctionFragment;
    "getRouterRecipient(address)": FunctionFragment;
    "getSwapA(bytes32)": FunctionFragment;
    "getSwapAPrecise(bytes32)": FunctionFragment;
    "getSwapAdminBalance(bytes32,uint256)": FunctionFragment;
    "getSwapLPToken(bytes32)": FunctionFragment;
    "getSwapStorage(bytes32)": FunctionFragment;
    "getSwapToken(bytes32,uint8)": FunctionFragment;
    "getSwapTokenBalance(bytes32,uint8)": FunctionFragment;
    "getSwapTokenIndex(bytes32,address)": FunctionFragment;
    "getSwapVirtualPrice(bytes32)": FunctionFragment;
    "getTokenId(address)": FunctionFragment;
    "handle(uint32,uint32,bytes32,bytes)": FunctionFragment;
    "initializeRouter(address,address)": FunctionFragment;
    "initializeSwap(bytes32,address[],uint8[],string,string,uint256,uint256,uint256)": FunctionFragment;
    "lpTokenTargetAddress()": FunctionFragment;
    "maxRoutersPerTransfer()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposeDiamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposeRouterAllowlistRemoval()": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "rampA(bytes32,uint256,uint256)": FunctionFragment;
    "relayerFeeVault()": FunctionFragment;
    "remote(uint32)": FunctionFragment;
    "removeAssetId((uint32,bytes32),address,address)": FunctionFragment;
    "removeRelayer(address)": FunctionFragment;
    "removeRouterAllowlist()": FunctionFragment;
    "removeRouterLiquidity(uint256,address,address)": FunctionFragment;
    "removeRouterLiquidityFor(uint256,address,address,address)": FunctionFragment;
    "removeSequencer(address)": FunctionFragment;
    "removeSwapLiquidity(bytes32,uint256,uint256[],uint256)": FunctionFragment;
    "removeSwapLiquidityImbalance(bytes32,uint256[],uint256,uint256)": FunctionFragment;
    "removeSwapLiquidityOneToken(bytes32,uint256,uint8,uint256,uint256)": FunctionFragment;
    "repayAavePortal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256,uint256)": FunctionFragment;
    "repayAavePortalFor((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256,uint256)": FunctionFragment;
    "representationToCanonical(address)": FunctionFragment;
    "rescindDiamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "routedTransfers(bytes32)": FunctionFragment;
    "routerAllowlistRemoved()": FunctionFragment;
    "routerAllowlistTimestamp()": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "setAavePool(address)": FunctionFragment;
    "setAavePortalFee(uint256)": FunctionFragment;
    "setLiquidityFeeNumerator(uint256)": FunctionFragment;
    "setMaxRoutersPerTransfer(uint256)": FunctionFragment;
    "setRelayerFeeVault(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
    "setSwapAdminFee(bytes32,uint256)": FunctionFragment;
    "setSwapFee(bytes32,uint256)": FunctionFragment;
    "setXAppConnectionManager(address)": FunctionFragment;
    "setupAsset((uint32,bytes32),uint8,string,string,address,address,uint256)": FunctionFragment;
    "setupAssetWithDeployedRepresentation((uint32,bytes32),address,address,address)": FunctionFragment;
    "stopRampA(bytes32)": FunctionFragment;
    "swap(bytes32,uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
    "swapExact(bytes32,uint256,address,address,uint256,uint256)": FunctionFragment;
    "swapExactOut(bytes32,uint256,address,address,uint256,uint256)": FunctionFragment;
    "transferStatus(bytes32)": FunctionFragment;
    "unapproveRouter(address)": FunctionFragment;
    "unapproveRouterForPortal(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDetails((uint32,bytes32),string,string)": FunctionFragment;
    "updateLiquidityCap((uint32,bytes32),uint256)": FunctionFragment;
    "updateLpTokenTarget(address)": FunctionFragment;
    "withdrawSwapAdminFees(bytes32)": FunctionFragment;
    "xAppConnectionManager()": FunctionFragment;
    "xcall(uint32,address,address,address,uint256,uint256,bytes)": FunctionFragment;
    "xcallIntoLocal(uint32,address,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aavePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aavePortalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addConnextion",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "addRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidityFor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSequencer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStableSwapPool",
    values: [TokenIdStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSwapLiquidity",
    values: [BytesLike, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToCanonical",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToLocalExternalPools",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRouterForPortal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRelayers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSequencers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveSwapLiquidity",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemoveSwapLiquidityOneToken",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwap",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapTokenAmount",
    values: [BytesLike, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalToAdopted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalToRepresentation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enrollCustom",
    values: [BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouter",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceReceiveLocal",
    values: [TransferInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUpdateSlippage",
    values: [TransferInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePortalDebt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePortalFeeDebt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcceptanceTime",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCustodiedAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLocalAndAdoptedToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwnerTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApproval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApprovalForPortal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getSwapA", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSwapAPrecise",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAdminBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapLPToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapStorage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToken",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapTokenBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapTokenIndex",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapVirtualPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRouter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSwap",
    values: [
      BytesLike,
      string[],
      BigNumberish[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenTargetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeDiamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterAllowlistRemoval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rampA",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [TokenIdStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterAllowlist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidity",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidityFor",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSequencer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidity",
    values: [BytesLike, BigNumberish, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidityImbalance",
    values: [BytesLike, BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSwapLiquidityOneToken",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAavePortal",
    values: [TransferInfoStruct, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAavePortalFor",
    values: [TransferInfoStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "representationToCanonical",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescindDiamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistRemoved",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerAllowlistTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setAavePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAavePortalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityFeeNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxRoutersPerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerFeeVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAdminFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setXAppConnectionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAsset",
    values: [
      TokenIdStruct,
      BigNumberish,
      string,
      string,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAssetWithDeployedRepresentation",
    values: [TokenIdStruct, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stopRampA",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unapproveRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unapproveRouterForPortal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDetails",
    values: [TokenIdStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityCap",
    values: [TokenIdStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLpTokenTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSwapAdminFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xcallIntoLocal",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aavePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aavePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConnextion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStableSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToCanonical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToLocalExternalPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRouterForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemoveSwapLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalToAdopted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalToRepresentation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enrollCustom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceReceiveLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUpdateSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePortalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePortalFeeDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcceptanceTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCustodiedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLocalAndAdoptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwnerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApprovalForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAPrecise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAdminBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapVirtualPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenTargetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterAllowlistRemoval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rampA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterAllowlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidityImbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSwapLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAavePortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayAavePortalFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "representationToCanonical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistRemoved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerAllowlistTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAavePortalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityFeeNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerFeeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAdminFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setXAppConnectionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupAssetWithDeployedRepresentation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopRampA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unapproveRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unapproveRouterForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLpTokenTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSwapAdminFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xcallIntoLocal",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "DiamondCutProposed(tuple[],address,bytes,uint256)": EventFragment;
    "DiamondCutRescinded(tuple[],address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutRescinded"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type DiamondCutProposedEvent = TypedEvent<
  [FacetCutStructOutput[], string, string, BigNumber],
  {
    _diamondCut: FacetCutStructOutput[];
    _init: string;
    _calldata: string;
    deadline: BigNumber;
  }
>;

export type DiamondCutProposedEventFilter =
  TypedEventFilter<DiamondCutProposedEvent>;

export type DiamondCutRescindedEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutRescindedEventFilter =
  TypedEventFilter<DiamondCutRescindedEvent>;

export interface IConnext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    aavePool(overrides?: CallOverrides): Promise<[string]>;

    aavePortalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<[TokenIdStructOutput]>;

    "adoptedToLocalExternalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "adoptedToLocalExternalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canonicalToRepresentation(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canonicalToRepresentation((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domain(overrides?: CallOverrides): Promise<[BigNumber]>;

    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAcceptanceTime(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCustodiedAmount(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLocalAndAdoptedToken(
      _id: BytesLike,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SwapStructOutput]>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenId(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<[TokenIdStructOutput]>;

    handle(
      _origin: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeRouter(
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lpTokenTargetAddress(overrides?: CallOverrides): Promise<[string]>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposeDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayerFeeVault(overrides?: CallOverrides): Promise<[string]>;

    remote(_domain: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAssetId(bytes32,address,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayAavePortal(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayAavePortalFor(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    representationToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<[TokenIdStructOutput]>;

    rescindDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<[boolean]>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayerFeeVault(
      _relayerFeeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: BigNumberish,
      _representationName: string,
      _representationSymbol: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferStatus(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    unapproveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLpTokenTarget(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<[string]>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xcallIntoLocal(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

  aavePool(overrides?: CallOverrides): Promise<string>;

  aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

  acceptProposedOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptProposedRouterOwner(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addConnextion(
    _domain: BigNumberish,
    _connext: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouterLiquidity(
    _amount: BigNumberish,
    _local: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouterLiquidityFor(
    _amount: BigNumberish,
    _local: string,
    _router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSequencer(
    _sequencer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStableSwapPool(
    _canonical: TokenIdStruct,
    _stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSwapLiquidity(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    minToMint: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adoptedToCanonical(
    _adopted: string,
    overrides?: CallOverrides
  ): Promise<TokenIdStructOutput>;

  "adoptedToLocalExternalPools((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "adoptedToLocalExternalPools(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  approveRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveRouterForPortal(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approvedAssets(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "approvedAssets((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedRelayers(
    _relayer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvedSequencers(
    _sequencer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bumpTransfer(
    _transferId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateRemoveSwapLiquidity(
    canonicalId: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  calculateRemoveSwapLiquidityOneToken(
    canonicalId: BytesLike,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwap(
    canonicalId: BytesLike,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSwapTokenAmount(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "canonicalToAdopted(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "canonicalToAdopted((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "canonicalToRepresentation(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "canonicalToRepresentation((uint32,bytes32))"(
    _canonical: TokenIdStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domain(overrides?: CallOverrides): Promise<BigNumber>;

  enrollCustom(
    _domain: BigNumberish,
    _id: BytesLike,
    _custom: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enrollRemoteRouter(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _args: ExecuteArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  forceReceiveLocal(
    _params: TransferInfoStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceUpdateSlippage(
    _params: TransferInfoStruct,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAavePortalDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAavePortalFeeDebt(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAcceptanceTime(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCustodiedAmount(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLocalAndAdoptedToken(
    _id: BytesLike,
    _domain: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getProposedRouterOwner(
    _router: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposedRouterOwnerTimestamp(
    _router: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRouterApproval(
    _router: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRouterApprovalForPortal(
    _router: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRouterOwner(_router: string, overrides?: CallOverrides): Promise<string>;

  getRouterRecipient(
    _router: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapA(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapAPrecise(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapAdminBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapLPToken(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapStorage(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<SwapStructOutput>;

  getSwapToken(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSwapTokenBalance(
    canonicalId: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapTokenIndex(
    canonicalId: BytesLike,
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getSwapVirtualPrice(
    canonicalId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenId(
    _candidate: string,
    overrides?: CallOverrides
  ): Promise<TokenIdStructOutput>;

  handle(
    _origin: BigNumberish,
    _nonce: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeRouter(
    owner: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeSwap(
    _canonicalId: BytesLike,
    _pooledTokens: string[],
    decimals: BigNumberish[],
    lpTokenName: string,
    lpTokenSymbol: string,
    _a: BigNumberish,
    _fee: BigNumberish,
    _adminFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lpTokenTargetAddress(overrides?: CallOverrides): Promise<string>;

  maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposeDiamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterAllowlistRemoval(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterOwner(
    router: string,
    proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  rampA(
    canonicalId: BytesLike,
    futureA: BigNumberish,
    futureTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayerFeeVault(overrides?: CallOverrides): Promise<string>;

  remote(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "removeAssetId((uint32,bytes32),address,address)"(
    _canonical: TokenIdStruct,
    _adoptedAssetId: string,
    _representation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAssetId(bytes32,address,address)"(
    _key: BytesLike,
    _adoptedAssetId: string,
    _representation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayer(
    _relayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterAllowlist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterLiquidity(
    _amount: BigNumberish,
    _local: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouterLiquidityFor(
    _amount: BigNumberish,
    _local: string,
    _to: string,
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSequencer(
    _sequencer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidity(
    canonicalId: BytesLike,
    amount: BigNumberish,
    minAmounts: BigNumberish[],
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidityImbalance(
    canonicalId: BytesLike,
    amounts: BigNumberish[],
    maxBurnAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeSwapLiquidityOneToken(
    canonicalId: BytesLike,
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    minAmount: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayAavePortal(
    _params: TransferInfoStruct,
    _backingAmount: BigNumberish,
    _feeAmount: BigNumberish,
    _maxIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayAavePortalFor(
    _params: TransferInfoStruct,
    _backingAmount: BigNumberish,
    _feeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  representationToCanonical(
    _adopted: string,
    overrides?: CallOverrides
  ): Promise<TokenIdStructOutput>;

  rescindDiamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routedTransfers(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string[]>;

  routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

  routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  routerBalances(
    _router: string,
    _asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAavePool(
    _aavePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAavePortalFee(
    _aavePortalFeeNumerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityFeeNumerator(
    _numerator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxRoutersPerTransfer(
    _newMaxRouters: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayerFeeVault(
    _relayerFeeVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRouterRecipient(
    router: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapAdminFee(
    canonicalId: BytesLike,
    newAdminFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapFee(
    canonicalId: BytesLike,
    newSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setXAppConnectionManager(
    _xAppConnectionManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAsset(
    _canonical: TokenIdStruct,
    _canonicalDecimals: BigNumberish,
    _representationName: string,
    _representationSymbol: string,
    _adoptedAssetId: string,
    _stableSwapPool: string,
    _cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAssetWithDeployedRepresentation(
    _canonical: TokenIdStruct,
    _representation: string,
    _adoptedAssetId: string,
    _stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopRampA(
    canonicalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    canonicalId: BytesLike,
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExact(
    canonicalId: BytesLike,
    amountIn: BigNumberish,
    assetIn: string,
    assetOut: string,
    minAmountOut: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactOut(
    canonicalId: BytesLike,
    amountOut: BigNumberish,
    assetIn: string,
    assetOut: string,
    maxAmountIn: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferStatus(
    _transferId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  unapproveRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unapproveRouterForPortal(
    _router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDetails(
    _canonical: TokenIdStruct,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidityCap(
    _canonical: TokenIdStruct,
    _updated: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLpTokenTarget(
    newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSwapAdminFees(
    canonicalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

  xcall(
    _destination: BigNumberish,
    _to: string,
    _asset: string,
    _delegate: string,
    _amount: BigNumberish,
    _slippage: BigNumberish,
    _callData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xcallIntoLocal(
    _destination: BigNumberish,
    _to: string,
    _asset: string,
    _delegate: string,
    _amount: BigNumberish,
    _slippage: BigNumberish,
    _callData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    aavePool(overrides?: CallOverrides): Promise<string>;

    aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSequencer(_sequencer: string, overrides?: CallOverrides): Promise<void>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<TokenIdStructOutput>;

    "adoptedToLocalExternalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "adoptedToLocalExternalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    approveRouter(router: string, overrides?: CallOverrides): Promise<void>;

    approveRouterForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "canonicalToRepresentation(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "canonicalToRepresentation((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcceptanceTime(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCustodiedAmount(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalAndAdoptedToken(
      _id: BytesLike,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRouterOwner(_router: string, overrides?: CallOverrides): Promise<string>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<SwapStructOutput>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<TokenIdStructOutput>;

    handle(
      _origin: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeRouter(
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lpTokenTargetAddress(overrides?: CallOverrides): Promise<string>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposeDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterAllowlistRemoval(overrides?: CallOverrides): Promise<void>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relayerFeeVault(overrides?: CallOverrides): Promise<string>;

    remote(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAssetId(bytes32,address,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayer(_relayer: string, overrides?: CallOverrides): Promise<void>;

    removeRouterAllowlist(overrides?: CallOverrides): Promise<void>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSequencer(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayAavePortal(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayAavePortalFor(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    representationToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<TokenIdStructOutput>;

    rescindDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<boolean>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAavePool(_aavePool: string, overrides?: CallOverrides): Promise<void>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerFeeVault(
      _relayerFeeVault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: BigNumberish,
      _representationName: string,
      _representationSymbol: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      _cap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stopRampA(canonicalId: BytesLike, overrides?: CallOverrides): Promise<void>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferStatus(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    unapproveRouter(router: string, overrides?: CallOverrides): Promise<void>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLpTokenTarget(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<string>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    xcallIntoLocal(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "DiamondCutProposed(tuple[],address,bytes,uint256)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null,
      deadline?: null
    ): DiamondCutProposedEventFilter;
    DiamondCutProposed(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null,
      deadline?: null
    ): DiamondCutProposedEventFilter;

    "DiamondCutRescinded(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutRescindedEventFilter;
    DiamondCutRescinded(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutRescindedEventFilter;
  };

  estimateGas: {
    LIQUIDITY_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDITY_FEE_NUMERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    aavePortalFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "adoptedToLocalExternalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "adoptedToLocalExternalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToRepresentation(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canonicalToRepresentation((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcceptanceTime(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCustodiedAmount(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLocalAndAdoptedToken(
      _id: BytesLike,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeRouter(
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lpTokenTargetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoutersPerTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposeDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayerFeeVault(overrides?: CallOverrides): Promise<BigNumber>;

    remote(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAssetId(bytes32,address,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayAavePortal(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayAavePortalFor(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    representationToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rescindDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerAllowlistRemoved(overrides?: CallOverrides): Promise<BigNumber>;

    routerAllowlistTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayerFeeVault(
      _relayerFeeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: BigNumberish,
      _representationName: string,
      _representationSymbol: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferStatus(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unapproveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLpTokenTarget(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xAppConnectionManager(overrides?: CallOverrides): Promise<BigNumber>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xcallIntoLocal(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LIQUIDITY_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDITY_FEE_NUMERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aavePortalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addConnextion(
      _domain: BigNumberish,
      _connext: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStableSwapPool(
      _canonical: TokenIdStruct,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSwapLiquidity(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adoptedToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adoptedToLocalExternalPools((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "adoptedToLocalExternalPools(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approvedAssets(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedAssets((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRelayers(
      _relayer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedSequencers(
      _sequencer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bumpTransfer(
      _transferId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateRemoveSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRemoveSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSwapTokenAmount(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToAdopted(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToAdopted((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToRepresentation(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canonicalToRepresentation((uint32,bytes32))"(
      _canonical: TokenIdStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollCustom(
      _domain: BigNumberish,
      _id: BytesLike,
      _custom: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _args: ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceReceiveLocal(
      _params: TransferInfoStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceUpdateSlippage(
      _params: TransferInfoStruct,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAavePortalDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavePortalFeeDebt(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAcceptanceTime(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCustodiedAmount(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLocalAndAdoptedToken(
      _id: BytesLike,
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedRouterOwnerTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterApproval(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterApprovalForPortal(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterOwner(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRouterRecipient(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapA(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapAPrecise(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapAdminBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapLPToken(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapStorage(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToken(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapTokenBalance(
      canonicalId: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapTokenIndex(
      canonicalId: BytesLike,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapVirtualPrice(
      canonicalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _candidate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _nonce: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeRouter(
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeSwap(
      _canonicalId: BytesLike,
      _pooledTokens: string[],
      decimals: BigNumberish[],
      lpTokenName: string,
      lpTokenSymbol: string,
      _a: BigNumberish,
      _fee: BigNumberish,
      _adminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpTokenTargetAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRoutersPerTransfer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterAllowlistRemoval(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rampA(
      canonicalId: BytesLike,
      futureA: BigNumberish,
      futureTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayerFeeVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remote(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeAssetId((uint32,bytes32),address,address)"(
      _canonical: TokenIdStruct,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAssetId(bytes32,address,address)"(
      _key: BytesLike,
      _adoptedAssetId: string,
      _representation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayer(
      _relayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterAllowlist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidity(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouterLiquidityFor(
      _amount: BigNumberish,
      _local: string,
      _to: string,
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSequencer(
      _sequencer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidity(
      canonicalId: BytesLike,
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidityImbalance(
      canonicalId: BytesLike,
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeSwapLiquidityOneToken(
      canonicalId: BytesLike,
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayAavePortal(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      _maxIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayAavePortalFor(
      _params: TransferInfoStruct,
      _backingAmount: BigNumberish,
      _feeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    representationToCanonical(
      _adopted: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rescindDiamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routedTransfers(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistRemoved(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerAllowlistTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      _router: string,
      _asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAavePool(
      _aavePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAavePortalFee(
      _aavePortalFeeNumerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityFeeNumerator(
      _numerator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxRoutersPerTransfer(
      _newMaxRouters: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerFeeVault(
      _relayerFeeVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapAdminFee(
      canonicalId: BytesLike,
      newAdminFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFee(
      canonicalId: BytesLike,
      newSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setXAppConnectionManager(
      _xAppConnectionManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAsset(
      _canonical: TokenIdStruct,
      _canonicalDecimals: BigNumberish,
      _representationName: string,
      _representationSymbol: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      _cap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAssetWithDeployedRepresentation(
      _canonical: TokenIdStruct,
      _representation: string,
      _adoptedAssetId: string,
      _stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopRampA(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      canonicalId: BytesLike,
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExact(
      canonicalId: BytesLike,
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      minAmountOut: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      canonicalId: BytesLike,
      amountOut: BigNumberish,
      assetIn: string,
      assetOut: string,
      maxAmountIn: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferStatus(
      _transferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unapproveRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unapproveRouterForPortal(
      _router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDetails(
      _canonical: TokenIdStruct,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidityCap(
      _canonical: TokenIdStruct,
      _updated: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLpTokenTarget(
      newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSwapAdminFees(
      canonicalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xAppConnectionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xcall(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xcallIntoLocal(
      _destination: BigNumberish,
      _to: string,
      _asset: string,
      _delegate: string,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
