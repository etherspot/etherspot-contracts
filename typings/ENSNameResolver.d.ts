/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ENSNameResolverInterface extends ethers.utils.Interface {
  functions: {
    "name(bytes32)": FunctionFragment;
    "setName(bytes32,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "name", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;

  events: {
    "NameChanged(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
}

export class ENSNameResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ENSNameResolverInterface;

  functions: {
    name(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "name(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setName(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setName(bytes32,string)"(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  "name(bytes32)"(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  setName(
    node: BytesLike,
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setName(bytes32,string)"(
    node: BytesLike,
    name: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    name(node: BytesLike, overrides?: CallOverrides): Promise<string>;

    "name(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setName(
      node: BytesLike,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setName(bytes32,string)"(
      node: BytesLike,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NameChanged(node: BytesLike | null, name: null): EventFilter;
  };

  estimateGas: {
    name(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "name(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setName(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setName(bytes32,string)"(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    name(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "name(bytes32)"(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setName(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setName(bytes32,string)"(
      node: BytesLike,
      name: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
