/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ENSTextResolverInterface extends ethers.utils.Interface {
  functions: {
    "setText(bytes32,string,string)": FunctionFragment;
    "text(bytes32,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;

  events: {
    "TextChanged(bytes32,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
}

export class ENSTextResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ENSTextResolverInterface;

  functions: {
    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setText(bytes32,string,string)"(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "text(bytes32,string)"(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  setText(
    node: BytesLike,
    key: string,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setText(bytes32,string,string)"(
    node: BytesLike,
    key: string,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  text(
    node: BytesLike,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "text(bytes32,string)"(
    node: BytesLike,
    key: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setText(bytes32,string,string)"(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "text(bytes32,string)"(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    TextChanged(
      node: BytesLike | null,
      indexedKey: string | null,
      key: null
    ): EventFilter;
  };

  estimateGas: {
    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setText(bytes32,string,string)"(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "text(bytes32,string)"(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setText(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setText(bytes32,string,string)"(
      node: BytesLike,
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    text(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "text(bytes32,string)"(
      node: BytesLike,
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
