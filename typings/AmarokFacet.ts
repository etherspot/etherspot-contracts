/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AmarokFacetInterface extends utils.Interface {
  functions: {
    "amarokCall(address,bytes,uint32,address,uint256,uint256,address,address,uint256)": FunctionFragment;
    "amarokNativeAssetTransfer(address,uint32,uint256)": FunctionFragment;
    "amarokTokenTransfer(address,address,uint32,uint256,uint256)": FunctionFragment;
    "initAmarok(address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amarokCall",
    values: [
      string,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "amarokNativeAssetTransfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "amarokTokenTransfer",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initAmarok",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "amarokCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amarokNativeAssetTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amarokTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initAmarok", data: BytesLike): Result;

  events: {
    "AmarokInitialized(address)": EventFragment;
    "AmarokNativeSwap(uint32,address,uint256,uint256,bytes32)": EventFragment;
    "AmarokTokenSwap(uint32,address,address,uint256,uint256,bytes32)": EventFragment;
    "AmarokXCall(uint32,address,address,uint256,bytes,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmarokInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmarokNativeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmarokTokenSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmarokXCall"): EventFragment;
}

export type AmarokInitializedEvent = TypedEvent<[string], { _connext: string }>;

export type AmarokInitializedEventFilter =
  TypedEventFilter<AmarokInitializedEvent>;

export type AmarokNativeSwapEvent = TypedEvent<
  [number, string, BigNumber, BigNumber, string],
  {
    _destination: number;
    _recipient: string;
    _amount: BigNumber;
    _relayerFee: BigNumber;
    _transferId: string;
  }
>;

export type AmarokNativeSwapEventFilter =
  TypedEventFilter<AmarokNativeSwapEvent>;

export type AmarokTokenSwapEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber, string],
  {
    _destination: number;
    _recipient: string;
    _asset: string;
    _amount: BigNumber;
    _relayerFee: BigNumber;
    _transferId: string;
  }
>;

export type AmarokTokenSwapEventFilter = TypedEventFilter<AmarokTokenSwapEvent>;

export type AmarokXCallEvent = TypedEvent<
  [number, string, string, BigNumber, string, BigNumber, string],
  {
    _destination: number;
    _recipient: string;
    _asset: string;
    _amount: BigNumber;
    _callData: string;
    _relayerFee: BigNumber;
    _transferId: string;
  }
>;

export type AmarokXCallEventFilter = TypedEventFilter<AmarokXCallEvent>;

export interface AmarokFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AmarokFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amarokCall(
      _to: string,
      _callData: BytesLike,
      _destinationDomain: BigNumberish,
      _asset: string,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      _recovery: string,
      _callback: string,
      _callbackFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amarokNativeAssetTransfer(
      _to: string,
      _destinationDomain: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amarokTokenTransfer(
      _asset: string,
      _to: string,
      _destinationDomain: BigNumberish,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initAmarok(
      _connext: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  amarokCall(
    _to: string,
    _callData: BytesLike,
    _destinationDomain: BigNumberish,
    _asset: string,
    _amount: BigNumberish,
    _relayerFee: BigNumberish,
    _recovery: string,
    _callback: string,
    _callbackFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amarokNativeAssetTransfer(
    _to: string,
    _destinationDomain: BigNumberish,
    _relayerFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amarokTokenTransfer(
    _asset: string,
    _to: string,
    _destinationDomain: BigNumberish,
    _amount: BigNumberish,
    _relayerFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initAmarok(
    _connext: string,
    _chainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amarokCall(
      _to: string,
      _callData: BytesLike,
      _destinationDomain: BigNumberish,
      _asset: string,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      _recovery: string,
      _callback: string,
      _callbackFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    amarokNativeAssetTransfer(
      _to: string,
      _destinationDomain: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    amarokTokenTransfer(
      _asset: string,
      _to: string,
      _destinationDomain: BigNumberish,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initAmarok(
      _connext: string,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AmarokInitialized(address)"(_connext?: null): AmarokInitializedEventFilter;
    AmarokInitialized(_connext?: null): AmarokInitializedEventFilter;

    "AmarokNativeSwap(uint32,address,uint256,uint256,bytes32)"(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _amount?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokNativeSwapEventFilter;
    AmarokNativeSwap(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _amount?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokNativeSwapEventFilter;

    "AmarokTokenSwap(uint32,address,address,uint256,uint256,bytes32)"(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _asset?: string | null,
      _amount?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokTokenSwapEventFilter;
    AmarokTokenSwap(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _asset?: string | null,
      _amount?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokTokenSwapEventFilter;

    "AmarokXCall(uint32,address,address,uint256,bytes,uint256,bytes32)"(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _asset?: null,
      _amount?: null,
      _callData?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokXCallEventFilter;
    AmarokXCall(
      _destination?: BigNumberish | null,
      _recipient?: string | null,
      _asset?: null,
      _amount?: null,
      _callData?: null,
      _relayerFee?: null,
      _transferId?: null
    ): AmarokXCallEventFilter;
  };

  estimateGas: {
    amarokCall(
      _to: string,
      _callData: BytesLike,
      _destinationDomain: BigNumberish,
      _asset: string,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      _recovery: string,
      _callback: string,
      _callbackFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amarokNativeAssetTransfer(
      _to: string,
      _destinationDomain: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amarokTokenTransfer(
      _asset: string,
      _to: string,
      _destinationDomain: BigNumberish,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initAmarok(
      _connext: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amarokCall(
      _to: string,
      _callData: BytesLike,
      _destinationDomain: BigNumberish,
      _asset: string,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      _recovery: string,
      _callback: string,
      _callbackFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amarokNativeAssetTransfer(
      _to: string,
      _destinationDomain: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amarokTokenTransfer(
      _asset: string,
      _to: string,
      _destinationDomain: BigNumberish,
      _amount: BigNumberish,
      _relayerFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initAmarok(
      _connext: string,
      _chainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
