/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DeBridgeFacetInterface extends utils.Interface {
  functions: {
    "deBridgeBridgeTokens(address,uint256,uint256,address,address,uint256)": FunctionFragment;
    "deBridgeGate()": FunctionFragment;
    "getChainId()": FunctionFragment;
    "updateGateAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deBridgeBridgeTokens",
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deBridgeGate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGateAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deBridgeBridgeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deBridgeGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateGateAddress",
    data: BytesLike
  ): Result;

  events: {
    "TransferInitiated(string,address,address,address,uint256,uint256,uint256)": EventFragment;
    "UpdatedGateAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransferInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedGateAddress"): EventFragment;
}

export type TransferInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    bridge: string;
    tokenAddress: string;
    from: string;
    to: string;
    amount: BigNumber;
    sendingChain: BigNumber;
    receivingChain: BigNumber;
  }
>;

export type TransferInitiatedEventFilter =
  TypedEventFilter<TransferInitiatedEvent>;

export type UpdatedGateAddressEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type UpdatedGateAddressEventFilter =
  TypedEventFilter<UpdatedGateAddressEvent>;

export interface DeBridgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeBridgeFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deBridgeBridgeTokens(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: string,
      _fallback: string,
      _executionFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deBridgeGate(overrides?: CallOverrides): Promise<[string]>;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { chainId: BigNumber }>;

    updateGateAddress(
      _newGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deBridgeBridgeTokens(
    _tokenAddress: string,
    _amount: BigNumberish,
    _chainIdTo: BigNumberish,
    _receiver: string,
    _fallback: string,
    _executionFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deBridgeGate(overrides?: CallOverrides): Promise<string>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  updateGateAddress(
    _newGate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deBridgeBridgeTokens(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: string,
      _fallback: string,
      _executionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deBridgeGate(overrides?: CallOverrides): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    updateGateAddress(
      _newGate: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransferInitiated(string,address,address,address,uint256,uint256,uint256)"(
      bridge?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      sendingChain?: null,
      receivingChain?: null
    ): TransferInitiatedEventFilter;
    TransferInitiated(
      bridge?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      sendingChain?: null,
      receivingChain?: null
    ): TransferInitiatedEventFilter;

    "UpdatedGateAddress(address)"(
      newAddress?: null
    ): UpdatedGateAddressEventFilter;
    UpdatedGateAddress(newAddress?: null): UpdatedGateAddressEventFilter;
  };

  estimateGas: {
    deBridgeBridgeTokens(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: string,
      _fallback: string,
      _executionFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deBridgeGate(overrides?: CallOverrides): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    updateGateAddress(
      _newGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deBridgeBridgeTokens(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: string,
      _fallback: string,
      _executionFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deBridgeGate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateGateAddress(
      _newGate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
