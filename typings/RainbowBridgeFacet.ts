/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RainbowBridgeDataStruct = {
  token: string;
  recipient: string;
  amount: BigNumberish;
  transferFee: BigNumberish;
};

export type RainbowBridgeDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber
] & {
  token: string;
  recipient: string;
  amount: BigNumber;
  transferFee: BigNumber;
};

export interface RainbowBridgeFacetInterface extends utils.Interface {
  functions: {
    "initializeRainbowBridge(address)": FunctionFragment;
    "rainbowBridgeTokensToAurora((address,string,uint256,uint256))": FunctionFragment;
    "updateEthCustodianAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializeRainbowBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rainbowBridgeTokensToAurora",
    values: [RainbowBridgeDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEthCustodianAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "initializeRainbowBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rainbowBridgeTokensToAurora",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEthCustodianAddress",
    data: BytesLike
  ): Result;

  events: {
    "RainbowBridgeInitialized(address)": EventFragment;
    "TransferStarted(string,address,address,string,uint256,uint256)": EventFragment;
    "UpdatedEthCustodianAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RainbowBridgeInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedEthCustodianAddress"): EventFragment;
}

export type RainbowBridgeInitializedEvent = TypedEvent<
  [string],
  { ethCustodian: string }
>;

export type RainbowBridgeInitializedEventFilter =
  TypedEventFilter<RainbowBridgeInitializedEvent>;

export type TransferStartedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  {
    bridgeUsed: string;
    tokenAddress: string;
    from: string;
    to: string;
    amount: BigNumber;
    fee: BigNumber;
  }
>;

export type TransferStartedEventFilter = TypedEventFilter<TransferStartedEvent>;

export type UpdatedEthCustodianAddressEvent = TypedEvent<
  [string],
  { newAddress: string }
>;

export type UpdatedEthCustodianAddressEventFilter =
  TypedEventFilter<UpdatedEthCustodianAddressEvent>;

export interface RainbowBridgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RainbowBridgeFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializeRainbowBridge(
      _ethCustodian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rainbowBridgeTokensToAurora(
      _rainbowData: RainbowBridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEthCustodianAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  initializeRainbowBridge(
    _ethCustodian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rainbowBridgeTokensToAurora(
    _rainbowData: RainbowBridgeDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEthCustodianAddress(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initializeRainbowBridge(
      _ethCustodian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rainbowBridgeTokensToAurora(
      _rainbowData: RainbowBridgeDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEthCustodianAddress(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RainbowBridgeInitialized(address)"(
      ethCustodian?: null
    ): RainbowBridgeInitializedEventFilter;
    RainbowBridgeInitialized(
      ethCustodian?: null
    ): RainbowBridgeInitializedEventFilter;

    "TransferStarted(string,address,address,string,uint256,uint256)"(
      bridgeUsed?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      fee?: null
    ): TransferStartedEventFilter;
    TransferStarted(
      bridgeUsed?: null,
      tokenAddress?: null,
      from?: null,
      to?: null,
      amount?: null,
      fee?: null
    ): TransferStartedEventFilter;

    "UpdatedEthCustodianAddress(address)"(
      newAddress?: null
    ): UpdatedEthCustodianAddressEventFilter;
    UpdatedEthCustodianAddress(
      newAddress?: null
    ): UpdatedEthCustodianAddressEventFilter;
  };

  estimateGas: {
    initializeRainbowBridge(
      _ethCustodian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rainbowBridgeTokensToAurora(
      _rainbowData: RainbowBridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEthCustodianAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initializeRainbowBridge(
      _ethCustodian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rainbowBridgeTokensToAurora(
      _rainbowData: RainbowBridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEthCustodianAddress(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
